{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/midnight/.gitignore","hash":"b427dfc99415c39ca9372aa1497e9cf352f4fbc5","modified":1594362431251},{"_id":"themes/midnight/.rubocop.yml","hash":"9e44102c200f2dfec535eb467fc483028fc85aae","modified":1594362431252},{"_id":"themes/midnight/.travis.yml","hash":"c44e86b035a851c834c25eded771dc5661f11e83","modified":1594362431252},{"_id":"themes/midnight/Gemfile","hash":"447da61540c31ae787314d3f4320a4cece3a1fdf","modified":1594362431252},{"_id":"themes/midnight/LICENSE","hash":"34b2b37ec594d86bd391137b4fb644eccb17bdbb","modified":1594362431252},{"_id":"themes/midnight/README.md","hash":"e3fa7424fb4cb94fcd342557f96a9730c48bb9b5","modified":1594362431252},{"_id":"themes/midnight/_config.yml","hash":"9ea3ef21881864a4b0ef9c0c0ba912d49c753ad7","modified":1594362431252},{"_id":"themes/midnight/another-page.md","hash":"7f7a9e0e29d5b79fd8a505f541173d886f330818","modified":1594362431254},{"_id":"themes/midnight/index.md","hash":"feca15deffb093548d6fc22b2ef4216a4538c756","modified":1594362431303},{"_id":"themes/midnight/jekyll-theme-midnight.gemspec","hash":"efc9d985bd0839a1993a6116db5eda78e8b4b1d4","modified":1594362431303},{"_id":"themes/midnight/thumbnail.png","hash":"68d4d3723abb786c5035d7ea1bf814fa1344fa5a","modified":1594362431304},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1594359655414},{"_id":"source/_posts/APP冷启动.md","hash":"a618a1605e5bdb9962f3796f4e128632a4c99c56","modified":1594353425106},{"_id":"source/_posts/AVFoundation总结.md","hash":"f60a48216fff50bc337a00f7b768d0be1dea3a1e","modified":1594353425106},{"_id":"source/_posts/MBProgressHUD源码解析.md","hash":"bdc5a16670d151ea197a00f94d7028601bc8b2fb","modified":1594353425107},{"_id":"source/_posts/OC对象本质.md","hash":"1307151c47b266b1a0bbeaab614016b82df74691","modified":1594353534364},{"_id":"source/_posts/Runtime总结.md","hash":"0ababb9e2ef65748dfa1c00a1e33093709de5db5","modified":1594353425107},{"_id":"source/_posts/TPKeyboardAvoiding源码解析.md","hash":"7c6a5539eeb2256c9c66b9551c80ab4ec6c79b44","modified":1594353425107},{"_id":"source/_posts/cocoapods.md","hash":"1a22834c47b71dd25d5a7c42c45512fa1a4e4ceb","modified":1594353425107},{"_id":"source/_posts/iOS中常用 的三方库.md","hash":"64da3a93b7836198845b72419c752ddeb2c3344e","modified":1594353425107},{"_id":"source/_posts/iOS生成.pem推送证书.md","hash":"e5e771e72eaa90a26808712964630edbdf73b3c5","modified":1594353425108},{"_id":"source/_posts/imags.md","hash":"e05712d6deaa47051452f120214afb2460eb75e1","modified":1594353425108},{"_id":"source/_posts/在服务器上部署shadowsocks服务.md","hash":"2123c677695411e611e0f956af41e5bdd26be3b8","modified":1594353425108},{"_id":"source/_posts/年度总结.md","hash":"3b31353d7667ec1cbfc15580e50a0f7ec8346756","modified":1594353425108},{"_id":"source/categories/index.md","hash":"6734661e2fdde22cc31a6c723ac2dd35dd4c531a","modified":1594353425109},{"_id":"source/tags/index.md","hash":"60f0385ca91dddbeee932ae45c9f130f47cf7fe6","modified":1594353425109},{"_id":"themes/midnight/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1594362431245},{"_id":"themes/midnight/.git/config","hash":"3bc18923dead39e57ea8174e0a97322d1efcc511","modified":1594362431246},{"_id":"themes/midnight/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1594362426669},{"_id":"themes/midnight/.git/index","hash":"7c58ca947ef9fc6a987865b907e2834f5e8e6c31","modified":1594362431304},{"_id":"themes/midnight/.git/packed-refs","hash":"9328d226c17467f37bdf038d20517f8ea5651ed5","modified":1594362431243},{"_id":"themes/midnight/.github/CODEOWNERS","hash":"274cd780e58b1405a5074ed434477b80d99b1ed6","modified":1594362431251},{"_id":"themes/midnight/.github/config.yml","hash":"354a7732222a45f077137f2aa79932ca64589d89","modified":1594362431251},{"_id":"themes/midnight/.github/no-response.yml","hash":"10dec00d95d5e55a40c088119936179b4fe4e509","modified":1594362431251},{"_id":"themes/midnight/.github/settings.yml","hash":"c66253485457fd0ebec00da7971c9ece9445db7f","modified":1594362431251},{"_id":"themes/midnight/.github/stale.yml","hash":"c44789b1640c57b459a2365aec7a97269bc74ebe","modified":1594362431251},{"_id":"themes/midnight/_layouts/default.html","hash":"786f4c8b7e044ece6a521f1ae1e593d3de4e0fc8","modified":1594362431253},{"_id":"themes/midnight/_sass/fonts.scss","hash":"617526ee69d37c77e359adef257ff33377b74708","modified":1594362431253},{"_id":"themes/midnight/_sass/jekyll-theme-midnight.scss","hash":"fe8fdea48f4296358318d11f2c1fd4b9174d51bf","modified":1594362431254},{"_id":"themes/midnight/_sass/normalize.scss","hash":"cfa5e0227734121bdb64f634de350e0633974a4a","modified":1594362431254},{"_id":"themes/midnight/_sass/rouge-base16-dark.scss","hash":"21ac18cfa47b94a1f53b6b2eec758a51ef43c46a","modified":1594362431254},{"_id":"themes/midnight/docs/CODE_OF_CONDUCT.md","hash":"dec28b1f17dc211dd5443e98a09a1289b4a819e5","modified":1594362431303},{"_id":"themes/midnight/docs/CONTRIBUTING.md","hash":"2ae6978f3835b2043e8cfb91d2fdf220dcae4687","modified":1594362431303},{"_id":"themes/midnight/docs/SUPPORT.md","hash":"0b4414075183f72eed0585b87ed7432add2b86cb","modified":1594362431303},{"_id":"themes/midnight/script/bootstrap","hash":"1f93c320f111d5977c729c92c8ac8a6f352a87dd","modified":1594362431303},{"_id":"themes/midnight/script/cibuild","hash":"7a52572c69cd62e32e15eab001e654af62642cbf","modified":1594362431303},{"_id":"themes/midnight/script/release","hash":"c33619f8b268538896449e9ebb8f0dd112017dd0","modified":1594362431304},{"_id":"themes/midnight/script/validate-html","hash":"72e063404580a29c20d41abd3c2cfc9769897743","modified":1594362431304},{"_id":"themes/midnight/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1594362426671},{"_id":"themes/midnight/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1594362426670},{"_id":"themes/midnight/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1594362426671},{"_id":"themes/midnight/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1594362426672},{"_id":"themes/midnight/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1594362426670},{"_id":"themes/midnight/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1594362426672},{"_id":"themes/midnight/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1594362426670},{"_id":"themes/midnight/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1594362426671},{"_id":"themes/midnight/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1594362426671},{"_id":"themes/midnight/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1594362426672},{"_id":"themes/midnight/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1594362426669},{"_id":"themes/midnight/.git/logs/HEAD","hash":"52d267bd2e1805fed88a4635dc354a1ea65fa98f","modified":1594362431245},{"_id":"themes/midnight/assets/css/ie.scss","hash":"2a1e9c76467465b2d0b30e6b9dd88c776a576c59","modified":1594362431255},{"_id":"themes/midnight/assets/css/style.scss","hash":"f2d58b75c66f624189828d2d14aad24d597b75a4","modified":1594362431255},{"_id":"themes/midnight/assets/images/bullet.png","hash":"e6410edc204a6b6f06b2981d7cf131b0479899c8","modified":1594362431302},{"_id":"themes/midnight/assets/images/hr.gif","hash":"af169821b43fda35fc7ab8f7b7afc8d3c442be23","modified":1594362431302},{"_id":"themes/midnight/assets/images/nav-bg.gif","hash":"fa6db419b63560371283fb31bffd2e6c7fdbb617","modified":1594362431302},{"_id":"themes/midnight/assets/fonts/OpenSans-LightItalic-webfont.woff","hash":"1d17d5ce452c33f1fbc7fc5f69872ee994660f43","modified":1594362431288},{"_id":"themes/midnight/assets/js/respond.js","hash":"71dbe1e6935227f4e0143904a58878b512e54163","modified":1594362431302},{"_id":"themes/midnight/assets/fonts/OpenSans-Bold-webfont.eot","hash":"40988f8c3eb6e5a2dd315f9aa3d87ad0f5885f20","modified":1594362431256},{"_id":"themes/midnight/assets/fonts/OpenSans-Bold-webfont.ttf","hash":"0b761babfef1bd6a1fbf8c6b2ff62b3958042a7c","modified":1594362431263},{"_id":"themes/midnight/assets/fonts/OpenSans-Bold-webfont.woff","hash":"5a8590799cc9d3bbe9b85895147edaa1ebfc6a4c","modified":1594362431264},{"_id":"themes/midnight/assets/fonts/OpenSans-BoldItalic-webfont.eot","hash":"3dc1a9bfdd3576550b029d5542c6f5c96c67e367","modified":1594362431264},{"_id":"themes/midnight/assets/fonts/OpenSans-BoldItalic-webfont.ttf","hash":"b3b61520c4fb5bca00b559d17af6e040dd1048e0","modified":1594362431270},{"_id":"themes/midnight/assets/fonts/OpenSans-BoldItalic-webfont.woff","hash":"79929cc56542776813ee5bafe6d8e675664304b2","modified":1594362431271},{"_id":"themes/midnight/assets/fonts/OpenSans-Italic-webfont.eot","hash":"fc3c322832cfae5355dbc0949294a26c1c5c1980","modified":1594362431272},{"_id":"themes/midnight/assets/fonts/OpenSans-Italic-webfont.ttf","hash":"39935539722d2ff7b10172233c95af688f59e1bf","modified":1594362431277},{"_id":"themes/midnight/assets/fonts/OpenSans-Light-webfont.eot","hash":"a85641c14d8bef344a5862b1c442290813990f05","modified":1594362431278},{"_id":"themes/midnight/assets/fonts/OpenSans-Italic-webfont.woff","hash":"3ec74bbf28490dd2adde7164ad78fee244f24ad0","modified":1594362431277},{"_id":"themes/midnight/assets/fonts/OpenSans-Light-webfont.ttf","hash":"06a2637986700443d29ac9111cfc369c22670748","modified":1594362431282},{"_id":"themes/midnight/assets/fonts/OpenSans-Light-webfont.woff","hash":"dacf4096aef790aebd92d0fbdb48b91cfdfbccef","modified":1594362431283},{"_id":"themes/midnight/assets/fonts/OpenSans-LightItalic-webfont.eot","hash":"579edae9b9d2a27adacfb9d6d4a26fdc9207f251","modified":1594362431284},{"_id":"themes/midnight/assets/fonts/OpenSans-LightItalic-webfont.ttf","hash":"983fffb8c3486c4aab8669ac0791415c28f42251","modified":1594362431288},{"_id":"themes/midnight/assets/fonts/OpenSans-Regular-webfont.eot","hash":"2b4338ccbd8dafbbf0d641fe34f5d07808da7e1f","modified":1594362431289},{"_id":"themes/midnight/assets/fonts/OpenSans-Regular-webfont.ttf","hash":"241bb16033270ea17b13f9d35f750798cba11d14","modified":1594362431292},{"_id":"themes/midnight/assets/fonts/OpenSans-Regular-webfont.woff","hash":"6338efd317dcb9320b25a3dfa16e3a4f08329ca0","modified":1594362431293},{"_id":"themes/midnight/assets/fonts/OpenSans-Semibold-webfont.eot","hash":"91104142803c40469d62079bf1be379f44e5d2f0","modified":1594362431294},{"_id":"themes/midnight/assets/fonts/OpenSans-Semibold-webfont.ttf","hash":"5c938cb2da352b6432f3e80a60bffbe0d2c76b49","modified":1594362431297},{"_id":"themes/midnight/assets/fonts/OpenSans-Semibold-webfont.woff","hash":"7d27c6111dd5a2c5ebf44ee20d806808816c0e6a","modified":1594362431297},{"_id":"themes/midnight/assets/fonts/OpenSans-SemiboldItalic-webfont.eot","hash":"0b6d8c5de8b22a081606e583d809db0bb425fc98","modified":1594362431298},{"_id":"themes/midnight/assets/fonts/OpenSans-SemiboldItalic-webfont.ttf","hash":"0a71c843c8d0fa65c70a9a8f20b83e4276ecee69","modified":1594362431301},{"_id":"themes/midnight/assets/fonts/OpenSans-SemiboldItalic-webfont.woff","hash":"dff780da5ad698353a9abe56612c74a56583dd5f","modified":1594362431302},{"_id":"themes/midnight/.git/refs/heads/master","hash":"18c29b5df439cf0686fb60399fd2765d50335190","modified":1594362431245},{"_id":"themes/midnight/.git/objects/pack/pack-813dadcdbdce4059c12b7edfcc1c273cdaed8280.idx","hash":"801cc9816c5fb6a9669e4d6b1664e21b697a2905","modified":1594362431235},{"_id":"themes/midnight/.git/logs/refs/heads/master","hash":"52d267bd2e1805fed88a4635dc354a1ea65fa98f","modified":1594362431246},{"_id":"themes/midnight/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1594362431244},{"_id":"themes/midnight/.git/logs/refs/remotes/origin/HEAD","hash":"52d267bd2e1805fed88a4635dc354a1ea65fa98f","modified":1594362431244},{"_id":"themes/midnight/assets/fonts/OpenSans-Semibold-webfont.svg","hash":"abe007cf3ba4bc5f9c7980708eb1b0cd3c4dfb79","modified":1594362431296},{"_id":"themes/midnight/assets/fonts/OpenSans-BoldItalic-webfont.svg","hash":"28bfcbfdde623e40b0fa67cd6b4fb4af05889212","modified":1594362431269},{"_id":"themes/midnight/assets/fonts/OpenSans-Bold-webfont.svg","hash":"7d82a67f8d5efd36355e63f651b2cf92309a976b","modified":1594362431262},{"_id":"themes/midnight/assets/fonts/OpenSans-Light-webfont.svg","hash":"b560367a043bd980985652117b9725dc4301f4f2","modified":1594362431281},{"_id":"themes/midnight/assets/fonts/OpenSans-SemiboldItalic-webfont.svg","hash":"fc32b58e22f7fc5e6e29fccdf8690f898a977b25","modified":1594362431300},{"_id":"themes/midnight/assets/fonts/OpenSans-Italic-webfont.svg","hash":"63e5b188773a7bd4a93c65ee58686d012af17994","modified":1594362431276},{"_id":"themes/midnight/assets/fonts/OpenSans-LightItalic-webfont.svg","hash":"e205ef63ef821a570ee3fcb4004ce280d234eef3","modified":1594362431287},{"_id":"themes/midnight/assets/fonts/OpenSans-Regular-webfont.svg","hash":"7a9bdefae08b74ce7bc27c3854d1e9e22a898460","modified":1594362431291},{"_id":"themes/midnight/.git/objects/pack/pack-813dadcdbdce4059c12b7edfcc1c273cdaed8280.pack","hash":"f0142d459f44a7e6eb9068c4b1c23c0366f90acc","modified":1594362431235},{"_id":"public/categories/index.html","hash":"749aae76750251fa5f76dd87b3a255ed3da7135e","modified":1594362806538},{"_id":"public/2020/07/10/OC对象本质/index.html","hash":"48607f30a1f370e5c6c839c1ac81dec4a70825ca","modified":1594362806539},{"_id":"public/tags/index.html","hash":"5534a9e28bf3aae426c802c660385750064ba46b","modified":1594362806538},{"_id":"public/2019/11/14/在服务器上部署shadowsocks服务/index.html","hash":"e754330c0b88656ff084f17ac5a51cf54e012e28","modified":1594362806541},{"_id":"public/2019/09/09/AVFoundation总结/index.html","hash":"11c20872440c907cedf3f0f62c037fd595ad961f","modified":1594362806541},{"_id":"public/2019/10/31/Runtime总结/index.html","hash":"fdee90df3fbc5bcea45f43c7a9b06b1e4886f6b4","modified":1594362806539},{"_id":"public/2019/08/30/TPKeyboardAvoiding源码解析/index.html","hash":"44a8d67530fb77bcdda03fd906e635966823e263","modified":1594362806541},{"_id":"public/2019/08/08/iOS中常用 的三方库/index.html","hash":"fe3b715b8aceb154695b7f28aa86eeda25658103","modified":1594362806539},{"_id":"public/2019/05/23/MBProgressHUD源码解析/index.html","hash":"3690f04e6a29c5b0cc0d8b3ffaa54dd6944cad2a","modified":1594362806541},{"_id":"public/2019/08/23/APP冷启动/index.html","hash":"bfe9dba0fa2ed15bc7be71c3925d739fab43392a","modified":1594362806539},{"_id":"public/2019/01/15/iOS生成.pem推送证书/index.html","hash":"2658af0e3c50f1bd2f6a4b011fce3b4637f2816e","modified":1594362806539},{"_id":"public/2018/12/29/年度总结/index.html","hash":"267efeef2fbc9f319abe11be0ef45898f7e3f99e","modified":1594362806539},{"_id":"public/2018/04/09/cocoapods/index.html","hash":"988a836d4e65d9c55cbe76829fc8a67d344b7a1d","modified":1594362806541},{"_id":"public/2018/03/28/imags/index.html","hash":"632d8f482616a5f3944df2a38cb3cb65de4a5f18","modified":1594362806539},{"_id":"public/archives/page/2/index.html","hash":"62149c5260d2b0187670f753774b5093a5557b62","modified":1594362806539},{"_id":"public/archives/index.html","hash":"4c46778561cbbe3a6935f8f8eabdece5f4861d09","modified":1594362806539},{"_id":"public/archives/2018/index.html","hash":"8a3fa09a36d9c1470f8021c2be834ac2c943dd37","modified":1594362806539},{"_id":"public/archives/2018/03/index.html","hash":"5320665cbcc606f8e4f9bdf1b689c47cf9a891fe","modified":1594362806539},{"_id":"public/archives/2018/12/index.html","hash":"673b407cf6eff018385aa8ce61217cbd35aa6b96","modified":1594362806539},{"_id":"public/archives/2018/04/index.html","hash":"58776c735fc7e8c0710cf8b26db8149eae1bc762","modified":1594362806539},{"_id":"public/archives/2019/index.html","hash":"e7bc48c2d314982976cc324b86e3ebbff4dbf469","modified":1594362806539},{"_id":"public/archives/2019/01/index.html","hash":"c9c2959aae553a30cb8890240b9f9e1fdf0aa9e2","modified":1594362806539},{"_id":"public/archives/2019/05/index.html","hash":"93050228158ce94b49b945ba7dec690c65c926e5","modified":1594362806540},{"_id":"public/archives/2019/08/index.html","hash":"502e215686c32d94cf9412d7eec88e2464c25b1f","modified":1594362806540},{"_id":"public/archives/2019/09/index.html","hash":"7d83804feb368a0bba261173e2b28f0f2ea13c2d","modified":1594362806540},{"_id":"public/archives/2019/10/index.html","hash":"a1cba7cf15a31a4eb6bf8ef52e43622465fe2afd","modified":1594362806540},{"_id":"public/archives/2019/11/index.html","hash":"434a0e193b9514b53a8d5543b25b6e4106ed86b4","modified":1594362806540},{"_id":"public/archives/2020/index.html","hash":"fa21513bbef005b59dede27c6e265ef2db800ce9","modified":1594362806540},{"_id":"public/archives/2020/07/index.html","hash":"94e40e8b2adbe124bd508f94eced6a54aba0eb65","modified":1594362806540},{"_id":"public/categories/学习总结/index.html","hash":"a427e6f68a24f937b952e17c8766e6c96f4065d8","modified":1594362806540},{"_id":"public/categories/源码阅读/index.html","hash":"48fb051b891f41f0dbc6e23771106e2260736753","modified":1594362806540},{"_id":"public/categories/学习笔记/index.html","hash":"fc0b29f70c8ed55f1979705746f1898c22995b0c","modified":1594362806540},{"_id":"public/categories/风景/index.html","hash":"5886e85050cb48486f2dbdebabe4df1789cdcba6","modified":1594362806540},{"_id":"public/categories/工具/index.html","hash":"c2814522c6a56148c5ac92529f1d16d7d46d0c2f","modified":1594362806540},{"_id":"public/tags/iOS/index.html","hash":"8c8b5c60b7d61ca1e4e3119f60c0f66195eaec26","modified":1594362806540},{"_id":"public/tags/学习笔记/index.html","hash":"f9939cae9e5d020b2880f52bf7068a155b82b251","modified":1594362806540},{"_id":"public/tags/旅行/index.html","hash":"b3b141fd7d6b4e67c6bfbfe1c6b3195f361085af","modified":1594362806541},{"_id":"public/tags/网络/index.html","hash":"c8f3561317a88b1764df80ff9ad61be8f23478fb","modified":1594362806540},{"_id":"public/tags/年度总结/index.html","hash":"9b92ce4324d2e68120108f52be31a46beb58f09f","modified":1594362806540},{"_id":"public/index.html","hash":"e63d925bdcf6da71b7166f1d2fe03dd96e2d9353","modified":1594362806541},{"_id":"public/page/2/index.html","hash":"b0ee7ffd68130b0ed66665058e4f9bba94d18639","modified":1594362806540},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1594353425109},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1594353425109},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1594353425109},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1594353425109},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1594353425109},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1594353425117},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1594353425110},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1594353425110},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1594353425110},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1594353425110},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1594353425110},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1594353425110},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1594353425111},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1594353425111},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1594353425111},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1594353425111},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1594353425111},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1594353425111},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1594353425116},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1594353425116},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1594353425116},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1594353425116},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1594353425116},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1594353425116},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1594353425117},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1594353425117},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1594353425112},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1594353425112},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1594353425112},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1594353425112},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1594353425113},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1594353425115},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1594353425115},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1594353425115},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1594353425115},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1594353425115},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1594353425116},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1594353425118},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1594353425120},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1594353425129},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594353425130},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594353425130},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594353425130},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594353425130},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594353425131},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1594353425133},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1594353425133},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1594353425134},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594353425131},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1594353425133},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1594353425114},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1594353425114},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1594353425114},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1594353425114},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1594353425114},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1594353425114},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1594353425118},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1594353425118},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1594353425118},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1594353425119},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1594353425119},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1594353425119},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1594353425118},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1594353425119},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1594353425119},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1594353425119},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1594353425120},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1594353425120},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1594353425122},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1594353425127},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594353425131},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1594353425132},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1594353425132},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1594353425132},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1594353425132},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1594353425132},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1594353425122},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1594353425127},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1594353425125},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1594353425129},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594362806554},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594362806554},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594362806554},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594362806554},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594362806554},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594362806554},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1594362806554},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1594362806554},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594362806554},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1594362806554},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1594362806992},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1594362807007},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1594362807007},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1594362807007},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1594362807007},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1594362807007},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1594362807007},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1594362807007},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1594362807007},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1594362807007},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1594362807007},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1594362807011},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1594362807045}],"Category":[{"name":"学习总结","_id":"ckcfu9a5c00046r36x4dxqoty"},{"name":"源码阅读","_id":"ckcfu9a5q000f6r36x9qe9yro"},{"name":"学习笔记","_id":"ckcfu9a5y000o6r36bmj80mzy"},{"name":"风景","_id":"ckcfu9a66001d6r36b3rt0ltz"},{"name":"工具","_id":"ckcfu9a67001g6r36o4sb4fte"}],"Data":[],"Page":[{"title":"categories","date":"2019-08-08T07:01:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-08 15:01:54\ntype: \"categories\"\n---\n","updated":"2020-07-10T03:57:05.109Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckcfu9a5800016r36bh6ahs36","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-08T07:04:05.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-08 15:04:05\ntype: tags\n---\n\n","updated":"2020-07-10T03:57:05.109Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckcfu9a5b00036r36eu43i6a5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"APP冷启动","date":"2019-08-23T03:21:40.000Z","_content":"\n#### 什么是APP冷启动\n\nAPP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。\n\n#### 前言\n\n网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）\n\n#### APP启动阶段\n\nAPP启动阶段主要分为两个阶段：\n\n1.main()函数执行之前\n\n2.main()函数之后\n\n#### main函数执行之前\n\n在main()函数执行之前，系统主要会做下面几件事情：\n\n1. 加载可执行文件（APP的.o文件的集合）\n2. 加载动态链接库,进行rebase指针调整和bing符号绑定\n3. Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等\n4. load()方法初始化\n\n#### 优化方案\n\n1. 对多个非系统动态库进行合并（最多支持6个）\n2. 减少load()方法中的耗时操作\n\n#### main()函数之后\n\nmain()函数指的是didFinishLaunchingWithOptions方法中执行的操作。\n\n#### 优化方案\n\n1. 将非首屏渲染必须的操作异步执行。\n2. 如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。\n\n#### 检测手段\n\n1. TimerProfile :使用指导:[Instruments Tutorial with Swift: Getting Started](https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started)\n\n2. 打点测试。","source":"_posts/APP冷启动.md","raw":"---\ntitle: APP冷启动\ndate: 2019-8-23 11:21:40\ntag: iOS\ncategories: 学习总结\n---\n\n#### 什么是APP冷启动\n\nAPP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。\n\n#### 前言\n\n网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）\n\n#### APP启动阶段\n\nAPP启动阶段主要分为两个阶段：\n\n1.main()函数执行之前\n\n2.main()函数之后\n\n#### main函数执行之前\n\n在main()函数执行之前，系统主要会做下面几件事情：\n\n1. 加载可执行文件（APP的.o文件的集合）\n2. 加载动态链接库,进行rebase指针调整和bing符号绑定\n3. Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等\n4. load()方法初始化\n\n#### 优化方案\n\n1. 对多个非系统动态库进行合并（最多支持6个）\n2. 减少load()方法中的耗时操作\n\n#### main()函数之后\n\nmain()函数指的是didFinishLaunchingWithOptions方法中执行的操作。\n\n#### 优化方案\n\n1. 将非首屏渲染必须的操作异步执行。\n2. 如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。\n\n#### 检测手段\n\n1. TimerProfile :使用指导:[Instruments Tutorial with Swift: Getting Started](https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started)\n\n2. 打点测试。","slug":"APP冷启动","published":1,"updated":"2020-07-10T03:57:05.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5200006r36umcff7kb","content":"<h4 id=\"什么是APP冷启动\"><a href=\"#什么是APP冷启动\" class=\"headerlink\" title=\"什么是APP冷启动\"></a>什么是APP冷启动</h4><p>APP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）</p>\n<h4 id=\"APP启动阶段\"><a href=\"#APP启动阶段\" class=\"headerlink\" title=\"APP启动阶段\"></a>APP启动阶段</h4><p>APP启动阶段主要分为两个阶段：</p>\n<p>1.main()函数执行之前</p>\n<p>2.main()函数之后</p>\n<h4 id=\"main函数执行之前\"><a href=\"#main函数执行之前\" class=\"headerlink\" title=\"main函数执行之前\"></a>main函数执行之前</h4><p>在main()函数执行之前，系统主要会做下面几件事情：</p>\n<ol>\n<li>加载可执行文件（APP的.o文件的集合）</li>\n<li>加载动态链接库,进行rebase指针调整和bing符号绑定</li>\n<li>Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等</li>\n<li>load()方法初始化</li>\n</ol>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>对多个非系统动态库进行合并（最多支持6个）</li>\n<li>减少load()方法中的耗时操作</li>\n</ol>\n<h4 id=\"main-函数之后\"><a href=\"#main-函数之后\" class=\"headerlink\" title=\"main()函数之后\"></a>main()函数之后</h4><p>main()函数指的是didFinishLaunchingWithOptions方法中执行的操作。</p>\n<h4 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>将非首屏渲染必须的操作异步执行。</li>\n<li>如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。</li>\n</ol>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><ol>\n<li><p>TimerProfile :使用指导:<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started\" target=\"_blank\" rel=\"noopener\">Instruments Tutorial with Swift: Getting Started</a></p>\n</li>\n<li><p>打点测试。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是APP冷启动\"><a href=\"#什么是APP冷启动\" class=\"headerlink\" title=\"什么是APP冷启动\"></a>什么是APP冷启动</h4><p>APP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）</p>\n<h4 id=\"APP启动阶段\"><a href=\"#APP启动阶段\" class=\"headerlink\" title=\"APP启动阶段\"></a>APP启动阶段</h4><p>APP启动阶段主要分为两个阶段：</p>\n<p>1.main()函数执行之前</p>\n<p>2.main()函数之后</p>\n<h4 id=\"main函数执行之前\"><a href=\"#main函数执行之前\" class=\"headerlink\" title=\"main函数执行之前\"></a>main函数执行之前</h4><p>在main()函数执行之前，系统主要会做下面几件事情：</p>\n<ol>\n<li>加载可执行文件（APP的.o文件的集合）</li>\n<li>加载动态链接库,进行rebase指针调整和bing符号绑定</li>\n<li>Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等</li>\n<li>load()方法初始化</li>\n</ol>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>对多个非系统动态库进行合并（最多支持6个）</li>\n<li>减少load()方法中的耗时操作</li>\n</ol>\n<h4 id=\"main-函数之后\"><a href=\"#main-函数之后\" class=\"headerlink\" title=\"main()函数之后\"></a>main()函数之后</h4><p>main()函数指的是didFinishLaunchingWithOptions方法中执行的操作。</p>\n<h4 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>将非首屏渲染必须的操作异步执行。</li>\n<li>如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。</li>\n</ol>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><ol>\n<li><p>TimerProfile :使用指导:<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started\" target=\"_blank\" rel=\"noopener\">Instruments Tutorial with Swift: Getting Started</a></p>\n</li>\n<li><p>打点测试。</p>\n</li>\n</ol>\n"},{"title":"AVFoundation总结","date":"2019-09-09T02:42:49.000Z","_content":"\n#### 框架简介\n\n> AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。\n\n#### 概念介绍\n\n##### AVAsset\n\n> AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。\n\n```swift\n  let asset = AVAsset(url: url)\n```\n\n##### AVPlayer\n\n> An object that provides the interface to control the player’s transport behavior.\n\n```swift\nlet player = AVPlayer(playerItem: <#T##AVPlayerItem?#>)//初始化\n player.seek(to: CMTime.zero) //跳转到播放位置\n player.play()//开始播放\n player.pause()//暂停\n```\n\n##### AVPlayerItem\n\n> 该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。\n\n```swift\nlet playItem = AVPlayerItem(asset: <#T##AVAsset#>)\n```\n\n##### AVPlayerLayer\n\n> 用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.\n\n##### AVAssetTrack\n\n> AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理\n\n```swift\n  //获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)\n  guard let assetTrack = asset.tracks(withMediaType: .video).first else {continue }\n```\n\n多条轨道与显示的关系：\n\n![DC9D6C74-F6D8-4D71-8456-7673C2F6353F](https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg)\n\n##### AVVideoCompositionInstruction\n\n> 可以用作每段处理视屏的指令。\n\n##### AVVideoCompositionLayerInstruction\n\n> 用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。\n\n##### AVAssetExportSession\n\n> 针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。\n\n```swift\n    // MARK: - 导出合成的视频\n    func export(){\n        let session = AVAssetExportSession.init(asset: compostion.copy() as! AVAsset, presetName: AVAssetExportPreset1920x1080)\n        \n        session?.outputURL = JRVideoEditor.createTemplateFileURL()\n        session?.outputFileType = AVFileType.mp4\n        session?.videoComposition = videoComposition\n        \n        session?.exportAsynchronously(completionHandler: {[weak self] in\n            guard let strongSelf = self else {return}\n            let status = session?.status\n            if status == AVAssetExportSession.Status.completed {\n                strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: { (success) in\n                    DispatchQueue.main.async {\n                       strongSelf.showSaveResult(isSuccess: success)\n                    }\n                })\n            }\n        })\n    }\n```\n\n> \n\n##### AVMutableComposition\n\n> AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。\n\n```swift\nlet composition = AVMutableComposition()\n//新建一条视屏轨道\n guard let trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {return}\n//提取视屏资源\nlet videoComposition = AVMutableVideoComposition(propertiesOf: composition)\n```\n\n![AVFoundation编辑结构图](https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg)\n\n#### 实战场景\n\n##### 视屏播放\n\n```swift\n      guard let string = Bundle.main.path(forResource: \"01_nebula\", ofType: \"mp4\")else{\n           return\n        }\n        let url = URL(fileURLWithPath: string)\n\n        let asset = AVAsset(url: url)\n\n        let playItem = AVPlayerItem(asset: asset)\n\n         player = AVPlayer(playerItem: playItem)\n\n        let layer = AVPlayerLayer(player: player)\n        \n        layer.frame = view.bounds\n        \n        view.layer.addSublayer(layer)\n        \n        player.play()\n```\n\n##### 视屏拼接\n\n视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。\n\n```swift\n func buildVideoTrack()  {\n        \n        //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        \n        guard let track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        \n        for asset in videos {\n             //获取视频资源中的视频轨道\n            guard let assetTrack = asset.tracks(withMediaType: .video).first else {\n                continue\n            }\n            \n            do {\n                try track.insertTimeRange(CMTimeRange(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                  cursorTime = CMTimeAdd(cursorTime, asset.duration)\n            } catch  {\n                print(\"insert error\")\n            }\n        }\n        \n    }\n```\n\n##### 添加水印&添加动画\n\n要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。\n\n> 水印代码\n\n```swift\n\n        // 1 - Set up the text layer\n            let subtitle1Text = CATextLayer()\n            subtitle1Text.font = \"Helvetica-Bold\" as CFTypeRef\n            subtitle1Text.fontSize = 36\n            subtitle1Text.frame = CGRect(x: 0, y: 0, width: size.width, height: 100)\n            subtitle1Text.string = \"jackfrow\"\n            subtitle1Text.alignmentMode = .center\n            subtitle1Text.foregroundColor = UIColor.white.cgColor\n        \n            //2 - The usual overlay\n            let overlayLayer = CALayer()\n            overlayLayer.addSublayer(subtitle1Text)\n            overlayLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            overlayLayer.masksToBounds = true\n            \n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            \n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            \n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer)\n            \n            // 3 - apply magic\n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n> 动画代码\n\n```swift\n        //1.overlay\n              let animationImage = UIImage(named: \"star.png\")\n              let overlayLayer1 = CALayer()\n              overlayLayer1.contents = animationImage?.cgImage\n              overlayLayer1.frame = CGRect(x: size.width/2 - 64, y: size.height/2 + 200, width:128, height: 128)\n              overlayLayer1.masksToBounds = true\n              \n              let overlayLayer2 = CALayer()\n              overlayLayer2.contents = animationImage?.cgImage\n              overlayLayer2.frame = CGRect(x: size.width/2 - 64 , y: size.height/2 - 200, width: 128, height: 128)\n              overlayLayer2.masksToBounds = true\n        \n        //2.3 - Twinkle\n            let animationScale = CABasicAnimation(keyPath: \"transform.scale\")\n                  animationScale.duration = 1.0\n                  animationScale.repeatCount = 5\n                  animationScale.autoreverses = true\n                   //  // animate from half size to full size\n            animationScale.fromValue = NSNumber(floatLiteral: 0.5)\n            animationScale.toValue = NSNumber(floatLiteral: 1.0)\n            animationScale.beginTime = AVCoreAnimationBeginTimeAtZero\n              \n            overlayLayer1.add(animationScale, forKey: \"scale\")\n            overlayLayer2.add(animationScale, forKey: \"scale\")\n            \n            //3 - Composition\n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer1)\n            parentLayer.addSublayer(overlayLayer2)\n            \n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n##### 过渡效果\n\n一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。\n\n所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。\n\n```swift\n///创建两条相交的视屏轨道  \nfunc buildCompositionVideoTracks()  {\n       //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        //创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1\n        guard let trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        guard let trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        \n        let videoTracks = [trackA,trackB]\n     //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        //转场动画时间\n        let transitionDuration = CMTime(value: 2, timescale: 1)\n        for (index,value) in assets.enumerated() {\n            //交叉循环A，B轨道\n            let trackIndex = index % 2\n            let currentTrack = videoTracks[trackIndex]\n            //获取视频资源中的视频轨道\n            guard let assetTrack = value.tracks(withMediaType: .video).first else {\n                continue\n            }\n            do {\n                //插入提取的视频轨道到 空白(编辑)轨道的指定位置中\n                try currentTrack.insertTimeRange(CMTimeRange(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                cursorTime = CMTimeAdd(cursorTime, value.duration)\n                //光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画\n                cursorTime = CMTimeSubtract(cursorTime, transitionDuration)\n            } catch {\n                \n            }\n        }\n        \n    }\n    /// 设置转场动画\n    func setupTransition(for instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType) {\n        let identityTransform = CGAffineTransform.identity\n        let timeRange = instruction.timeRange\n        let videoWidth = self.videoComposition.renderSize.width\n        if type == TransitionType.Push{\n            let fromEndTranform = CGAffineTransform(translationX: -videoWidth, y: 0)\n            let toStartTranform = CGAffineTransform(translationX: videoWidth, y: 0)\n            \n            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)\n            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)\n        }else {\n            fromLayer.setOpacityRamp(fromStartOpacity: 1.0, toEndOpacity: 0.0, timeRange: timeRange)\n        }\n        \n        //重新赋值\n        instruction.layerInstructions = [fromLayer,toLayer]\n    }\n\n```\n\n##### Demo\n\n[AVFoundationDemo](https://github.com/jackfrow/AVFoundationDemo)\n\n#### 参考链接\n\n- [AVFoundation视屏开发总结](http://zichao.me/2016/03/28/视频开发总结/)\n- [LearningAVFoundation之视频合成+转场过渡动画](https://juejin.im/post/5bee688ae51d45313b1ac683)\n- [**在 iOS 上捕获视频**](https://objccn.io/issue-23-1/)\n- [How to Play, Record, and Merge Videos in iOS and Swift](https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift)\n- [AVFoundation Tutorial: Adding Overlays and Animations to Videos](https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos)\n- [AVFoundation Programming Guide](https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188)","source":"_posts/AVFoundation总结.md","raw":"---\ntitle: AVFoundation总结\ndate: 2019-9-9 10:42:49\ntag: iOS\ncategories: 学习总结\n---\n\n#### 框架简介\n\n> AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。\n\n#### 概念介绍\n\n##### AVAsset\n\n> AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。\n\n```swift\n  let asset = AVAsset(url: url)\n```\n\n##### AVPlayer\n\n> An object that provides the interface to control the player’s transport behavior.\n\n```swift\nlet player = AVPlayer(playerItem: <#T##AVPlayerItem?#>)//初始化\n player.seek(to: CMTime.zero) //跳转到播放位置\n player.play()//开始播放\n player.pause()//暂停\n```\n\n##### AVPlayerItem\n\n> 该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。\n\n```swift\nlet playItem = AVPlayerItem(asset: <#T##AVAsset#>)\n```\n\n##### AVPlayerLayer\n\n> 用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.\n\n##### AVAssetTrack\n\n> AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理\n\n```swift\n  //获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)\n  guard let assetTrack = asset.tracks(withMediaType: .video).first else {continue }\n```\n\n多条轨道与显示的关系：\n\n![DC9D6C74-F6D8-4D71-8456-7673C2F6353F](https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg)\n\n##### AVVideoCompositionInstruction\n\n> 可以用作每段处理视屏的指令。\n\n##### AVVideoCompositionLayerInstruction\n\n> 用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。\n\n##### AVAssetExportSession\n\n> 针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。\n\n```swift\n    // MARK: - 导出合成的视频\n    func export(){\n        let session = AVAssetExportSession.init(asset: compostion.copy() as! AVAsset, presetName: AVAssetExportPreset1920x1080)\n        \n        session?.outputURL = JRVideoEditor.createTemplateFileURL()\n        session?.outputFileType = AVFileType.mp4\n        session?.videoComposition = videoComposition\n        \n        session?.exportAsynchronously(completionHandler: {[weak self] in\n            guard let strongSelf = self else {return}\n            let status = session?.status\n            if status == AVAssetExportSession.Status.completed {\n                strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: { (success) in\n                    DispatchQueue.main.async {\n                       strongSelf.showSaveResult(isSuccess: success)\n                    }\n                })\n            }\n        })\n    }\n```\n\n> \n\n##### AVMutableComposition\n\n> AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。\n\n```swift\nlet composition = AVMutableComposition()\n//新建一条视屏轨道\n guard let trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {return}\n//提取视屏资源\nlet videoComposition = AVMutableVideoComposition(propertiesOf: composition)\n```\n\n![AVFoundation编辑结构图](https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg)\n\n#### 实战场景\n\n##### 视屏播放\n\n```swift\n      guard let string = Bundle.main.path(forResource: \"01_nebula\", ofType: \"mp4\")else{\n           return\n        }\n        let url = URL(fileURLWithPath: string)\n\n        let asset = AVAsset(url: url)\n\n        let playItem = AVPlayerItem(asset: asset)\n\n         player = AVPlayer(playerItem: playItem)\n\n        let layer = AVPlayerLayer(player: player)\n        \n        layer.frame = view.bounds\n        \n        view.layer.addSublayer(layer)\n        \n        player.play()\n```\n\n##### 视屏拼接\n\n视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。\n\n```swift\n func buildVideoTrack()  {\n        \n        //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        \n        guard let track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        \n        for asset in videos {\n             //获取视频资源中的视频轨道\n            guard let assetTrack = asset.tracks(withMediaType: .video).first else {\n                continue\n            }\n            \n            do {\n                try track.insertTimeRange(CMTimeRange(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                  cursorTime = CMTimeAdd(cursorTime, asset.duration)\n            } catch  {\n                print(\"insert error\")\n            }\n        }\n        \n    }\n```\n\n##### 添加水印&添加动画\n\n要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。\n\n> 水印代码\n\n```swift\n\n        // 1 - Set up the text layer\n            let subtitle1Text = CATextLayer()\n            subtitle1Text.font = \"Helvetica-Bold\" as CFTypeRef\n            subtitle1Text.fontSize = 36\n            subtitle1Text.frame = CGRect(x: 0, y: 0, width: size.width, height: 100)\n            subtitle1Text.string = \"jackfrow\"\n            subtitle1Text.alignmentMode = .center\n            subtitle1Text.foregroundColor = UIColor.white.cgColor\n        \n            //2 - The usual overlay\n            let overlayLayer = CALayer()\n            overlayLayer.addSublayer(subtitle1Text)\n            overlayLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            overlayLayer.masksToBounds = true\n            \n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            \n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            \n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer)\n            \n            // 3 - apply magic\n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n> 动画代码\n\n```swift\n        //1.overlay\n              let animationImage = UIImage(named: \"star.png\")\n              let overlayLayer1 = CALayer()\n              overlayLayer1.contents = animationImage?.cgImage\n              overlayLayer1.frame = CGRect(x: size.width/2 - 64, y: size.height/2 + 200, width:128, height: 128)\n              overlayLayer1.masksToBounds = true\n              \n              let overlayLayer2 = CALayer()\n              overlayLayer2.contents = animationImage?.cgImage\n              overlayLayer2.frame = CGRect(x: size.width/2 - 64 , y: size.height/2 - 200, width: 128, height: 128)\n              overlayLayer2.masksToBounds = true\n        \n        //2.3 - Twinkle\n            let animationScale = CABasicAnimation(keyPath: \"transform.scale\")\n                  animationScale.duration = 1.0\n                  animationScale.repeatCount = 5\n                  animationScale.autoreverses = true\n                   //  // animate from half size to full size\n            animationScale.fromValue = NSNumber(floatLiteral: 0.5)\n            animationScale.toValue = NSNumber(floatLiteral: 1.0)\n            animationScale.beginTime = AVCoreAnimationBeginTimeAtZero\n              \n            overlayLayer1.add(animationScale, forKey: \"scale\")\n            overlayLayer2.add(animationScale, forKey: \"scale\")\n            \n            //3 - Composition\n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer1)\n            parentLayer.addSublayer(overlayLayer2)\n            \n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n##### 过渡效果\n\n一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。\n\n所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。\n\n```swift\n///创建两条相交的视屏轨道  \nfunc buildCompositionVideoTracks()  {\n       //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        //创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1\n        guard let trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        guard let trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        \n        let videoTracks = [trackA,trackB]\n     //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        //转场动画时间\n        let transitionDuration = CMTime(value: 2, timescale: 1)\n        for (index,value) in assets.enumerated() {\n            //交叉循环A，B轨道\n            let trackIndex = index % 2\n            let currentTrack = videoTracks[trackIndex]\n            //获取视频资源中的视频轨道\n            guard let assetTrack = value.tracks(withMediaType: .video).first else {\n                continue\n            }\n            do {\n                //插入提取的视频轨道到 空白(编辑)轨道的指定位置中\n                try currentTrack.insertTimeRange(CMTimeRange(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                cursorTime = CMTimeAdd(cursorTime, value.duration)\n                //光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画\n                cursorTime = CMTimeSubtract(cursorTime, transitionDuration)\n            } catch {\n                \n            }\n        }\n        \n    }\n    /// 设置转场动画\n    func setupTransition(for instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType) {\n        let identityTransform = CGAffineTransform.identity\n        let timeRange = instruction.timeRange\n        let videoWidth = self.videoComposition.renderSize.width\n        if type == TransitionType.Push{\n            let fromEndTranform = CGAffineTransform(translationX: -videoWidth, y: 0)\n            let toStartTranform = CGAffineTransform(translationX: videoWidth, y: 0)\n            \n            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)\n            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)\n        }else {\n            fromLayer.setOpacityRamp(fromStartOpacity: 1.0, toEndOpacity: 0.0, timeRange: timeRange)\n        }\n        \n        //重新赋值\n        instruction.layerInstructions = [fromLayer,toLayer]\n    }\n\n```\n\n##### Demo\n\n[AVFoundationDemo](https://github.com/jackfrow/AVFoundationDemo)\n\n#### 参考链接\n\n- [AVFoundation视屏开发总结](http://zichao.me/2016/03/28/视频开发总结/)\n- [LearningAVFoundation之视频合成+转场过渡动画](https://juejin.im/post/5bee688ae51d45313b1ac683)\n- [**在 iOS 上捕获视频**](https://objccn.io/issue-23-1/)\n- [How to Play, Record, and Merge Videos in iOS and Swift](https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift)\n- [AVFoundation Tutorial: Adding Overlays and Animations to Videos](https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos)\n- [AVFoundation Programming Guide](https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188)","slug":"AVFoundation总结","published":1,"updated":"2020-07-10T03:57:05.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5900026r36mzq396qk","content":"<h4 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h4><blockquote>\n<p>AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。</p>\n</blockquote>\n<h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><h5 id=\"AVAsset\"><a href=\"#AVAsset\" class=\"headerlink\" title=\"AVAsset\"></a>AVAsset</h5><blockquote>\n<p>AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayer\"><a href=\"#AVPlayer\" class=\"headerlink\" title=\"AVPlayer\"></a>AVPlayer</h5><blockquote>\n<p>An object that provides the interface to control the player’s transport behavior.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"type\">AVPlayer</span>(playerItem: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVPlayerItem?</span>#&gt;)<span class=\"comment\">//初始化</span></span><br><span class=\"line\"> player.seek(to: <span class=\"type\">CMTime</span>.zero) <span class=\"comment\">//跳转到播放位置</span></span><br><span class=\"line\"> player.play()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\"> player.pause()<span class=\"comment\">//暂停</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerItem\"><a href=\"#AVPlayerItem\" class=\"headerlink\" title=\"AVPlayerItem\"></a>AVPlayerItem</h5><blockquote>\n<p>该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVAsset</span>#&gt;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerLayer\"><a href=\"#AVPlayerLayer\" class=\"headerlink\" title=\"AVPlayerLayer\"></a>AVPlayerLayer</h5><blockquote>\n<p>用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.</p>\n</blockquote>\n<h5 id=\"AVAssetTrack\"><a href=\"#AVAssetTrack\" class=\"headerlink\" title=\"AVAssetTrack\"></a>AVAssetTrack</h5><blockquote>\n<p>AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)</span></span><br><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">continue</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多条轨道与显示的关系：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg\" alt=\"DC9D6C74-F6D8-4D71-8456-7673C2F6353F\"></p>\n<h5 id=\"AVVideoCompositionInstruction\"><a href=\"#AVVideoCompositionInstruction\" class=\"headerlink\" title=\"AVVideoCompositionInstruction\"></a>AVVideoCompositionInstruction</h5><blockquote>\n<p>可以用作每段处理视屏的指令。</p>\n</blockquote>\n<h5 id=\"AVVideoCompositionLayerInstruction\"><a href=\"#AVVideoCompositionLayerInstruction\" class=\"headerlink\" title=\"AVVideoCompositionLayerInstruction\"></a>AVVideoCompositionLayerInstruction</h5><blockquote>\n<p>用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。</p>\n</blockquote>\n<h5 id=\"AVAssetExportSession\"><a href=\"#AVAssetExportSession\" class=\"headerlink\" title=\"AVAssetExportSession\"></a>AVAssetExportSession</h5><blockquote>\n<p>针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MARK: - 导出合成的视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = <span class=\"type\">AVAssetExportSession</span>.<span class=\"keyword\">init</span>(asset: compostion.copy() <span class=\"keyword\">as</span>! <span class=\"type\">AVAsset</span>, presetName: <span class=\"type\">AVAssetExportPreset1920x1080</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.outputURL = <span class=\"type\">JRVideoEditor</span>.createTemplateFileURL()</span><br><span class=\"line\">    session?.outputFileType = <span class=\"type\">AVFileType</span>.mp4</span><br><span class=\"line\">    session?.videoComposition = videoComposition</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.exportAsynchronously(completionHandler: &#123;[<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf = <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> status = session?.status</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status == <span class=\"type\">AVAssetExportSession</span>.<span class=\"type\">Status</span>.completed &#123;</span><br><span class=\"line\">            strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: &#123; (success) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">                   strongSelf.showSaveResult(isSuccess: success)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<h5 id=\"AVMutableComposition\"><a href=\"#AVMutableComposition\" class=\"headerlink\" title=\"AVMutableComposition\"></a>AVMutableComposition</h5><blockquote>\n<p>AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> composition = <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\"><span class=\"comment\">//新建一条视屏轨道</span></span><br><span class=\"line\"> <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//提取视屏资源</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> videoComposition = <span class=\"type\">AVMutableVideoComposition</span>(propertiesOf: composition)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg\" alt=\"AVFoundation编辑结构图\"></p>\n<h4 id=\"实战场景\"><a href=\"#实战场景\" class=\"headerlink\" title=\"实战场景\"></a>实战场景</h4><h5 id=\"视屏播放\"><a href=\"#视屏播放\" class=\"headerlink\" title=\"视屏播放\"></a>视屏播放</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> string = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"01_nebula\"</span>, ofType: <span class=\"string\">\"mp4\"</span>)<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = <span class=\"type\">URL</span>(fileURLWithPath: string)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: asset)</span><br><span class=\"line\"></span><br><span class=\"line\">   player = <span class=\"type\">AVPlayer</span>(playerItem: playItem)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> layer = <span class=\"type\">AVPlayerLayer</span>(player: player)</span><br><span class=\"line\">  </span><br><span class=\"line\">  layer.frame = view.bounds</span><br><span class=\"line\">  </span><br><span class=\"line\">  view.layer.addSublayer(layer)</span><br><span class=\"line\">  </span><br><span class=\"line\">  player.play()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"视屏拼接\"><a href=\"#视屏拼接\" class=\"headerlink\" title=\"视屏拼接\"></a>视屏拼接</h5><p>视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildVideoTrack</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">for</span> asset <span class=\"keyword\">in</span> videos &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">           <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">continue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> track.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">               <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                 cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, asset.duration)</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"insert error\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加水印-amp-添加动画\"><a href=\"#添加水印-amp-添加动画\" class=\"headerlink\" title=\"添加水印&amp;添加动画\"></a>添加水印&amp;添加动画</h5><p>要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。</p>\n<blockquote>\n<p>水印代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - Set up the text layer</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subtitle1Text = <span class=\"type\">CATextLayer</span>()</span><br><span class=\"line\">    subtitle1Text.font = <span class=\"string\">\"Helvetica-Bold\"</span> <span class=\"keyword\">as</span> <span class=\"type\">CFTypeRef</span></span><br><span class=\"line\">    subtitle1Text.fontSize = <span class=\"number\">36</span></span><br><span class=\"line\">    subtitle1Text.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">    subtitle1Text.string = <span class=\"string\">\"jackfrow\"</span></span><br><span class=\"line\">    subtitle1Text.alignmentMode = .center</span><br><span class=\"line\">    subtitle1Text.foregroundColor = <span class=\"type\">UIColor</span>.white.cgColor</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2 - The usual overlay</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> overlayLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    overlayLayer.addSublayer(subtitle1Text)</span><br><span class=\"line\">    overlayLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    overlayLayer.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3 - apply magic</span></span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>动画代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.overlay</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> animationImage = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"star.png\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer1 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer1.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer1.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span>, y: size.height/<span class=\"number\">2</span> + <span class=\"number\">200</span>, width:<span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer1.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer2 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer2.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer2.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span> , y: size.height/<span class=\"number\">2</span> - <span class=\"number\">200</span>, width: <span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer2.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.3 - Twinkle</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> animationScale = <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">\"transform.scale\"</span>)</span><br><span class=\"line\">          animationScale.duration = <span class=\"number\">1.0</span></span><br><span class=\"line\">          animationScale.repeatCount = <span class=\"number\">5</span></span><br><span class=\"line\">          animationScale.autoreverses = <span class=\"literal\">true</span></span><br><span class=\"line\">           <span class=\"comment\">//  // animate from half size to full size</span></span><br><span class=\"line\">    animationScale.fromValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    animationScale.toValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    animationScale.beginTime = <span class=\"type\">AVCoreAnimationBeginTimeAtZero</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    overlayLayer1.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    overlayLayer2.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3 - Composition</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer1)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h5><p>一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。</p>\n<p>所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///创建两条相交的视屏轨道  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildCompositionVideoTracks</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">        <span class=\"comment\">//创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoTracks = [trackA,trackB]</span><br><span class=\"line\">     <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">        <span class=\"comment\">//转场动画时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> transitionDuration = <span class=\"type\">CMTime</span>(value: <span class=\"number\">2</span>, timescale: <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index,value) <span class=\"keyword\">in</span> assets.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//交叉循环A，B轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> trackIndex = index % <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentTrack = videoTracks[trackIndex]</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = value.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入提取的视频轨道到 空白(编辑)轨道的指定位置中</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> currentTrack.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">                <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, value.duration)</span><br><span class=\"line\">                <span class=\"comment\">//光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeSubtract</span>(cursorTime, transitionDuration)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 设置转场动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupTransition</span><span class=\"params\">(<span class=\"keyword\">for</span> instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identityTransform = <span class=\"type\">CGAffineTransform</span>.identity</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeRange = instruction.timeRange</span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoWidth = <span class=\"keyword\">self</span>.videoComposition.renderSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type == <span class=\"type\">TransitionType</span>.<span class=\"type\">Push</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fromEndTranform = <span class=\"type\">CGAffineTransform</span>(translationX: -videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> toStartTranform = <span class=\"type\">CGAffineTransform</span>(translationX: videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)</span><br><span class=\"line\">            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fromLayer.setOpacityRamp(fromStartOpacity: <span class=\"number\">1.0</span>, toEndOpacity: <span class=\"number\">0.0</span>, timeRange: timeRange)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">        instruction.layerInstructions = [fromLayer,toLayer]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h5><p><a href=\"https://github.com/jackfrow/AVFoundationDemo\" target=\"_blank\" rel=\"noopener\">AVFoundationDemo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://zichao.me/2016/03/28/视频开发总结/\" target=\"_blank\" rel=\"noopener\">AVFoundation视屏开发总结</a></li>\n<li><a href=\"https://juejin.im/post/5bee688ae51d45313b1ac683\" target=\"_blank\" rel=\"noopener\">LearningAVFoundation之视频合成+转场过渡动画</a></li>\n<li><a href=\"https://objccn.io/issue-23-1/\" target=\"_blank\" rel=\"noopener\"><strong>在 iOS 上捕获视频</strong></a></li>\n<li><a href=\"https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift\" target=\"_blank\" rel=\"noopener\">How to Play, Record, and Merge Videos in iOS and Swift</a></li>\n<li><a href=\"https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos\" target=\"_blank\" rel=\"noopener\">AVFoundation Tutorial: Adding Overlays and Animations to Videos</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188\" target=\"_blank\" rel=\"noopener\">AVFoundation Programming Guide</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h4><blockquote>\n<p>AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。</p>\n</blockquote>\n<h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><h5 id=\"AVAsset\"><a href=\"#AVAsset\" class=\"headerlink\" title=\"AVAsset\"></a>AVAsset</h5><blockquote>\n<p>AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayer\"><a href=\"#AVPlayer\" class=\"headerlink\" title=\"AVPlayer\"></a>AVPlayer</h5><blockquote>\n<p>An object that provides the interface to control the player’s transport behavior.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"type\">AVPlayer</span>(playerItem: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVPlayerItem?</span>#&gt;)<span class=\"comment\">//初始化</span></span><br><span class=\"line\"> player.seek(to: <span class=\"type\">CMTime</span>.zero) <span class=\"comment\">//跳转到播放位置</span></span><br><span class=\"line\"> player.play()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\"> player.pause()<span class=\"comment\">//暂停</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerItem\"><a href=\"#AVPlayerItem\" class=\"headerlink\" title=\"AVPlayerItem\"></a>AVPlayerItem</h5><blockquote>\n<p>该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVAsset</span>#&gt;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerLayer\"><a href=\"#AVPlayerLayer\" class=\"headerlink\" title=\"AVPlayerLayer\"></a>AVPlayerLayer</h5><blockquote>\n<p>用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.</p>\n</blockquote>\n<h5 id=\"AVAssetTrack\"><a href=\"#AVAssetTrack\" class=\"headerlink\" title=\"AVAssetTrack\"></a>AVAssetTrack</h5><blockquote>\n<p>AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)</span></span><br><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">continue</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多条轨道与显示的关系：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg\" alt=\"DC9D6C74-F6D8-4D71-8456-7673C2F6353F\"></p>\n<h5 id=\"AVVideoCompositionInstruction\"><a href=\"#AVVideoCompositionInstruction\" class=\"headerlink\" title=\"AVVideoCompositionInstruction\"></a>AVVideoCompositionInstruction</h5><blockquote>\n<p>可以用作每段处理视屏的指令。</p>\n</blockquote>\n<h5 id=\"AVVideoCompositionLayerInstruction\"><a href=\"#AVVideoCompositionLayerInstruction\" class=\"headerlink\" title=\"AVVideoCompositionLayerInstruction\"></a>AVVideoCompositionLayerInstruction</h5><blockquote>\n<p>用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。</p>\n</blockquote>\n<h5 id=\"AVAssetExportSession\"><a href=\"#AVAssetExportSession\" class=\"headerlink\" title=\"AVAssetExportSession\"></a>AVAssetExportSession</h5><blockquote>\n<p>针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MARK: - 导出合成的视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = <span class=\"type\">AVAssetExportSession</span>.<span class=\"keyword\">init</span>(asset: compostion.copy() <span class=\"keyword\">as</span>! <span class=\"type\">AVAsset</span>, presetName: <span class=\"type\">AVAssetExportPreset1920x1080</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.outputURL = <span class=\"type\">JRVideoEditor</span>.createTemplateFileURL()</span><br><span class=\"line\">    session?.outputFileType = <span class=\"type\">AVFileType</span>.mp4</span><br><span class=\"line\">    session?.videoComposition = videoComposition</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.exportAsynchronously(completionHandler: &#123;[<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf = <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> status = session?.status</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status == <span class=\"type\">AVAssetExportSession</span>.<span class=\"type\">Status</span>.completed &#123;</span><br><span class=\"line\">            strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: &#123; (success) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">                   strongSelf.showSaveResult(isSuccess: success)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<h5 id=\"AVMutableComposition\"><a href=\"#AVMutableComposition\" class=\"headerlink\" title=\"AVMutableComposition\"></a>AVMutableComposition</h5><blockquote>\n<p>AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> composition = <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\"><span class=\"comment\">//新建一条视屏轨道</span></span><br><span class=\"line\"> <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//提取视屏资源</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> videoComposition = <span class=\"type\">AVMutableVideoComposition</span>(propertiesOf: composition)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg\" alt=\"AVFoundation编辑结构图\"></p>\n<h4 id=\"实战场景\"><a href=\"#实战场景\" class=\"headerlink\" title=\"实战场景\"></a>实战场景</h4><h5 id=\"视屏播放\"><a href=\"#视屏播放\" class=\"headerlink\" title=\"视屏播放\"></a>视屏播放</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> string = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"01_nebula\"</span>, ofType: <span class=\"string\">\"mp4\"</span>)<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = <span class=\"type\">URL</span>(fileURLWithPath: string)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: asset)</span><br><span class=\"line\"></span><br><span class=\"line\">   player = <span class=\"type\">AVPlayer</span>(playerItem: playItem)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> layer = <span class=\"type\">AVPlayerLayer</span>(player: player)</span><br><span class=\"line\">  </span><br><span class=\"line\">  layer.frame = view.bounds</span><br><span class=\"line\">  </span><br><span class=\"line\">  view.layer.addSublayer(layer)</span><br><span class=\"line\">  </span><br><span class=\"line\">  player.play()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"视屏拼接\"><a href=\"#视屏拼接\" class=\"headerlink\" title=\"视屏拼接\"></a>视屏拼接</h5><p>视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildVideoTrack</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">for</span> asset <span class=\"keyword\">in</span> videos &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">           <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">continue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> track.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">               <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                 cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, asset.duration)</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"insert error\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加水印-amp-添加动画\"><a href=\"#添加水印-amp-添加动画\" class=\"headerlink\" title=\"添加水印&amp;添加动画\"></a>添加水印&amp;添加动画</h5><p>要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。</p>\n<blockquote>\n<p>水印代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - Set up the text layer</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subtitle1Text = <span class=\"type\">CATextLayer</span>()</span><br><span class=\"line\">    subtitle1Text.font = <span class=\"string\">\"Helvetica-Bold\"</span> <span class=\"keyword\">as</span> <span class=\"type\">CFTypeRef</span></span><br><span class=\"line\">    subtitle1Text.fontSize = <span class=\"number\">36</span></span><br><span class=\"line\">    subtitle1Text.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">    subtitle1Text.string = <span class=\"string\">\"jackfrow\"</span></span><br><span class=\"line\">    subtitle1Text.alignmentMode = .center</span><br><span class=\"line\">    subtitle1Text.foregroundColor = <span class=\"type\">UIColor</span>.white.cgColor</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2 - The usual overlay</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> overlayLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    overlayLayer.addSublayer(subtitle1Text)</span><br><span class=\"line\">    overlayLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    overlayLayer.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3 - apply magic</span></span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>动画代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.overlay</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> animationImage = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"star.png\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer1 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer1.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer1.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span>, y: size.height/<span class=\"number\">2</span> + <span class=\"number\">200</span>, width:<span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer1.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer2 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer2.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer2.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span> , y: size.height/<span class=\"number\">2</span> - <span class=\"number\">200</span>, width: <span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer2.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.3 - Twinkle</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> animationScale = <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">\"transform.scale\"</span>)</span><br><span class=\"line\">          animationScale.duration = <span class=\"number\">1.0</span></span><br><span class=\"line\">          animationScale.repeatCount = <span class=\"number\">5</span></span><br><span class=\"line\">          animationScale.autoreverses = <span class=\"literal\">true</span></span><br><span class=\"line\">           <span class=\"comment\">//  // animate from half size to full size</span></span><br><span class=\"line\">    animationScale.fromValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    animationScale.toValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    animationScale.beginTime = <span class=\"type\">AVCoreAnimationBeginTimeAtZero</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    overlayLayer1.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    overlayLayer2.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3 - Composition</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer1)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h5><p>一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。</p>\n<p>所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///创建两条相交的视屏轨道  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildCompositionVideoTracks</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">        <span class=\"comment\">//创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoTracks = [trackA,trackB]</span><br><span class=\"line\">     <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">        <span class=\"comment\">//转场动画时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> transitionDuration = <span class=\"type\">CMTime</span>(value: <span class=\"number\">2</span>, timescale: <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index,value) <span class=\"keyword\">in</span> assets.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//交叉循环A，B轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> trackIndex = index % <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentTrack = videoTracks[trackIndex]</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = value.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入提取的视频轨道到 空白(编辑)轨道的指定位置中</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> currentTrack.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">                <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, value.duration)</span><br><span class=\"line\">                <span class=\"comment\">//光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeSubtract</span>(cursorTime, transitionDuration)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 设置转场动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupTransition</span><span class=\"params\">(<span class=\"keyword\">for</span> instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identityTransform = <span class=\"type\">CGAffineTransform</span>.identity</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeRange = instruction.timeRange</span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoWidth = <span class=\"keyword\">self</span>.videoComposition.renderSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type == <span class=\"type\">TransitionType</span>.<span class=\"type\">Push</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fromEndTranform = <span class=\"type\">CGAffineTransform</span>(translationX: -videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> toStartTranform = <span class=\"type\">CGAffineTransform</span>(translationX: videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)</span><br><span class=\"line\">            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fromLayer.setOpacityRamp(fromStartOpacity: <span class=\"number\">1.0</span>, toEndOpacity: <span class=\"number\">0.0</span>, timeRange: timeRange)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">        instruction.layerInstructions = [fromLayer,toLayer]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h5><p><a href=\"https://github.com/jackfrow/AVFoundationDemo\" target=\"_blank\" rel=\"noopener\">AVFoundationDemo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://zichao.me/2016/03/28/视频开发总结/\" target=\"_blank\" rel=\"noopener\">AVFoundation视屏开发总结</a></li>\n<li><a href=\"https://juejin.im/post/5bee688ae51d45313b1ac683\" target=\"_blank\" rel=\"noopener\">LearningAVFoundation之视频合成+转场过渡动画</a></li>\n<li><a href=\"https://objccn.io/issue-23-1/\" target=\"_blank\" rel=\"noopener\"><strong>在 iOS 上捕获视频</strong></a></li>\n<li><a href=\"https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift\" target=\"_blank\" rel=\"noopener\">How to Play, Record, and Merge Videos in iOS and Swift</a></li>\n<li><a href=\"https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos\" target=\"_blank\" rel=\"noopener\">AVFoundation Tutorial: Adding Overlays and Animations to Videos</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188\" target=\"_blank\" rel=\"noopener\">AVFoundation Programming Guide</a></li>\n</ul>\n"},{"title":"MBProgressHUD源码解析","date":"2019-05-23T14:30:00.000Z","typora-root-url":"../assets","_content":"\n​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。\n\n### 功能\n\n> MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。\n\n### 框架结构\n\n> ##### MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\n\n### API结构\n\n#### MBProgressHUD\n\n##### 方法\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated;\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated;\n+ (nullable MBProgressHUD *)HUDForView:(UIView *)view;\n- (instancetype)initWithView:(UIView *)view;\n- (void)showAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated afterDelay:(NSTimeInterval)delay;\n```\n\n##### **属性**\n\n```objc\n@property (weak, nonatomic) id<MBProgressHUDDelegate> delegate;\n@property (copy, nullable) MBProgressHUDCompletionBlock completionBlock;\n@property (assign, nonatomic) NSTimeInterval graceTime;\n@property (assign, nonatomic) NSTimeInterval minShowTime;\n@property (assign, nonatomic) BOOL removeFromSuperViewOnHide;\n@property (assign, nonatomic) MBProgressHUDMode mode;\n@property (strong, nonatomic, nullable) UIColor *contentColor UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) MBProgressHUDAnimation animationType UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGPoint offset UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGFloat margin UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGSize minSize UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter = isSquare) BOOL square UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter=areDefaultMotionEffectsEnabled) BOOL defaultMotionEffectsEnabled UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) float progress;\n@property (strong, nonatomic, nullable) NSProgress *progressObject;\n@property (strong, nonatomic, readonly) MBBackgroundView *bezelView;\n@property (strong, nonatomic, readonly) MBBackgroundView *backgroundView;\n@property (strong, nonatomic, nullable) UIView *customView;\n@property (strong, nonatomic, readonly) UILabel *label;\n@property (strong, nonatomic, readonly) UILabel *detailsLabel;\n@property (strong, nonatomic, readonly) UIButton *button;\n```\n\n#### MBRoundProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *progressTintColor;\n@property (nonatomic, strong) UIColor *backgroundTintColor;\n@property (nonatomic, assign, getter = isAnnular) BOOL annular;\n```\n\n#### MBBarProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *lineColor;\n@property (nonatomic, strong) UIColor *progressRemainingColor;\n@property (nonatomic, strong) UIColor *progressColor;\n```\n\n#### MBBackgroundView\n\n```objc\n@property (nonatomic) MBProgressHUDBackgroundStyle style;\n@property (nonatomic) UIBlurEffectStyle blurEffectStyle;\n@property (nonatomic, strong) UIColor *color;\n```\n\n### 调用流程\n\n外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到`animateIn:withType: completion:`，下面是方法调用流程图。\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg)\n\n### 内部实现\n\n#### show\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [[self alloc] initWithView:view];\n    hud.removeFromSuperViewOnHide = YES;\n    [view addSubview:hud];\n    [hud showAnimated:animated];\n    return hud;\n}\n\n- (void)showAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.minShowTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = NO;\n    // If the grace time is set, postpone the HUD display\n    if (self.graceTime > 0.0) {\n        NSTimer *timer = [NSTimer timerWithTimeInterval:self.graceTime target:self selector:@selector(handleGraceTimer:) userInfo:nil repeats:NO];\n        [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n        self.graceTimer = timer;\n    } \n    // ... otherwise show the HUD immediately\n    else {\n        [self showUsingAnimation:self.useAnimation];\n    }\n}\n\n- (void)showUsingAnimation:(BOOL)animated {\n    // Cancel any previous animations\n    [self.bezelView.layer removeAllAnimations];\n    [self.backgroundView.layer removeAllAnimations];\n\n    // Cancel any scheduled hideAnimated:afterDelay: calls\n    [self.hideDelayTimer invalidate];\n\n    self.showStarted = [NSDate date];\n    self.alpha = 1.f;\n\n    // Needed in case we hide and re-show with the same NSProgress object attached.\n    [self setNSProgressDisplayLinkEnabled:YES];\n\n    if (animated) {\n        [self animateIn:YES withType:self.animationType completion:NULL];\n    } else {\n        self.bezelView.alpha = 1.f;\n        self.backgroundView.alpha = 1.f;\n    }\n}\n```\n\n#### hide\n\n```objc\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [self HUDForView:view];\n    if (hud != nil) {\n        hud.removeFromSuperViewOnHide = YES;\n        [hud hideAnimated:animated];\n        return YES;\n    }\n    return NO;\n}\n\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n\n (void)hideAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.graceTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = YES;\n    // If the minShow time is set, calculate how long the HUD was shown,\n    // and postpone the hiding operation if necessary\n    if (self.minShowTime > 0.0 && self.showStarted) {\n        NSTimeInterval interv = [[NSDate date] timeIntervalSinceDate:self.showStarted];\n        if (interv < self.minShowTime) {\n            NSTimer *timer = [NSTimer timerWithTimeInterval:(self.minShowTime - interv) target:self selector:@selector(handleMinShowTimer:) userInfo:nil repeats:NO];\n            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n            self.minShowTimer = timer;\n            return;\n        } \n    }\n    // ... otherwise hide the HUD immediately\n    [self hideUsingAnimation:self.useAnimation];\n}\n\n- (void)hideUsingAnimation:(BOOL)animated {\n    // Cancel any scheduled hideAnimated:afterDelay: calls.\n    // This needs to happen here instead of in done,\n    // to avoid races if another hideAnimated:afterDelay:\n    // call comes in while the HUD is animating out.\n    [self.hideDelayTimer invalidate];\n\n    if (animated && self.showStarted) {\n        self.showStarted = nil;\n        [self animateIn:NO withType:self.animationType completion:^(BOOL finished) {\n            [self done];\n        }];\n    } else {\n        self.showStarted = nil;\n        self.bezelView.alpha = 0.f;\n        self.backgroundView.alpha = 1.f;\n        [self done];\n    }\n}\n```\n\n\n\n这里注意一下在拿当前hud时的方法.\n\n```objc\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n```\n\n\n\n因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。\n\n\n\n而无论是`show`方法，还是`hide`方法，在设定animated属性为YES的前提下，最终都会走到`animateIn: withType: completion:`方法：\n\n```objc\n- (void)animateIn:(BOOL)animatingIn withType:(MBProgressHUDAnimation)type completion:(void(^)(BOOL finished))completion {\n    // Automatically determine the correct zoom animation type\n    if (type == MBProgressHUDAnimationZoom) {\n        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;\n    }\n\n    CGAffineTransform small = CGAffineTransformMakeScale(0.5f, 0.5f);\n    CGAffineTransform large = CGAffineTransformMakeScale(1.5f, 1.5f);\n\n    // Set starting state\n    UIView *bezelView = self.bezelView;\n    if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomIn) {\n        bezelView.transform = small;\n    } else if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomOut) {\n        bezelView.transform = large;\n    }\n\n    // Perform animations\n    dispatch_block_t animations = ^{\n        if (animatingIn) {\n            bezelView.transform = CGAffineTransformIdentity;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomIn) {\n            bezelView.transform = large;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomOut) {\n            bezelView.transform = small;\n        }\n        CGFloat alpha = animatingIn ? 1.f : 0.f;\n        bezelView.alpha = alpha;\n        self.backgroundView.alpha = alpha;\n    };\n    [UIView animateWithDuration:0.3 delay:0. usingSpringWithDamping:1.f initialSpringVelocity:0.f options:UIViewAnimationOptionBeginFromCurrentState animations:animations completion:completion];\n}\n\n```\n\n\n\n### 收获\n\n1. 暴露出来的API最终都会走到同一个私有方法里。\n2. 使用CADisplayLink来刷新更新频率可能很高的view。\n3. 使用循环时，注意条件可以减少循环次数，进而对程序进行优化。\n4. 在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。","source":"_posts/MBProgressHUD源码解析.md","raw":"---\ntitle: MBProgressHUD源码解析\ndate: 2019-5-23 22:30:00\ntag: iOS\ncategories: 源码阅读\n\n\ntypora-root-url: ../assets\n---\n\n​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。\n\n### 功能\n\n> MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。\n\n### 框架结构\n\n> ##### MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\n\n### API结构\n\n#### MBProgressHUD\n\n##### 方法\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated;\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated;\n+ (nullable MBProgressHUD *)HUDForView:(UIView *)view;\n- (instancetype)initWithView:(UIView *)view;\n- (void)showAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated afterDelay:(NSTimeInterval)delay;\n```\n\n##### **属性**\n\n```objc\n@property (weak, nonatomic) id<MBProgressHUDDelegate> delegate;\n@property (copy, nullable) MBProgressHUDCompletionBlock completionBlock;\n@property (assign, nonatomic) NSTimeInterval graceTime;\n@property (assign, nonatomic) NSTimeInterval minShowTime;\n@property (assign, nonatomic) BOOL removeFromSuperViewOnHide;\n@property (assign, nonatomic) MBProgressHUDMode mode;\n@property (strong, nonatomic, nullable) UIColor *contentColor UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) MBProgressHUDAnimation animationType UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGPoint offset UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGFloat margin UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGSize minSize UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter = isSquare) BOOL square UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter=areDefaultMotionEffectsEnabled) BOOL defaultMotionEffectsEnabled UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) float progress;\n@property (strong, nonatomic, nullable) NSProgress *progressObject;\n@property (strong, nonatomic, readonly) MBBackgroundView *bezelView;\n@property (strong, nonatomic, readonly) MBBackgroundView *backgroundView;\n@property (strong, nonatomic, nullable) UIView *customView;\n@property (strong, nonatomic, readonly) UILabel *label;\n@property (strong, nonatomic, readonly) UILabel *detailsLabel;\n@property (strong, nonatomic, readonly) UIButton *button;\n```\n\n#### MBRoundProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *progressTintColor;\n@property (nonatomic, strong) UIColor *backgroundTintColor;\n@property (nonatomic, assign, getter = isAnnular) BOOL annular;\n```\n\n#### MBBarProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *lineColor;\n@property (nonatomic, strong) UIColor *progressRemainingColor;\n@property (nonatomic, strong) UIColor *progressColor;\n```\n\n#### MBBackgroundView\n\n```objc\n@property (nonatomic) MBProgressHUDBackgroundStyle style;\n@property (nonatomic) UIBlurEffectStyle blurEffectStyle;\n@property (nonatomic, strong) UIColor *color;\n```\n\n### 调用流程\n\n外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到`animateIn:withType: completion:`，下面是方法调用流程图。\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg)\n\n### 内部实现\n\n#### show\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [[self alloc] initWithView:view];\n    hud.removeFromSuperViewOnHide = YES;\n    [view addSubview:hud];\n    [hud showAnimated:animated];\n    return hud;\n}\n\n- (void)showAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.minShowTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = NO;\n    // If the grace time is set, postpone the HUD display\n    if (self.graceTime > 0.0) {\n        NSTimer *timer = [NSTimer timerWithTimeInterval:self.graceTime target:self selector:@selector(handleGraceTimer:) userInfo:nil repeats:NO];\n        [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n        self.graceTimer = timer;\n    } \n    // ... otherwise show the HUD immediately\n    else {\n        [self showUsingAnimation:self.useAnimation];\n    }\n}\n\n- (void)showUsingAnimation:(BOOL)animated {\n    // Cancel any previous animations\n    [self.bezelView.layer removeAllAnimations];\n    [self.backgroundView.layer removeAllAnimations];\n\n    // Cancel any scheduled hideAnimated:afterDelay: calls\n    [self.hideDelayTimer invalidate];\n\n    self.showStarted = [NSDate date];\n    self.alpha = 1.f;\n\n    // Needed in case we hide and re-show with the same NSProgress object attached.\n    [self setNSProgressDisplayLinkEnabled:YES];\n\n    if (animated) {\n        [self animateIn:YES withType:self.animationType completion:NULL];\n    } else {\n        self.bezelView.alpha = 1.f;\n        self.backgroundView.alpha = 1.f;\n    }\n}\n```\n\n#### hide\n\n```objc\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [self HUDForView:view];\n    if (hud != nil) {\n        hud.removeFromSuperViewOnHide = YES;\n        [hud hideAnimated:animated];\n        return YES;\n    }\n    return NO;\n}\n\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n\n (void)hideAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.graceTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = YES;\n    // If the minShow time is set, calculate how long the HUD was shown,\n    // and postpone the hiding operation if necessary\n    if (self.minShowTime > 0.0 && self.showStarted) {\n        NSTimeInterval interv = [[NSDate date] timeIntervalSinceDate:self.showStarted];\n        if (interv < self.minShowTime) {\n            NSTimer *timer = [NSTimer timerWithTimeInterval:(self.minShowTime - interv) target:self selector:@selector(handleMinShowTimer:) userInfo:nil repeats:NO];\n            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n            self.minShowTimer = timer;\n            return;\n        } \n    }\n    // ... otherwise hide the HUD immediately\n    [self hideUsingAnimation:self.useAnimation];\n}\n\n- (void)hideUsingAnimation:(BOOL)animated {\n    // Cancel any scheduled hideAnimated:afterDelay: calls.\n    // This needs to happen here instead of in done,\n    // to avoid races if another hideAnimated:afterDelay:\n    // call comes in while the HUD is animating out.\n    [self.hideDelayTimer invalidate];\n\n    if (animated && self.showStarted) {\n        self.showStarted = nil;\n        [self animateIn:NO withType:self.animationType completion:^(BOOL finished) {\n            [self done];\n        }];\n    } else {\n        self.showStarted = nil;\n        self.bezelView.alpha = 0.f;\n        self.backgroundView.alpha = 1.f;\n        [self done];\n    }\n}\n```\n\n\n\n这里注意一下在拿当前hud时的方法.\n\n```objc\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n```\n\n\n\n因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。\n\n\n\n而无论是`show`方法，还是`hide`方法，在设定animated属性为YES的前提下，最终都会走到`animateIn: withType: completion:`方法：\n\n```objc\n- (void)animateIn:(BOOL)animatingIn withType:(MBProgressHUDAnimation)type completion:(void(^)(BOOL finished))completion {\n    // Automatically determine the correct zoom animation type\n    if (type == MBProgressHUDAnimationZoom) {\n        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;\n    }\n\n    CGAffineTransform small = CGAffineTransformMakeScale(0.5f, 0.5f);\n    CGAffineTransform large = CGAffineTransformMakeScale(1.5f, 1.5f);\n\n    // Set starting state\n    UIView *bezelView = self.bezelView;\n    if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomIn) {\n        bezelView.transform = small;\n    } else if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomOut) {\n        bezelView.transform = large;\n    }\n\n    // Perform animations\n    dispatch_block_t animations = ^{\n        if (animatingIn) {\n            bezelView.transform = CGAffineTransformIdentity;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomIn) {\n            bezelView.transform = large;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomOut) {\n            bezelView.transform = small;\n        }\n        CGFloat alpha = animatingIn ? 1.f : 0.f;\n        bezelView.alpha = alpha;\n        self.backgroundView.alpha = alpha;\n    };\n    [UIView animateWithDuration:0.3 delay:0. usingSpringWithDamping:1.f initialSpringVelocity:0.f options:UIViewAnimationOptionBeginFromCurrentState animations:animations completion:completion];\n}\n\n```\n\n\n\n### 收获\n\n1. 暴露出来的API最终都会走到同一个私有方法里。\n2. 使用CADisplayLink来刷新更新频率可能很高的view。\n3. 使用循环时，注意条件可以减少循环次数，进而对程序进行优化。\n4. 在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。","slug":"MBProgressHUD源码解析","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5e00066r36j84p5l24","content":"<p>​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><blockquote>\n<p>MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。</p>\n</blockquote>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><blockquote>\n<h5 id=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\"><a href=\"#MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\" class=\"headerlink\" title=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\"></a>MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.</h5></blockquote>\n<h3 id=\"API结构\"><a href=\"#API结构\" class=\"headerlink\" title=\"API结构\"></a>API结构</h3><h4 id=\"MBProgressHUD\"><a href=\"#MBProgressHUD\" class=\"headerlink\" title=\"MBProgressHUD\"></a>MBProgressHUD</h4><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"keyword\">nullable</span> MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated afterDelay:(<span class=\"built_in\">NSTimeInterval</span>)delay;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a><strong>属性</strong></h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;MBProgressHUDDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nullable</span>) MBProgressHUDCompletionBlock completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> graceTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> minShowTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> removeFromSuperViewOnHide;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDMode mode;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIColor</span> *contentColor <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDAnimation animationType <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGPoint</span> offset <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGFloat</span> margin <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGSize</span> minSize <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span> = isSquare) <span class=\"built_in\">BOOL</span> square <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=areDefaultMotionEffectsEnabled) <span class=\"built_in\">BOOL</span> defaultMotionEffectsEnabled <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">NSProgress</span> *progressObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *bezelView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *backgroundView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIView</span> *customView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *label;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *detailsLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIButton</span> *button;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBRoundProgressView\"><a href=\"#MBRoundProgressView\" class=\"headerlink\" title=\"MBRoundProgressView\"></a>MBRoundProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *backgroundTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">getter</span> = isAnnular) <span class=\"built_in\">BOOL</span> annular;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBarProgressView\"><a href=\"#MBBarProgressView\" class=\"headerlink\" title=\"MBBarProgressView\"></a>MBBarProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *lineColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressRemainingColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressColor;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBackgroundView\"><a href=\"#MBBackgroundView\" class=\"headerlink\" title=\"MBBackgroundView\"></a>MBBackgroundView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) MBProgressHUDBackgroundStyle style;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIBlurEffectStyle</span> blurEffectStyle;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *color;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h3><p>外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到<code>animateIn:withType: completion:</code>，下面是方法调用流程图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg\" alt></p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [[<span class=\"keyword\">self</span> alloc] initWithView:view];</span><br><span class=\"line\">    hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    [view addSubview:hud];</span><br><span class=\"line\">    [hud showAnimated:animated];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.minShowTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the grace time is set, postpone the HUD display</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.graceTime &gt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:<span class=\"keyword\">self</span>.graceTime target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleGraceTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.graceTimer = timer;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise show the HUD immediately</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> showUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any previous animations</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.bezelView.layer removeAllAnimations];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.backgroundView.layer removeAllAnimations];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.showStarted = [<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Needed in case we hide and re-show with the same NSProgress object attached.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNSProgressDisplayLinkEnabled:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">YES</span> withType:<span class=\"keyword\">self</span>.animationType completion:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\"hide\"></a>hide</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [<span class=\"keyword\">self</span> HUDForView:view];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hud != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [hud hideAnimated:animated];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.graceTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the minShow time is set, calculate how long the HUD was shown,</span></span><br><span class=\"line\">    <span class=\"comment\">// and postpone the hiding operation if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.minShowTime &gt; <span class=\"number\">0.0</span> &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> interv = [[<span class=\"built_in\">NSDate</span> date] timeIntervalSinceDate:<span class=\"keyword\">self</span>.showStarted];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interv &lt; <span class=\"keyword\">self</span>.minShowTime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:(<span class=\"keyword\">self</span>.minShowTime - interv) target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleMinShowTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.minShowTimer = timer;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise hide the HUD immediately</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> hideUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls.</span></span><br><span class=\"line\">    <span class=\"comment\">// This needs to happen here instead of in done,</span></span><br><span class=\"line\">    <span class=\"comment\">// to avoid races if another hideAnimated:afterDelay:</span></span><br><span class=\"line\">    <span class=\"comment\">// call comes in while the HUD is animating out.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">NO</span> withType:<span class=\"keyword\">self</span>.animationType completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意一下在拿当前hud时的方法.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。</p>\n<p>而无论是<code>show</code>方法，还是<code>hide</code>方法，在设定animated属性为YES的前提下，最终都会走到<code>animateIn: withType: completion:</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)animateIn:(<span class=\"built_in\">BOOL</span>)animatingIn withType:(MBProgressHUDAnimation)type completion:(<span class=\"keyword\">void</span>(^)(<span class=\"built_in\">BOOL</span> finished))completion &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Automatically determine the correct zoom animation type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == MBProgressHUDAnimationZoom) &#123;</span><br><span class=\"line\">        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> small = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.5</span>f, <span class=\"number\">0.5</span>f);</span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> large = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.5</span>f, <span class=\"number\">1.5</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set starting state</span></span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *bezelView = <span class=\"keyword\">self</span>.bezelView;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">        bezelView.transform = small;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">        bezelView.transform = large;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Perform animations</span></span><br><span class=\"line\">    dispatch_block_t animations = ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animatingIn) &#123;</span><br><span class=\"line\">            bezelView.transform = <span class=\"built_in\">CGAffineTransformIdentity</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">            bezelView.transform = large;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">            bezelView.transform = small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> alpha = animatingIn ? <span class=\"number\">1.</span>f : <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        bezelView.alpha = alpha;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = alpha;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.3</span> delay:<span class=\"number\">0.</span> usingSpringWithDamping:<span class=\"number\">1.</span>f initialSpringVelocity:<span class=\"number\">0.</span>f options:<span class=\"built_in\">UIViewAnimationOptionBeginFromCurrentState</span> animations:animations completion:completion];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h3><ol>\n<li>暴露出来的API最终都会走到同一个私有方法里。</li>\n<li>使用CADisplayLink来刷新更新频率可能很高的view。</li>\n<li>使用循环时，注意条件可以减少循环次数，进而对程序进行优化。</li>\n<li>在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><blockquote>\n<p>MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。</p>\n</blockquote>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><blockquote>\n<h5 id=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\"><a href=\"#MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\" class=\"headerlink\" title=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\"></a>MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.</h5></blockquote>\n<h3 id=\"API结构\"><a href=\"#API结构\" class=\"headerlink\" title=\"API结构\"></a>API结构</h3><h4 id=\"MBProgressHUD\"><a href=\"#MBProgressHUD\" class=\"headerlink\" title=\"MBProgressHUD\"></a>MBProgressHUD</h4><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"keyword\">nullable</span> MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated afterDelay:(<span class=\"built_in\">NSTimeInterval</span>)delay;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a><strong>属性</strong></h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;MBProgressHUDDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nullable</span>) MBProgressHUDCompletionBlock completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> graceTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> minShowTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> removeFromSuperViewOnHide;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDMode mode;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIColor</span> *contentColor <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDAnimation animationType <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGPoint</span> offset <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGFloat</span> margin <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGSize</span> minSize <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span> = isSquare) <span class=\"built_in\">BOOL</span> square <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=areDefaultMotionEffectsEnabled) <span class=\"built_in\">BOOL</span> defaultMotionEffectsEnabled <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">NSProgress</span> *progressObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *bezelView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *backgroundView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIView</span> *customView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *label;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *detailsLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIButton</span> *button;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBRoundProgressView\"><a href=\"#MBRoundProgressView\" class=\"headerlink\" title=\"MBRoundProgressView\"></a>MBRoundProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *backgroundTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">getter</span> = isAnnular) <span class=\"built_in\">BOOL</span> annular;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBarProgressView\"><a href=\"#MBBarProgressView\" class=\"headerlink\" title=\"MBBarProgressView\"></a>MBBarProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *lineColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressRemainingColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressColor;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBackgroundView\"><a href=\"#MBBackgroundView\" class=\"headerlink\" title=\"MBBackgroundView\"></a>MBBackgroundView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) MBProgressHUDBackgroundStyle style;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIBlurEffectStyle</span> blurEffectStyle;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *color;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h3><p>外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到<code>animateIn:withType: completion:</code>，下面是方法调用流程图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg\" alt></p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [[<span class=\"keyword\">self</span> alloc] initWithView:view];</span><br><span class=\"line\">    hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    [view addSubview:hud];</span><br><span class=\"line\">    [hud showAnimated:animated];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.minShowTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the grace time is set, postpone the HUD display</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.graceTime &gt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:<span class=\"keyword\">self</span>.graceTime target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleGraceTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.graceTimer = timer;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise show the HUD immediately</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> showUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any previous animations</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.bezelView.layer removeAllAnimations];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.backgroundView.layer removeAllAnimations];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.showStarted = [<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Needed in case we hide and re-show with the same NSProgress object attached.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNSProgressDisplayLinkEnabled:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">YES</span> withType:<span class=\"keyword\">self</span>.animationType completion:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\"hide\"></a>hide</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [<span class=\"keyword\">self</span> HUDForView:view];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hud != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [hud hideAnimated:animated];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.graceTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the minShow time is set, calculate how long the HUD was shown,</span></span><br><span class=\"line\">    <span class=\"comment\">// and postpone the hiding operation if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.minShowTime &gt; <span class=\"number\">0.0</span> &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> interv = [[<span class=\"built_in\">NSDate</span> date] timeIntervalSinceDate:<span class=\"keyword\">self</span>.showStarted];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interv &lt; <span class=\"keyword\">self</span>.minShowTime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:(<span class=\"keyword\">self</span>.minShowTime - interv) target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleMinShowTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.minShowTimer = timer;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise hide the HUD immediately</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> hideUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls.</span></span><br><span class=\"line\">    <span class=\"comment\">// This needs to happen here instead of in done,</span></span><br><span class=\"line\">    <span class=\"comment\">// to avoid races if another hideAnimated:afterDelay:</span></span><br><span class=\"line\">    <span class=\"comment\">// call comes in while the HUD is animating out.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">NO</span> withType:<span class=\"keyword\">self</span>.animationType completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意一下在拿当前hud时的方法.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。</p>\n<p>而无论是<code>show</code>方法，还是<code>hide</code>方法，在设定animated属性为YES的前提下，最终都会走到<code>animateIn: withType: completion:</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)animateIn:(<span class=\"built_in\">BOOL</span>)animatingIn withType:(MBProgressHUDAnimation)type completion:(<span class=\"keyword\">void</span>(^)(<span class=\"built_in\">BOOL</span> finished))completion &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Automatically determine the correct zoom animation type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == MBProgressHUDAnimationZoom) &#123;</span><br><span class=\"line\">        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> small = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.5</span>f, <span class=\"number\">0.5</span>f);</span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> large = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.5</span>f, <span class=\"number\">1.5</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set starting state</span></span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *bezelView = <span class=\"keyword\">self</span>.bezelView;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">        bezelView.transform = small;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">        bezelView.transform = large;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Perform animations</span></span><br><span class=\"line\">    dispatch_block_t animations = ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animatingIn) &#123;</span><br><span class=\"line\">            bezelView.transform = <span class=\"built_in\">CGAffineTransformIdentity</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">            bezelView.transform = large;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">            bezelView.transform = small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> alpha = animatingIn ? <span class=\"number\">1.</span>f : <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        bezelView.alpha = alpha;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = alpha;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.3</span> delay:<span class=\"number\">0.</span> usingSpringWithDamping:<span class=\"number\">1.</span>f initialSpringVelocity:<span class=\"number\">0.</span>f options:<span class=\"built_in\">UIViewAnimationOptionBeginFromCurrentState</span> animations:animations completion:completion];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h3><ol>\n<li>暴露出来的API最终都会走到同一个私有方法里。</li>\n<li>使用CADisplayLink来刷新更新频率可能很高的view。</li>\n<li>使用循环时，注意条件可以减少循环次数，进而对程序进行优化。</li>\n<li>在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。</li>\n</ol>\n"},{"title":"OC对象本质","date":"2020-07-10T03:58:59.000Z","_content":"\n这里什么都没有","source":"_posts/OC对象本质.md","raw":"---\ntitle: OC对象本质\ndate: 2020-7-10 11:58:59\ntag: 学习笔记\ncategories: 学习笔记\n---\n\n这里什么都没有","slug":"OC对象本质","published":1,"updated":"2020-07-10T03:58:54.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5f00076r36khbqopua","content":"<p>这里什么都没有</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里什么都没有</p>\n"},{"title":"runtime总结","date":"2019-10-31T12:00:01.000Z","_content":"\n#### 前言\n\n​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。\n\n#### runtime是什么？\n\n​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。\n\n#### 有什么用？\n\n   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。","source":"_posts/Runtime总结.md","raw":"---\ntitle: runtime总结\ndate: 2019-10-31 20:00:01\ntag: iOS\ncategories: 学习笔记\n---\n\n#### 前言\n\n​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。\n\n#### runtime是什么？\n\n​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。\n\n#### 有什么用？\n\n   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。","slug":"Runtime总结","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5g00086r36ijzksfdy","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。</p>\n<h4 id=\"runtime是什么？\"><a href=\"#runtime是什么？\" class=\"headerlink\" title=\"runtime是什么？\"></a>runtime是什么？</h4><p>​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。</p>\n<h4 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h4><p>   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。</p>\n<h4 id=\"runtime是什么？\"><a href=\"#runtime是什么？\" class=\"headerlink\" title=\"runtime是什么？\"></a>runtime是什么？</h4><p>​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。</p>\n<h4 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h4><p>   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。</p>\n"},{"title":"TPKeyboardAvoiding源码解析","date":"2019-08-30T08:35:40.000Z","_content":"\n#### 简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\n\n#### 框架结构 ![TPKeyboardAvoiding](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg)\n\n其中一共有3个类,1个分类。\n\n#### 框架使用\n\n![image-20190830170555434](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg)\n\n只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。\n\n#### 源码解析\n\n由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification;\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification;\n```\n\n\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification {\n    NSDictionary *info = [notification userInfo];\n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];\n\n    CGRect keyboardRect = [self convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect)) {\n        return;\n    }\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n\n    state.keyboardRect = keyboardRect;\n\n    if ( !state.keyboardVisible ) {\n        state.priorInset = self.contentInset;\n        state.priorScrollIndicatorInsets = self.scrollIndicatorInsets;\n        state.priorPagingEnabled = self.pagingEnabled;\n    }\n\n    state.keyboardVisible = YES;\n    self.pagingEnabled = NO;\n\n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        state.priorContentSize = self.contentSize;\n        self.contentSize = CGSizeZero;\n        \n        if ( CGSizeEqualToSize(self.contentSize, CGSizeZero) ) {\n            // Set the content size, if it's not set. Do not set content size explicitly if auto-layout\n            // is being used to manage subviews\n            self.contentSize = [self TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];\n        }\n    }\n    \n    // Delay until a future run loop such that the cursor position is available in a text view\n    // In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires\n    // NOTE: Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay\n    // for the text view's current cursor position to be available\n    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC));\n    \n    dispatch_after(delay, dispatch_get_main_queue(), ^{\n        \n        // Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited\n        [UIView beginAnimations:nil context:NULL];\n        \n        [UIView setAnimationDelegate:self];\n        [UIView setAnimationWillStartSelector:@selector(keyboardViewAppear:context:)];\n        \n        [UIView setAnimationDidStopSelector:@selector(keyboardViewDisappear:finished:context:)];\n        \n        [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n        [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n        \n        self.contentInset = [self TPKeyboardAvoiding_contentInsetForKeyboard];\n        \n        UIView *firstResponder = [self TPKeyboardAvoiding_findFirstResponderBeneathView:self];\n        if ( firstResponder ) {\n            CGFloat viewableHeight = self.bounds.size.height - self.contentInset.top - self.contentInset.bottom;\n            [self setContentOffset:CGPointMake(self.contentOffset.x,\n                                               [self TPKeyboardAvoiding_idealOffsetForView:firstResponder\n                                                                     withViewingAreaHeight:viewableHeight])\n                          animated:NO];\n        }\n        \n        self.scrollIndicatorInsets = self.contentInset;\n        [self layoutIfNeeded];\n        \n        [UIView commitAnimations];\n    });\n}\n```\n\n该方法主要分为以下几个步骤:\n\n1、拿到键盘将要出现的状态；\n\n2、保存当前ScrollView的状态；\n\n3、计算当前ScrollView滚动范围；\n\n4、调整ScrollView的contentInset；\n\n5、调整ScrollView的ContentOffset。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification {\n    CGRect keyboardRect = [self convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect) && !self.keyboardAvoidingState.keyboardAnimationInProgress) {\n        return;\n    }\n    \n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n    \n    if ( !state.keyboardVisible ) {\n        return;\n    }\n    \n    state.keyboardRect = CGRectZero;\n    state.keyboardVisible = NO;\n    \n    // Restore dimensions to prior size\n    [UIView beginAnimations:nil context:NULL];\n    [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n    [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n    \n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        self.contentSize = state.priorContentSize;\n    }\n    \n    self.contentInset = state.priorInset;\n    self.scrollIndicatorInsets = state.priorScrollIndicatorInsets;\n    self.pagingEnabled = state.priorPagingEnabled;\n\t[self layoutIfNeeded];\n    [UIView commitAnimations];\n}\n```\n\n该方法主要负责ScrollView状态的恢复。\n\n至此，该框架的核心方法已经总结完毕。\n\n#### 小结\n\nTPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。\n","source":"_posts/TPKeyboardAvoiding源码解析.md","raw":"---\ntitle: TPKeyboardAvoiding源码解析\ndate: 2019-8-30 16:35:40\ntag: iOS\ncategories: 源码阅读\n---\n\n#### 简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\n\n#### 框架结构 ![TPKeyboardAvoiding](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg)\n\n其中一共有3个类,1个分类。\n\n#### 框架使用\n\n![image-20190830170555434](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg)\n\n只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。\n\n#### 源码解析\n\n由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification;\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification;\n```\n\n\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification {\n    NSDictionary *info = [notification userInfo];\n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];\n\n    CGRect keyboardRect = [self convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect)) {\n        return;\n    }\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n\n    state.keyboardRect = keyboardRect;\n\n    if ( !state.keyboardVisible ) {\n        state.priorInset = self.contentInset;\n        state.priorScrollIndicatorInsets = self.scrollIndicatorInsets;\n        state.priorPagingEnabled = self.pagingEnabled;\n    }\n\n    state.keyboardVisible = YES;\n    self.pagingEnabled = NO;\n\n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        state.priorContentSize = self.contentSize;\n        self.contentSize = CGSizeZero;\n        \n        if ( CGSizeEqualToSize(self.contentSize, CGSizeZero) ) {\n            // Set the content size, if it's not set. Do not set content size explicitly if auto-layout\n            // is being used to manage subviews\n            self.contentSize = [self TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];\n        }\n    }\n    \n    // Delay until a future run loop such that the cursor position is available in a text view\n    // In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires\n    // NOTE: Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay\n    // for the text view's current cursor position to be available\n    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC));\n    \n    dispatch_after(delay, dispatch_get_main_queue(), ^{\n        \n        // Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited\n        [UIView beginAnimations:nil context:NULL];\n        \n        [UIView setAnimationDelegate:self];\n        [UIView setAnimationWillStartSelector:@selector(keyboardViewAppear:context:)];\n        \n        [UIView setAnimationDidStopSelector:@selector(keyboardViewDisappear:finished:context:)];\n        \n        [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n        [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n        \n        self.contentInset = [self TPKeyboardAvoiding_contentInsetForKeyboard];\n        \n        UIView *firstResponder = [self TPKeyboardAvoiding_findFirstResponderBeneathView:self];\n        if ( firstResponder ) {\n            CGFloat viewableHeight = self.bounds.size.height - self.contentInset.top - self.contentInset.bottom;\n            [self setContentOffset:CGPointMake(self.contentOffset.x,\n                                               [self TPKeyboardAvoiding_idealOffsetForView:firstResponder\n                                                                     withViewingAreaHeight:viewableHeight])\n                          animated:NO];\n        }\n        \n        self.scrollIndicatorInsets = self.contentInset;\n        [self layoutIfNeeded];\n        \n        [UIView commitAnimations];\n    });\n}\n```\n\n该方法主要分为以下几个步骤:\n\n1、拿到键盘将要出现的状态；\n\n2、保存当前ScrollView的状态；\n\n3、计算当前ScrollView滚动范围；\n\n4、调整ScrollView的contentInset；\n\n5、调整ScrollView的ContentOffset。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification {\n    CGRect keyboardRect = [self convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect) && !self.keyboardAvoidingState.keyboardAnimationInProgress) {\n        return;\n    }\n    \n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n    \n    if ( !state.keyboardVisible ) {\n        return;\n    }\n    \n    state.keyboardRect = CGRectZero;\n    state.keyboardVisible = NO;\n    \n    // Restore dimensions to prior size\n    [UIView beginAnimations:nil context:NULL];\n    [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n    [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n    \n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        self.contentSize = state.priorContentSize;\n    }\n    \n    self.contentInset = state.priorInset;\n    self.scrollIndicatorInsets = state.priorScrollIndicatorInsets;\n    self.pagingEnabled = state.priorPagingEnabled;\n\t[self layoutIfNeeded];\n    [UIView commitAnimations];\n}\n```\n\n该方法主要负责ScrollView状态的恢复。\n\n至此，该框架的核心方法已经总结完毕。\n\n#### 小结\n\nTPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。\n","slug":"TPKeyboardAvoiding源码解析","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5k000c6r366xnwakxg","content":"<h4 id=\"简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"><a href=\"#简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\" class=\"headerlink\" title=\"简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"></a>简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。</h4><h4 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构 \"></a>框架结构 <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg\" alt=\"TPKeyboardAvoiding\"></h4><p>其中一共有3个类,1个分类。</p>\n<h4 id=\"框架使用\"><a href=\"#框架使用\" class=\"headerlink\" title=\"框架使用\"></a>框架使用</h4><p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg\" alt=\"image-20190830170555434\"></p>\n<p>只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p>由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *info = [notification userInfo];</span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardRect = keyboardRect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        state.priorInset = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        state.priorScrollIndicatorInsets = <span class=\"keyword\">self</span>.scrollIndicatorInsets;</span><br><span class=\"line\">        state.priorPagingEnabled = <span class=\"keyword\">self</span>.pagingEnabled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        state.priorContentSize = <span class=\"keyword\">self</span>.contentSize;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = <span class=\"built_in\">CGSizeZero</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">CGSizeEqualToSize</span>(<span class=\"keyword\">self</span>.contentSize, <span class=\"built_in\">CGSizeZero</span>) ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Set the content size, if it's not set. Do not set content size explicitly if auto-layout</span></span><br><span class=\"line\">            <span class=\"comment\">// is being used to manage subviews</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.contentSize = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Delay until a future run loop such that the cursor position is available in a text view</span></span><br><span class=\"line\">    <span class=\"comment\">// In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay</span></span><br><span class=\"line\">    <span class=\"comment\">// for the text view's current cursor position to be available</span></span><br><span class=\"line\">    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(delay, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited</span></span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationWillStartSelector:<span class=\"keyword\">@selector</span>(keyboardViewAppear:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(keyboardViewDisappear:finished:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentInset = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_contentInsetForKeyboard];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">UIView</span> *firstResponder = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_findFirstResponderBeneathView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( firstResponder ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">CGFloat</span> viewableHeight = <span class=\"keyword\">self</span>.bounds.size.height - <span class=\"keyword\">self</span>.contentInset.top - <span class=\"keyword\">self</span>.contentInset.bottom;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.contentOffset.x,</span><br><span class=\"line\">                                               [<span class=\"keyword\">self</span> TPKeyboardAvoiding_idealOffsetForView:firstResponder</span><br><span class=\"line\">                                                                     withViewingAreaHeight:viewableHeight])</span><br><span class=\"line\">                          animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.scrollIndicatorInsets = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要分为以下几个步骤:</p>\n<p>1、拿到键盘将要出现的状态；</p>\n<p>2、保存当前ScrollView的状态；</p>\n<p>3、计算当前ScrollView滚动范围；</p>\n<p>4、调整ScrollView的contentInset；</p>\n<p>5、调整ScrollView的ContentOffset。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect) &amp;&amp; !<span class=\"keyword\">self</span>.keyboardAvoidingState.keyboardAnimationInProgress) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.keyboardRect = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Restore dimensions to prior size</span></span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = state.priorContentSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.contentInset = state.priorInset;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.scrollIndicatorInsets = state.priorScrollIndicatorInsets;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = state.priorPagingEnabled;</span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要负责ScrollView状态的恢复。</p>\n<p>至此，该框架的核心方法已经总结完毕。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>TPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"><a href=\"#简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\" class=\"headerlink\" title=\"简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"></a>简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。</h4><h4 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构 \"></a>框架结构 <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg\" alt=\"TPKeyboardAvoiding\"></h4><p>其中一共有3个类,1个分类。</p>\n<h4 id=\"框架使用\"><a href=\"#框架使用\" class=\"headerlink\" title=\"框架使用\"></a>框架使用</h4><p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg\" alt=\"image-20190830170555434\"></p>\n<p>只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p>由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *info = [notification userInfo];</span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardRect = keyboardRect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        state.priorInset = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        state.priorScrollIndicatorInsets = <span class=\"keyword\">self</span>.scrollIndicatorInsets;</span><br><span class=\"line\">        state.priorPagingEnabled = <span class=\"keyword\">self</span>.pagingEnabled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        state.priorContentSize = <span class=\"keyword\">self</span>.contentSize;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = <span class=\"built_in\">CGSizeZero</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">CGSizeEqualToSize</span>(<span class=\"keyword\">self</span>.contentSize, <span class=\"built_in\">CGSizeZero</span>) ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Set the content size, if it's not set. Do not set content size explicitly if auto-layout</span></span><br><span class=\"line\">            <span class=\"comment\">// is being used to manage subviews</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.contentSize = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Delay until a future run loop such that the cursor position is available in a text view</span></span><br><span class=\"line\">    <span class=\"comment\">// In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay</span></span><br><span class=\"line\">    <span class=\"comment\">// for the text view's current cursor position to be available</span></span><br><span class=\"line\">    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(delay, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited</span></span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationWillStartSelector:<span class=\"keyword\">@selector</span>(keyboardViewAppear:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(keyboardViewDisappear:finished:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentInset = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_contentInsetForKeyboard];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">UIView</span> *firstResponder = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_findFirstResponderBeneathView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( firstResponder ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">CGFloat</span> viewableHeight = <span class=\"keyword\">self</span>.bounds.size.height - <span class=\"keyword\">self</span>.contentInset.top - <span class=\"keyword\">self</span>.contentInset.bottom;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.contentOffset.x,</span><br><span class=\"line\">                                               [<span class=\"keyword\">self</span> TPKeyboardAvoiding_idealOffsetForView:firstResponder</span><br><span class=\"line\">                                                                     withViewingAreaHeight:viewableHeight])</span><br><span class=\"line\">                          animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.scrollIndicatorInsets = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要分为以下几个步骤:</p>\n<p>1、拿到键盘将要出现的状态；</p>\n<p>2、保存当前ScrollView的状态；</p>\n<p>3、计算当前ScrollView滚动范围；</p>\n<p>4、调整ScrollView的contentInset；</p>\n<p>5、调整ScrollView的ContentOffset。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect) &amp;&amp; !<span class=\"keyword\">self</span>.keyboardAvoidingState.keyboardAnimationInProgress) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.keyboardRect = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Restore dimensions to prior size</span></span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = state.priorContentSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.contentInset = state.priorInset;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.scrollIndicatorInsets = state.priorScrollIndicatorInsets;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = state.priorPagingEnabled;</span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要负责ScrollView状态的恢复。</p>\n<p>至此，该框架的核心方法已经总结完毕。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>TPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。</p>\n"},{"title":"2018 最新安装cocoapods.","date":"2018-04-09T14:46:49.000Z","_content":"\n> 事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.\n\n# 一、简介\n\n# 什么是CocoaPods\n\nCocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。\n\nCocoaPods的好处\n\n1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。\n\n2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。\n\n# 二、Cocoapods安装步骤\n\n## 1、升级Ruby环境\n\n> 终端输入：$ gem update --system\n\n若提示没有权限，\n\n> 这时应该输入：$ sudo gem update --system\n\n## 2、更换Ruby镜像\n\n首先移除现有的Ruby镜像\n\n> 终端输入：$ gem sources --removehttps://rubygems.org/\n\n然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）\n\n> 终端输入：$ gem sources -ahttps://gems.ruby-china.org/\n\n执行完毕之后输入gem sources -l来查看当前镜像\n\n> 终端输入：$ gem sources -l\n\n如果结果是\n\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org/\n\n说明添加成功，否则继续执行$ gem source -a  https://gems.ruby-china.org/来添加\n\n## 3、安装CocoaPods\n\n接下来开始安装\n\n> 终端输入：$ sudo gem install cocoapods\n\n如果提示没有权限:\n\n> 终端输入：$ sudo gem install -n /usr/local/bin cocoapods\n\n安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）\n\n> 终端输入：$ pod setup\n\n## 4.pod setup无法执行解决方案\n\n### 4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\n\n> pod repo remove master\n\n> pod repo add master https://git.coding.net/CocoaPods/Specs.git\n\n> pod repo update\n\n### 4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\n\n> git clone https://github.com/CocoaPods/Specs\n\n### 4.3 从浏览器 [https://github.com/CocoaPods/Specs](https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs) 下载.\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nzip下载方式.png\n\n使用ZIP下载的方式下载下来文件，解压到repos目录.\n\n### 4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\n\n之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)\n\n> ​    git init\n\n### 4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174)\n\ngithub客户端\n\n至此你的电脑上已经能够正常使用cocoapods了。","source":"_posts/cocoapods.md","raw":"---\ntitle: 2018 最新安装cocoapods.\ndate: 2018-4-09 22:46:49\ntag: iOS\ncategories: 学习笔记\n---\n\n> 事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.\n\n# 一、简介\n\n# 什么是CocoaPods\n\nCocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。\n\nCocoaPods的好处\n\n1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。\n\n2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。\n\n# 二、Cocoapods安装步骤\n\n## 1、升级Ruby环境\n\n> 终端输入：$ gem update --system\n\n若提示没有权限，\n\n> 这时应该输入：$ sudo gem update --system\n\n## 2、更换Ruby镜像\n\n首先移除现有的Ruby镜像\n\n> 终端输入：$ gem sources --removehttps://rubygems.org/\n\n然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）\n\n> 终端输入：$ gem sources -ahttps://gems.ruby-china.org/\n\n执行完毕之后输入gem sources -l来查看当前镜像\n\n> 终端输入：$ gem sources -l\n\n如果结果是\n\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org/\n\n说明添加成功，否则继续执行$ gem source -a  https://gems.ruby-china.org/来添加\n\n## 3、安装CocoaPods\n\n接下来开始安装\n\n> 终端输入：$ sudo gem install cocoapods\n\n如果提示没有权限:\n\n> 终端输入：$ sudo gem install -n /usr/local/bin cocoapods\n\n安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）\n\n> 终端输入：$ pod setup\n\n## 4.pod setup无法执行解决方案\n\n### 4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\n\n> pod repo remove master\n\n> pod repo add master https://git.coding.net/CocoaPods/Specs.git\n\n> pod repo update\n\n### 4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\n\n> git clone https://github.com/CocoaPods/Specs\n\n### 4.3 从浏览器 [https://github.com/CocoaPods/Specs](https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs) 下载.\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nzip下载方式.png\n\n使用ZIP下载的方式下载下来文件，解压到repos目录.\n\n### 4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\n\n之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)\n\n> ​    git init\n\n### 4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174)\n\ngithub客户端\n\n至此你的电脑上已经能够正常使用cocoapods了。","slug":"cocoapods","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5n000e6r3661k9jusm","content":"<blockquote>\n<p>事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h1 id=\"什么是CocoaPods\"><a href=\"#什么是CocoaPods\" class=\"headerlink\" title=\"什么是CocoaPods\"></a>什么是CocoaPods</h1><p>CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。</p>\n<p>CocoaPods的好处</p>\n<p>1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。</p>\n<p>2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</p>\n<h1 id=\"二、Cocoapods安装步骤\"><a href=\"#二、Cocoapods安装步骤\" class=\"headerlink\" title=\"二、Cocoapods安装步骤\"></a>二、Cocoapods安装步骤</h1><h2 id=\"1、升级Ruby环境\"><a href=\"#1、升级Ruby环境\" class=\"headerlink\" title=\"1、升级Ruby环境\"></a>1、升级Ruby环境</h2><blockquote>\n<p>终端输入：$ gem update –system</p>\n</blockquote>\n<p>若提示没有权限，</p>\n<blockquote>\n<p>这时应该输入：$ sudo gem update –system</p>\n</blockquote>\n<h2 id=\"2、更换Ruby镜像\"><a href=\"#2、更换Ruby镜像\" class=\"headerlink\" title=\"2、更换Ruby镜像\"></a>2、更换Ruby镜像</h2><p>首先移除现有的Ruby镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources –remove<a href=\"https://rubygems.org/\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/</a></p>\n</blockquote>\n<p>然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）</p>\n<blockquote>\n<p>终端输入：$ gem sources -a<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n</blockquote>\n<p>执行完毕之后输入gem sources -l来查看当前镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources -l</p>\n</blockquote>\n<p>如果结果是</p>\n<p><strong>* CURRENT SOURCES *</strong></p>\n<p><a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n<p>说明添加成功，否则继续执行$ gem source -a  <a href=\"https://gems.ruby-china.org/来添加\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/来添加</a></p>\n<h2 id=\"3、安装CocoaPods\"><a href=\"#3、安装CocoaPods\" class=\"headerlink\" title=\"3、安装CocoaPods\"></a>3、安装CocoaPods</h2><p>接下来开始安装</p>\n<blockquote>\n<p>终端输入：$ sudo gem install cocoapods</p>\n</blockquote>\n<p>如果提示没有权限:</p>\n<blockquote>\n<p>终端输入：$ sudo gem install -n /usr/local/bin cocoapods</p>\n</blockquote>\n<p>安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）</p>\n<blockquote>\n<p>终端输入：$ pod setup</p>\n</blockquote>\n<h2 id=\"4-pod-setup无法执行解决方案\"><a href=\"#4-pod-setup无法执行解决方案\" class=\"headerlink\" title=\"4.pod setup无法执行解决方案\"></a>4.pod setup无法执行解决方案</h2><h3 id=\"4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\"><a href=\"#4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\" class=\"headerlink\" title=\"4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\"></a>4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)</h3><blockquote>\n<p>pod repo remove master</p>\n</blockquote>\n<blockquote>\n<p>pod repo add master <a href=\"https://git.coding.net/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">https://git.coding.net/CocoaPods/Specs.git</a></p>\n</blockquote>\n<blockquote>\n<p>pod repo update</p>\n</blockquote>\n<h3 id=\"4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\"><a href=\"#4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\" class=\"headerlink\" title=\"4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\"></a>4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos</h3><blockquote>\n<p>git clone <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a></p>\n</blockquote>\n<h3 id=\"4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\"><a href=\"#4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\" class=\"headerlink\" title=\"4.3 从浏览器 https://github.com/CocoaPods/Specs 下载.\"></a>4.3 从浏览器 <a href=\"https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 下载.</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>zip下载方式.png</p>\n<p>使用ZIP下载的方式下载下来文件，解压到repos目录.</p>\n<h3 id=\"4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\"><a href=\"#4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\" class=\"headerlink\" title=\"4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\"></a>4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）</h3><p>之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)</p>\n<blockquote>\n<p>​    git init</p>\n</blockquote>\n<h3 id=\"4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\"><a href=\"#4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\" class=\"headerlink\" title=\"4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\"></a>4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174\" alt=\"img\"></p>\n<p>github客户端</p>\n<p>至此你的电脑上已经能够正常使用cocoapods了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h1 id=\"什么是CocoaPods\"><a href=\"#什么是CocoaPods\" class=\"headerlink\" title=\"什么是CocoaPods\"></a>什么是CocoaPods</h1><p>CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。</p>\n<p>CocoaPods的好处</p>\n<p>1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。</p>\n<p>2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</p>\n<h1 id=\"二、Cocoapods安装步骤\"><a href=\"#二、Cocoapods安装步骤\" class=\"headerlink\" title=\"二、Cocoapods安装步骤\"></a>二、Cocoapods安装步骤</h1><h2 id=\"1、升级Ruby环境\"><a href=\"#1、升级Ruby环境\" class=\"headerlink\" title=\"1、升级Ruby环境\"></a>1、升级Ruby环境</h2><blockquote>\n<p>终端输入：$ gem update –system</p>\n</blockquote>\n<p>若提示没有权限，</p>\n<blockquote>\n<p>这时应该输入：$ sudo gem update –system</p>\n</blockquote>\n<h2 id=\"2、更换Ruby镜像\"><a href=\"#2、更换Ruby镜像\" class=\"headerlink\" title=\"2、更换Ruby镜像\"></a>2、更换Ruby镜像</h2><p>首先移除现有的Ruby镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources –remove<a href=\"https://rubygems.org/\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/</a></p>\n</blockquote>\n<p>然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）</p>\n<blockquote>\n<p>终端输入：$ gem sources -a<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n</blockquote>\n<p>执行完毕之后输入gem sources -l来查看当前镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources -l</p>\n</blockquote>\n<p>如果结果是</p>\n<p><strong>* CURRENT SOURCES *</strong></p>\n<p><a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n<p>说明添加成功，否则继续执行$ gem source -a  <a href=\"https://gems.ruby-china.org/来添加\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/来添加</a></p>\n<h2 id=\"3、安装CocoaPods\"><a href=\"#3、安装CocoaPods\" class=\"headerlink\" title=\"3、安装CocoaPods\"></a>3、安装CocoaPods</h2><p>接下来开始安装</p>\n<blockquote>\n<p>终端输入：$ sudo gem install cocoapods</p>\n</blockquote>\n<p>如果提示没有权限:</p>\n<blockquote>\n<p>终端输入：$ sudo gem install -n /usr/local/bin cocoapods</p>\n</blockquote>\n<p>安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）</p>\n<blockquote>\n<p>终端输入：$ pod setup</p>\n</blockquote>\n<h2 id=\"4-pod-setup无法执行解决方案\"><a href=\"#4-pod-setup无法执行解决方案\" class=\"headerlink\" title=\"4.pod setup无法执行解决方案\"></a>4.pod setup无法执行解决方案</h2><h3 id=\"4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\"><a href=\"#4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\" class=\"headerlink\" title=\"4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\"></a>4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)</h3><blockquote>\n<p>pod repo remove master</p>\n</blockquote>\n<blockquote>\n<p>pod repo add master <a href=\"https://git.coding.net/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">https://git.coding.net/CocoaPods/Specs.git</a></p>\n</blockquote>\n<blockquote>\n<p>pod repo update</p>\n</blockquote>\n<h3 id=\"4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\"><a href=\"#4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\" class=\"headerlink\" title=\"4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\"></a>4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos</h3><blockquote>\n<p>git clone <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a></p>\n</blockquote>\n<h3 id=\"4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\"><a href=\"#4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\" class=\"headerlink\" title=\"4.3 从浏览器 https://github.com/CocoaPods/Specs 下载.\"></a>4.3 从浏览器 <a href=\"https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 下载.</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>zip下载方式.png</p>\n<p>使用ZIP下载的方式下载下来文件，解压到repos目录.</p>\n<h3 id=\"4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\"><a href=\"#4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\" class=\"headerlink\" title=\"4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\"></a>4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）</h3><p>之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)</p>\n<blockquote>\n<p>​    git init</p>\n</blockquote>\n<h3 id=\"4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\"><a href=\"#4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\" class=\"headerlink\" title=\"4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\"></a>4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174\" alt=\"img\"></p>\n<p>github客户端</p>\n<p>至此你的电脑上已经能够正常使用cocoapods了。</p>\n"},{"title":"iOS中常用的三方库","date":"2019-08-08T07:21:40.000Z","_content":"\nMasonry(页面布局 ) --> [Masonry](https://github.com/SnapKit/Masonry)\n\nAFNetworking(网络请求)  --> [AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\nCocoaLumberjack(记录log) --> [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)\n\nYTKNetwork(网络请求使用层优化) --> [YTKNetwork](https://github.com/yuantiku/YTKNetwork)\n\nSAMKeychain(用来存储账号密码) --> [SAMKeychain](https://github.com/soffes/SAMKeychain)\n\nSDWebImage(图片加载) --> [SDWebImage](https://github.com/SDWebImage/SDWebImage)\n\nMBProgressHUD(进度指示) --> [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nIQKeyboardManager(键盘管理) --> [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\nReactiveObjC(OC响应式框架) --> [ReactiveObjC](https://github.com/ReactiveCocoa/ReactiveObjC)\n\nRJBadgeKit(小红点统一管理工具) --> [RJBadgeKit](https://github.com/RylanJIN/RJBadgeKit)\n\nWMPageController(分页控制管理器) --> [WMPageController](https://github.com/wangmchn/WMPageController)\n\nYYKit(工具库) --> [YYKit](https://github.com/ibireme/YYKit)\n\nIDMPhotoBrowser(图片浏览器) --> [IDMPhotoBrowser](https://github.com/thiagoperes/IDMPhotoBrowser)\n\nDZNEmptyDataSet(空数据设置) --> [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\nMLeaksFinder(内存泄露检测) --> [MLeaksFinder](https://github.com/Tencent/MLeaksFinder)\n\nBagel（网络请求打印） --> [Bagel](https://github.com/yagiz/Bagel)","source":"_posts/iOS中常用 的三方库.md","raw":"---\ntitle: iOS中常用的三方库\ntag: iOS\ndate: 2019-8-8 15:21:40\ncategories: 学习总结\n---\n\nMasonry(页面布局 ) --> [Masonry](https://github.com/SnapKit/Masonry)\n\nAFNetworking(网络请求)  --> [AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\nCocoaLumberjack(记录log) --> [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)\n\nYTKNetwork(网络请求使用层优化) --> [YTKNetwork](https://github.com/yuantiku/YTKNetwork)\n\nSAMKeychain(用来存储账号密码) --> [SAMKeychain](https://github.com/soffes/SAMKeychain)\n\nSDWebImage(图片加载) --> [SDWebImage](https://github.com/SDWebImage/SDWebImage)\n\nMBProgressHUD(进度指示) --> [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nIQKeyboardManager(键盘管理) --> [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\nReactiveObjC(OC响应式框架) --> [ReactiveObjC](https://github.com/ReactiveCocoa/ReactiveObjC)\n\nRJBadgeKit(小红点统一管理工具) --> [RJBadgeKit](https://github.com/RylanJIN/RJBadgeKit)\n\nWMPageController(分页控制管理器) --> [WMPageController](https://github.com/wangmchn/WMPageController)\n\nYYKit(工具库) --> [YYKit](https://github.com/ibireme/YYKit)\n\nIDMPhotoBrowser(图片浏览器) --> [IDMPhotoBrowser](https://github.com/thiagoperes/IDMPhotoBrowser)\n\nDZNEmptyDataSet(空数据设置) --> [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\nMLeaksFinder(内存泄露检测) --> [MLeaksFinder](https://github.com/Tencent/MLeaksFinder)\n\nBagel（网络请求打印） --> [Bagel](https://github.com/yagiz/Bagel)","slug":"iOS中常用 的三方库","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5u000j6r36o64a7lwe","content":"<p>Masonry(页面布局 ) –&gt; <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a></p>\n<p>AFNetworking(网络请求)  –&gt; <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></p>\n<p>CocoaLumberjack(记录log) –&gt; <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\" target=\"_blank\" rel=\"noopener\">CocoaLumberjack</a></p>\n<p>YTKNetwork(网络请求使用层优化) –&gt; <a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a></p>\n<p>SAMKeychain(用来存储账号密码) –&gt; <a href=\"https://github.com/soffes/SAMKeychain\" target=\"_blank\" rel=\"noopener\">SAMKeychain</a></p>\n<p>SDWebImage(图片加载) –&gt; <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<p>MBProgressHUD(进度指示) –&gt; <a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a></p>\n<p>IQKeyboardManager(键盘管理) –&gt; <a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a></p>\n<p>ReactiveObjC(OC响应式框架) –&gt; <a href=\"https://github.com/ReactiveCocoa/ReactiveObjC\" target=\"_blank\" rel=\"noopener\">ReactiveObjC</a></p>\n<p>RJBadgeKit(小红点统一管理工具) –&gt; <a href=\"https://github.com/RylanJIN/RJBadgeKit\" target=\"_blank\" rel=\"noopener\">RJBadgeKit</a></p>\n<p>WMPageController(分页控制管理器) –&gt; <a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a></p>\n<p>YYKit(工具库) –&gt; <a href=\"https://github.com/ibireme/YYKit\" target=\"_blank\" rel=\"noopener\">YYKit</a></p>\n<p>IDMPhotoBrowser(图片浏览器) –&gt; <a href=\"https://github.com/thiagoperes/IDMPhotoBrowser\" target=\"_blank\" rel=\"noopener\">IDMPhotoBrowser</a></p>\n<p>DZNEmptyDataSet(空数据设置) –&gt; <a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a></p>\n<p>MLeaksFinder(内存泄露检测) –&gt; <a href=\"https://github.com/Tencent/MLeaksFinder\" target=\"_blank\" rel=\"noopener\">MLeaksFinder</a></p>\n<p>Bagel（网络请求打印） –&gt; <a href=\"https://github.com/yagiz/Bagel\" target=\"_blank\" rel=\"noopener\">Bagel</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Masonry(页面布局 ) –&gt; <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a></p>\n<p>AFNetworking(网络请求)  –&gt; <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></p>\n<p>CocoaLumberjack(记录log) –&gt; <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\" target=\"_blank\" rel=\"noopener\">CocoaLumberjack</a></p>\n<p>YTKNetwork(网络请求使用层优化) –&gt; <a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a></p>\n<p>SAMKeychain(用来存储账号密码) –&gt; <a href=\"https://github.com/soffes/SAMKeychain\" target=\"_blank\" rel=\"noopener\">SAMKeychain</a></p>\n<p>SDWebImage(图片加载) –&gt; <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<p>MBProgressHUD(进度指示) –&gt; <a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a></p>\n<p>IQKeyboardManager(键盘管理) –&gt; <a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a></p>\n<p>ReactiveObjC(OC响应式框架) –&gt; <a href=\"https://github.com/ReactiveCocoa/ReactiveObjC\" target=\"_blank\" rel=\"noopener\">ReactiveObjC</a></p>\n<p>RJBadgeKit(小红点统一管理工具) –&gt; <a href=\"https://github.com/RylanJIN/RJBadgeKit\" target=\"_blank\" rel=\"noopener\">RJBadgeKit</a></p>\n<p>WMPageController(分页控制管理器) –&gt; <a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a></p>\n<p>YYKit(工具库) –&gt; <a href=\"https://github.com/ibireme/YYKit\" target=\"_blank\" rel=\"noopener\">YYKit</a></p>\n<p>IDMPhotoBrowser(图片浏览器) –&gt; <a href=\"https://github.com/thiagoperes/IDMPhotoBrowser\" target=\"_blank\" rel=\"noopener\">IDMPhotoBrowser</a></p>\n<p>DZNEmptyDataSet(空数据设置) –&gt; <a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a></p>\n<p>MLeaksFinder(内存泄露检测) –&gt; <a href=\"https://github.com/Tencent/MLeaksFinder\" target=\"_blank\" rel=\"noopener\">MLeaksFinder</a></p>\n<p>Bagel（网络请求打印） –&gt; <a href=\"https://github.com/yagiz/Bagel\" target=\"_blank\" rel=\"noopener\">Bagel</a></p>\n"},{"title":"iOS pem 证书生成","date":"2019-01-15T08:52:59.000Z","_content":"\n# pem文件概述\n\n​\tpem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。\n\n# 生成.pem的方法\n\n​\t生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。\n\n## 分别生成\n\n### 生成cert文件\n\n![F9EE8275-559C-496A-8B9D-57E6C0DD2308.png](https://i.loli.net/2019/01/16/5c3ea96bedbdb.png)\n\n![C4B31488-5045-44C0-AE65-532E13E210B5.png](https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png)\n\n![8CADA519-4E76-4242-A40F-58A6FF9BA487.png](https://i.loli.net/2019/01/16/5c3ea96a5cf94.png)\n\n\n\n### 生成key文件\n\n![3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png](https://i.loli.net/2019/01/16/5c3ea96bd197e.png)\n\n![5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png](https://i.loli.net/2019/01/16/5c3ea96a4926e.png)\n\n![1C5B5045-8DC1-4A7F-A822-B8A76549A535.png](https://i.loli.net/2019/01/16/5c3ea96a30943.png)\n\n\n\n### 生成cert pem文件​\t\n\n​\t将apns-dev-cert.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12\n```\n\n\n\n### 生成key pem文件\n\n​\t将apns-dev-key.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12\n```\n\n​\t移除key pem的密码\n\n```\nopenssl rsa -in apns-dev-key.pem -out apns-dev-key.pem\n```\n\n\n\n### 合成推送需要的pem文件\n\n​\t将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件\n\n```\ncat apns-dev-cert.pem apns-dev-key.pem > apns-dev.pem\n```\n\n\n\n### 测试pem文\n\n在终端测试：\n\n```\nopenssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem\n```\n\n终端最后显示以下内容，表示配置pem文件成功，\n\nKey-Arg   : None\n\nStart Time: 1467854873\n\nTimeout   : 300 (sec)\n\nVerify return code: 0 (ok)\n\n## 直接生成\n\n​\t**同时**选中cert和key,导出一份p12文件。\n\n![QQ20190116-102210@2x.png](https://i.loli.net/2019/01/16/5c3ea96ed3b56.png)\n\n​\t将p12文件转化成后台需要的pem证书.\n\n```\nopenssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts\n```\n\n### 工具\n\n​\t平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。\n\n[*Knuff*](https://github.com/KnuffApp/Knuff)\n\n[*SmartPush*](https://github.com/shaojiankui/SmartPush)\n\n## 参考文章\n\n[iOS推送证书生成pem文件（详细生成过程）](https://www.jianshu.com/p/cc952ea07a08)\n\n[Generate .pem file Used to setup Apple Push Notification](https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification)\n\n","source":"_posts/iOS生成.pem推送证书.md","raw":"---\ntitle: iOS pem 证书生成\ndate: 2019-1-15 16:52:59\ntag: iOS\ncategories: 学习笔记\n---\n\n# pem文件概述\n\n​\tpem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。\n\n# 生成.pem的方法\n\n​\t生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。\n\n## 分别生成\n\n### 生成cert文件\n\n![F9EE8275-559C-496A-8B9D-57E6C0DD2308.png](https://i.loli.net/2019/01/16/5c3ea96bedbdb.png)\n\n![C4B31488-5045-44C0-AE65-532E13E210B5.png](https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png)\n\n![8CADA519-4E76-4242-A40F-58A6FF9BA487.png](https://i.loli.net/2019/01/16/5c3ea96a5cf94.png)\n\n\n\n### 生成key文件\n\n![3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png](https://i.loli.net/2019/01/16/5c3ea96bd197e.png)\n\n![5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png](https://i.loli.net/2019/01/16/5c3ea96a4926e.png)\n\n![1C5B5045-8DC1-4A7F-A822-B8A76549A535.png](https://i.loli.net/2019/01/16/5c3ea96a30943.png)\n\n\n\n### 生成cert pem文件​\t\n\n​\t将apns-dev-cert.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12\n```\n\n\n\n### 生成key pem文件\n\n​\t将apns-dev-key.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12\n```\n\n​\t移除key pem的密码\n\n```\nopenssl rsa -in apns-dev-key.pem -out apns-dev-key.pem\n```\n\n\n\n### 合成推送需要的pem文件\n\n​\t将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件\n\n```\ncat apns-dev-cert.pem apns-dev-key.pem > apns-dev.pem\n```\n\n\n\n### 测试pem文\n\n在终端测试：\n\n```\nopenssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem\n```\n\n终端最后显示以下内容，表示配置pem文件成功，\n\nKey-Arg   : None\n\nStart Time: 1467854873\n\nTimeout   : 300 (sec)\n\nVerify return code: 0 (ok)\n\n## 直接生成\n\n​\t**同时**选中cert和key,导出一份p12文件。\n\n![QQ20190116-102210@2x.png](https://i.loli.net/2019/01/16/5c3ea96ed3b56.png)\n\n​\t将p12文件转化成后台需要的pem证书.\n\n```\nopenssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts\n```\n\n### 工具\n\n​\t平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。\n\n[*Knuff*](https://github.com/KnuffApp/Knuff)\n\n[*SmartPush*](https://github.com/shaojiankui/SmartPush)\n\n## 参考文章\n\n[iOS推送证书生成pem文件（详细生成过程）](https://www.jianshu.com/p/cc952ea07a08)\n\n[Generate .pem file Used to setup Apple Push Notification](https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification)\n\n","slug":"iOS生成.pem推送证书","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5w000l6r365ve41us7","content":"<h1 id=\"pem文件概述\"><a href=\"#pem文件概述\" class=\"headerlink\" title=\"pem文件概述\"></a>pem文件概述</h1><p>​    pem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。</p>\n<h1 id=\"生成-pem的方法\"><a href=\"#生成-pem的方法\" class=\"headerlink\" title=\"生成.pem的方法\"></a>生成.pem的方法</h1><p>​    生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。</p>\n<h2 id=\"分别生成\"><a href=\"#分别生成\" class=\"headerlink\" title=\"分别生成\"></a>分别生成</h2><h3 id=\"生成cert文件\"><a href=\"#生成cert文件\" class=\"headerlink\" title=\"生成cert文件\"></a>生成cert文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bedbdb.png\" alt=\"F9EE8275-559C-496A-8B9D-57E6C0DD2308.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png\" alt=\"C4B31488-5045-44C0-AE65-532E13E210B5.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a5cf94.png\" alt=\"8CADA519-4E76-4242-A40F-58A6FF9BA487.png\"></p>\n<h3 id=\"生成key文件\"><a href=\"#生成key文件\" class=\"headerlink\" title=\"生成key文件\"></a>生成key文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bd197e.png\" alt=\"3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a4926e.png\" alt=\"5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a30943.png\" alt=\"1C5B5045-8DC1-4A7F-A822-B8A76549A535.png\"></p>\n<h3 id=\"生成cert-pem文件​\"><a href=\"#生成cert-pem文件​\" class=\"headerlink\" title=\"生成cert pem文件​\"></a>生成cert pem文件​</h3><p>​    将apns-dev-cert.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成key-pem文件\"><a href=\"#生成key-pem文件\" class=\"headerlink\" title=\"生成key pem文件\"></a>生成key pem文件</h3><p>​    将apns-dev-key.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12</span><br></pre></td></tr></table></figure>\n\n<p>​    移除key pem的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in apns-dev-key.pem -out apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合成推送需要的pem文件\"><a href=\"#合成推送需要的pem文件\" class=\"headerlink\" title=\"合成推送需要的pem文件\"></a>合成推送需要的pem文件</h3><p>​    将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat apns-dev-cert.pem apns-dev-key.pem &gt; apns-dev.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试pem文\"><a href=\"#测试pem文\" class=\"headerlink\" title=\"测试pem文\"></a>测试pem文</h3><p>在终端测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>终端最后显示以下内容，表示配置pem文件成功，</p>\n<p>Key-Arg   : None</p>\n<p>Start Time: 1467854873</p>\n<p>Timeout   : 300 (sec)</p>\n<p>Verify return code: 0 (ok)</p>\n<h2 id=\"直接生成\"><a href=\"#直接生成\" class=\"headerlink\" title=\"直接生成\"></a>直接生成</h2><p>​    <strong>同时</strong>选中cert和key,导出一份p12文件。</p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96ed3b56.png\" alt=\"QQ20190116-102210@2x.png\"></p>\n<p>​    将p12文件转化成后台需要的pem证书.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>​    平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。</p>\n<p><a href=\"https://github.com/KnuffApp/Knuff\" target=\"_blank\" rel=\"noopener\"><em>Knuff</em></a></p>\n<p><a href=\"https://github.com/shaojiankui/SmartPush\" target=\"_blank\" rel=\"noopener\"><em>SmartPush</em></a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/p/cc952ea07a08\" target=\"_blank\" rel=\"noopener\">iOS推送证书生成pem文件（详细生成过程）</a></p>\n<p><a href=\"https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification\" target=\"_blank\" rel=\"noopener\">Generate .pem file Used to setup Apple Push Notification</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pem文件概述\"><a href=\"#pem文件概述\" class=\"headerlink\" title=\"pem文件概述\"></a>pem文件概述</h1><p>​    pem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。</p>\n<h1 id=\"生成-pem的方法\"><a href=\"#生成-pem的方法\" class=\"headerlink\" title=\"生成.pem的方法\"></a>生成.pem的方法</h1><p>​    生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。</p>\n<h2 id=\"分别生成\"><a href=\"#分别生成\" class=\"headerlink\" title=\"分别生成\"></a>分别生成</h2><h3 id=\"生成cert文件\"><a href=\"#生成cert文件\" class=\"headerlink\" title=\"生成cert文件\"></a>生成cert文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bedbdb.png\" alt=\"F9EE8275-559C-496A-8B9D-57E6C0DD2308.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png\" alt=\"C4B31488-5045-44C0-AE65-532E13E210B5.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a5cf94.png\" alt=\"8CADA519-4E76-4242-A40F-58A6FF9BA487.png\"></p>\n<h3 id=\"生成key文件\"><a href=\"#生成key文件\" class=\"headerlink\" title=\"生成key文件\"></a>生成key文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bd197e.png\" alt=\"3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a4926e.png\" alt=\"5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a30943.png\" alt=\"1C5B5045-8DC1-4A7F-A822-B8A76549A535.png\"></p>\n<h3 id=\"生成cert-pem文件​\"><a href=\"#生成cert-pem文件​\" class=\"headerlink\" title=\"生成cert pem文件​\"></a>生成cert pem文件​</h3><p>​    将apns-dev-cert.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成key-pem文件\"><a href=\"#生成key-pem文件\" class=\"headerlink\" title=\"生成key pem文件\"></a>生成key pem文件</h3><p>​    将apns-dev-key.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12</span><br></pre></td></tr></table></figure>\n\n<p>​    移除key pem的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in apns-dev-key.pem -out apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合成推送需要的pem文件\"><a href=\"#合成推送需要的pem文件\" class=\"headerlink\" title=\"合成推送需要的pem文件\"></a>合成推送需要的pem文件</h3><p>​    将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat apns-dev-cert.pem apns-dev-key.pem &gt; apns-dev.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试pem文\"><a href=\"#测试pem文\" class=\"headerlink\" title=\"测试pem文\"></a>测试pem文</h3><p>在终端测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>终端最后显示以下内容，表示配置pem文件成功，</p>\n<p>Key-Arg   : None</p>\n<p>Start Time: 1467854873</p>\n<p>Timeout   : 300 (sec)</p>\n<p>Verify return code: 0 (ok)</p>\n<h2 id=\"直接生成\"><a href=\"#直接生成\" class=\"headerlink\" title=\"直接生成\"></a>直接生成</h2><p>​    <strong>同时</strong>选中cert和key,导出一份p12文件。</p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96ed3b56.png\" alt=\"QQ20190116-102210@2x.png\"></p>\n<p>​    将p12文件转化成后台需要的pem证书.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>​    平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。</p>\n<p><a href=\"https://github.com/KnuffApp/Knuff\" target=\"_blank\" rel=\"noopener\"><em>Knuff</em></a></p>\n<p><a href=\"https://github.com/shaojiankui/SmartPush\" target=\"_blank\" rel=\"noopener\"><em>SmartPush</em></a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/p/cc952ea07a08\" target=\"_blank\" rel=\"noopener\">iOS推送证书生成pem文件（详细生成过程）</a></p>\n<p><a href=\"https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification\" target=\"_blank\" rel=\"noopener\">Generate .pem file Used to setup Apple Push Notification</a></p>\n"},{"title":"风景","date":"2018-03-28T14:46:49.000Z","_content":"\n![](http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg)\n\n![Caption](http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg)\n\n![](http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg)\n","source":"_posts/imags.md","raw":"---\ntitle: 风景\ndate: 2018-3-28 22:46:49\ntag: 旅行\ncategories: 风景\n---\n\n![](http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg)\n\n![Caption](http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg)\n\n![](http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg)\n","slug":"imags","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a5y000q6r36r9dwrrcj","content":"<p><img src=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\" alt></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\" alt=\"Caption\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\" alt></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\" alt=\"Caption\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\" alt></p>\n"},{"title":"服务端部署shadowsocks","date":"2019-11-14T06:09:01.000Z","_content":"\n#### 前言\n\n​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。\n\n#### 安装shadowsocks服务\n\n​      话不多说，直接进入正题。\n\n##### 安装pip\n\n​      如果你的操作系统是Centos，可以使用以下命令:\n\n   ```python\nyum install python-setuptools && easy_install pip\n   ```\n\n​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :\n\n```python\napt-get install python-pip\n```\n\n#####  安装shadowsocks\n\n```python\npip install shadowsocks\n```\n\n##### 配置**shadowsocks**\n\n在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 *mkdir /etc/shadowsocks* 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：\n\n```sh\n{\n\n\"server\":\"0.0.0.0\",\n\n\"server_port\":1234,\n\n\"local_address\":\"127.0.0.1\",\n\n\"local_port\":1080,\n\"password\":\"******\",\n\n\"timeout\":300,\n\n\"method\":\"aes-256-cfb\",\n\n\"fast_open\":false,\n\n\"workers\": 1\n\n}\n```\n\n主要参数说明\n\n```sh\n{\n\"server\":\"\",     ##服务器ip地址\n\"server_port\":1234,  ##代理端口\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080, ##本地监听端口\n\"password\":\"******\",   ##连接密码\n\"timeout\":300,\n\"method\":\"aes-256-cfb\", ##加密方式\n\"dast_open\":false\n}\n```\n\n##### shadowsocks的启动与关闭\n\n- 使用 *ssserver -c /etc/shadowsocks/config.json -d start* 命令启动\n- 使用 *netstat -tunlp* 命令查看\n- 使用*ssserver -c /etc/shadowsocks/config.json -d stop*命令停止\n\n##### 连接shadowsocks\n\n​    下载一个shadowsocks的客户端(mac版本):[shadowsocks](https://github.com/shadowsocks/ShadowsocksX-NG/releases/)\n\n​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可\n\n![image-20191114143926410](https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg)\n\n","source":"_posts/在服务器上部署shadowsocks服务.md","raw":"---\ntitle: 服务端部署shadowsocks\ndate: 2019-11-14 14:09:01\ntag: 网络\ncategories: 工具\n---\n\n#### 前言\n\n​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。\n\n#### 安装shadowsocks服务\n\n​      话不多说，直接进入正题。\n\n##### 安装pip\n\n​      如果你的操作系统是Centos，可以使用以下命令:\n\n   ```python\nyum install python-setuptools && easy_install pip\n   ```\n\n​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :\n\n```python\napt-get install python-pip\n```\n\n#####  安装shadowsocks\n\n```python\npip install shadowsocks\n```\n\n##### 配置**shadowsocks**\n\n在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 *mkdir /etc/shadowsocks* 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：\n\n```sh\n{\n\n\"server\":\"0.0.0.0\",\n\n\"server_port\":1234,\n\n\"local_address\":\"127.0.0.1\",\n\n\"local_port\":1080,\n\"password\":\"******\",\n\n\"timeout\":300,\n\n\"method\":\"aes-256-cfb\",\n\n\"fast_open\":false,\n\n\"workers\": 1\n\n}\n```\n\n主要参数说明\n\n```sh\n{\n\"server\":\"\",     ##服务器ip地址\n\"server_port\":1234,  ##代理端口\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080, ##本地监听端口\n\"password\":\"******\",   ##连接密码\n\"timeout\":300,\n\"method\":\"aes-256-cfb\", ##加密方式\n\"dast_open\":false\n}\n```\n\n##### shadowsocks的启动与关闭\n\n- 使用 *ssserver -c /etc/shadowsocks/config.json -d start* 命令启动\n- 使用 *netstat -tunlp* 命令查看\n- 使用*ssserver -c /etc/shadowsocks/config.json -d stop*命令停止\n\n##### 连接shadowsocks\n\n​    下载一个shadowsocks的客户端(mac版本):[shadowsocks](https://github.com/shadowsocks/ShadowsocksX-NG/releases/)\n\n​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可\n\n![image-20191114143926410](https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg)\n\n","slug":"在服务器上部署shadowsocks服务","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a60000s6r36rpanptdx","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。</p>\n<h4 id=\"安装shadowsocks服务\"><a href=\"#安装shadowsocks服务\" class=\"headerlink\" title=\"安装shadowsocks服务\"></a>安装shadowsocks服务</h4><p>​      话不多说，直接进入正题。</p>\n<h5 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h5><p>​      如果你的操作系统是Centos，可以使用以下命令:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置<strong>shadowsocks</strong></h5><p>在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 <em>mkdir /etc/shadowsocks</em> 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fast_open\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"workers\"</span>: 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要参数说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"\"</span>,     <span class=\"comment\">##服务器ip地址</span></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,  <span class=\"comment\">##代理端口</span></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080, <span class=\"comment\">##本地监听端口</span></span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,   <span class=\"comment\">##连接密码</span></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>, <span class=\"comment\">##加密方式</span></span><br><span class=\"line\"><span class=\"string\">\"dast_open\"</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shadowsocks的启动与关闭\"><a href=\"#shadowsocks的启动与关闭\" class=\"headerlink\" title=\"shadowsocks的启动与关闭\"></a>shadowsocks的启动与关闭</h5><ul>\n<li>使用 <em>ssserver -c /etc/shadowsocks/config.json -d start</em> 命令启动</li>\n<li>使用 <em>netstat -tunlp</em> 命令查看</li>\n<li>使用<em>ssserver -c /etc/shadowsocks/config.json -d stop</em>命令停止</li>\n</ul>\n<h5 id=\"连接shadowsocks\"><a href=\"#连接shadowsocks\" class=\"headerlink\" title=\"连接shadowsocks\"></a>连接shadowsocks</h5><p>​    下载一个shadowsocks的客户端(mac版本):<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/\" target=\"_blank\" rel=\"noopener\">shadowsocks</a></p>\n<p>​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg\" alt=\"image-20191114143926410\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。</p>\n<h4 id=\"安装shadowsocks服务\"><a href=\"#安装shadowsocks服务\" class=\"headerlink\" title=\"安装shadowsocks服务\"></a>安装shadowsocks服务</h4><p>​      话不多说，直接进入正题。</p>\n<h5 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h5><p>​      如果你的操作系统是Centos，可以使用以下命令:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置<strong>shadowsocks</strong></h5><p>在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 <em>mkdir /etc/shadowsocks</em> 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fast_open\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"workers\"</span>: 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要参数说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"\"</span>,     <span class=\"comment\">##服务器ip地址</span></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,  <span class=\"comment\">##代理端口</span></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080, <span class=\"comment\">##本地监听端口</span></span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,   <span class=\"comment\">##连接密码</span></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>, <span class=\"comment\">##加密方式</span></span><br><span class=\"line\"><span class=\"string\">\"dast_open\"</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shadowsocks的启动与关闭\"><a href=\"#shadowsocks的启动与关闭\" class=\"headerlink\" title=\"shadowsocks的启动与关闭\"></a>shadowsocks的启动与关闭</h5><ul>\n<li>使用 <em>ssserver -c /etc/shadowsocks/config.json -d start</em> 命令启动</li>\n<li>使用 <em>netstat -tunlp</em> 命令查看</li>\n<li>使用<em>ssserver -c /etc/shadowsocks/config.json -d stop</em>命令停止</li>\n</ul>\n<h5 id=\"连接shadowsocks\"><a href=\"#连接shadowsocks\" class=\"headerlink\" title=\"连接shadowsocks\"></a>连接shadowsocks</h5><p>​    下载一个shadowsocks的客户端(mac版本):<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/\" target=\"_blank\" rel=\"noopener\">shadowsocks</a></p>\n<p>​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg\" alt=\"image-20191114143926410\"></p>\n"},{"title":"2018年度总结","date":"2018-12-29T08:52:59.000Z","_content":"\n​\t![图片](https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619)\n\n​\t前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。\n\n​\t本片文章主要分为三个部分:\n\n​\t1.今年的收获。\n\n​\t2.今年的遗憾。\n\n​\t3.明年的计划。\n\n# 今年的收获\n\n## 思想上的收获\n\n- 今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。\n\n## 生活娱乐上的收获\n\n- 王者荣耀上了王者(准确的说是25星)\n\n## 工作上的收获\n\n- 读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》\n\n# 今年的遗憾\n\n## 工作\n\n- 今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。\n\n## 生活\n\n1. 本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。\n2. 由于健身缺少计划，也没能坚持下去。\n\n# 明年的计划\n\n写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。\n\n## 生活\n\n![健身](https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n- 明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉\n- 王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。\n\n## 工作\n\n![读书](https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1)\n\n### 技术类书籍(4本+)\n\n- iOS面试之道（已完成）\n- Objective-C高级编程\n- 测试驱动的iOS开发\n- 图解HTTP\n\n### 非技术类书籍(3本+)\n\n+ 人类简史（已完成）\n+ 未来简史\n+ 微习惯（已完成）\n+ 三体\n+ 今日简史\n\n### 源码阅读\n\n- MBPogressHUD（已完成）\n- MJRefresh\n- Toast（已完成）\n- DZNEmptyDataSet（已完成）\n- SDWebImage\n- IDMPhotoBrowser\n- YYKit\n\n### 跨平台框架\n\n- 尝试一下ReactNative.\n\n### 学习基金\n\n- 成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）\n\n### Github\n\n+ 计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用\n\n### 博客(6篇+)\n\n+ 每两个月写一篇博客来总结自己\n\n","source":"_posts/年度总结.md","raw":"---\ntitle: 2018年度总结\ndate: 2018-12-29 16:52:59\ntag: 年度总结\ncategories: 学习笔记\n---\n\n​\t![图片](https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619)\n\n​\t前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。\n\n​\t本片文章主要分为三个部分:\n\n​\t1.今年的收获。\n\n​\t2.今年的遗憾。\n\n​\t3.明年的计划。\n\n# 今年的收获\n\n## 思想上的收获\n\n- 今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。\n\n## 生活娱乐上的收获\n\n- 王者荣耀上了王者(准确的说是25星)\n\n## 工作上的收获\n\n- 读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》\n\n# 今年的遗憾\n\n## 工作\n\n- 今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。\n\n## 生活\n\n1. 本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。\n2. 由于健身缺少计划，也没能坚持下去。\n\n# 明年的计划\n\n写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。\n\n## 生活\n\n![健身](https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n- 明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉\n- 王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。\n\n## 工作\n\n![读书](https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1)\n\n### 技术类书籍(4本+)\n\n- iOS面试之道（已完成）\n- Objective-C高级编程\n- 测试驱动的iOS开发\n- 图解HTTP\n\n### 非技术类书籍(3本+)\n\n+ 人类简史（已完成）\n+ 未来简史\n+ 微习惯（已完成）\n+ 三体\n+ 今日简史\n\n### 源码阅读\n\n- MBPogressHUD（已完成）\n- MJRefresh\n- Toast（已完成）\n- DZNEmptyDataSet（已完成）\n- SDWebImage\n- IDMPhotoBrowser\n- YYKit\n\n### 跨平台框架\n\n- 尝试一下ReactNative.\n\n### 学习基金\n\n- 成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）\n\n### Github\n\n+ 计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用\n\n### 博客(6篇+)\n\n+ 每两个月写一篇博客来总结自己\n\n","slug":"年度总结","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfu9a61000x6r36yejq6ftz","content":"<p>​    <img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619\" alt=\"图片\"></p>\n<p>​    前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。</p>\n<p>​    本片文章主要分为三个部分:</p>\n<p>​    1.今年的收获。</p>\n<p>​    2.今年的遗憾。</p>\n<p>​    3.明年的计划。</p>\n<h1 id=\"今年的收获\"><a href=\"#今年的收获\" class=\"headerlink\" title=\"今年的收获\"></a>今年的收获</h1><h2 id=\"思想上的收获\"><a href=\"#思想上的收获\" class=\"headerlink\" title=\"思想上的收获\"></a>思想上的收获</h2><ul>\n<li>今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。</li>\n</ul>\n<h2 id=\"生活娱乐上的收获\"><a href=\"#生活娱乐上的收获\" class=\"headerlink\" title=\"生活娱乐上的收获\"></a>生活娱乐上的收获</h2><ul>\n<li>王者荣耀上了王者(准确的说是25星)</li>\n</ul>\n<h2 id=\"工作上的收获\"><a href=\"#工作上的收获\" class=\"headerlink\" title=\"工作上的收获\"></a>工作上的收获</h2><ul>\n<li>读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》</li>\n</ul>\n<h1 id=\"今年的遗憾\"><a href=\"#今年的遗憾\" class=\"headerlink\" title=\"今年的遗憾\"></a>今年的遗憾</h1><h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li>今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。</li>\n</ul>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ol>\n<li>本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。</li>\n<li>由于健身缺少计划，也没能坚持下去。</li>\n</ol>\n<h1 id=\"明年的计划\"><a href=\"#明年的计划\" class=\"headerlink\" title=\"明年的计划\"></a>明年的计划</h1><p>写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。</p>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"健身\"></p>\n<ul>\n<li>明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉</li>\n<li>王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。</li>\n</ul>\n<h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"读书\"></p>\n<h3 id=\"技术类书籍-4本\"><a href=\"#技术类书籍-4本\" class=\"headerlink\" title=\"技术类书籍(4本+)\"></a>技术类书籍(4本+)</h3><ul>\n<li>iOS面试之道（已完成）</li>\n<li>Objective-C高级编程</li>\n<li>测试驱动的iOS开发</li>\n<li>图解HTTP</li>\n</ul>\n<h3 id=\"非技术类书籍-3本\"><a href=\"#非技术类书籍-3本\" class=\"headerlink\" title=\"非技术类书籍(3本+)\"></a>非技术类书籍(3本+)</h3><ul>\n<li>人类简史（已完成）</li>\n<li>未来简史</li>\n<li>微习惯（已完成）</li>\n<li>三体</li>\n<li>今日简史</li>\n</ul>\n<h3 id=\"源码阅读\"><a href=\"#源码阅读\" class=\"headerlink\" title=\"源码阅读\"></a>源码阅读</h3><ul>\n<li>MBPogressHUD（已完成）</li>\n<li>MJRefresh</li>\n<li>Toast（已完成）</li>\n<li>DZNEmptyDataSet（已完成）</li>\n<li>SDWebImage</li>\n<li>IDMPhotoBrowser</li>\n<li>YYKit</li>\n</ul>\n<h3 id=\"跨平台框架\"><a href=\"#跨平台框架\" class=\"headerlink\" title=\"跨平台框架\"></a>跨平台框架</h3><ul>\n<li>尝试一下ReactNative.</li>\n</ul>\n<h3 id=\"学习基金\"><a href=\"#学习基金\" class=\"headerlink\" title=\"学习基金\"></a>学习基金</h3><ul>\n<li>成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）</li>\n</ul>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><ul>\n<li>计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用</li>\n</ul>\n<h3 id=\"博客-6篇\"><a href=\"#博客-6篇\" class=\"headerlink\" title=\"博客(6篇+)\"></a>博客(6篇+)</h3><ul>\n<li>每两个月写一篇博客来总结自己</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>​    <img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619\" alt=\"图片\"></p>\n<p>​    前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。</p>\n<p>​    本片文章主要分为三个部分:</p>\n<p>​    1.今年的收获。</p>\n<p>​    2.今年的遗憾。</p>\n<p>​    3.明年的计划。</p>\n<h1 id=\"今年的收获\"><a href=\"#今年的收获\" class=\"headerlink\" title=\"今年的收获\"></a>今年的收获</h1><h2 id=\"思想上的收获\"><a href=\"#思想上的收获\" class=\"headerlink\" title=\"思想上的收获\"></a>思想上的收获</h2><ul>\n<li>今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。</li>\n</ul>\n<h2 id=\"生活娱乐上的收获\"><a href=\"#生活娱乐上的收获\" class=\"headerlink\" title=\"生活娱乐上的收获\"></a>生活娱乐上的收获</h2><ul>\n<li>王者荣耀上了王者(准确的说是25星)</li>\n</ul>\n<h2 id=\"工作上的收获\"><a href=\"#工作上的收获\" class=\"headerlink\" title=\"工作上的收获\"></a>工作上的收获</h2><ul>\n<li>读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》</li>\n</ul>\n<h1 id=\"今年的遗憾\"><a href=\"#今年的遗憾\" class=\"headerlink\" title=\"今年的遗憾\"></a>今年的遗憾</h1><h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li>今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。</li>\n</ul>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ol>\n<li>本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。</li>\n<li>由于健身缺少计划，也没能坚持下去。</li>\n</ol>\n<h1 id=\"明年的计划\"><a href=\"#明年的计划\" class=\"headerlink\" title=\"明年的计划\"></a>明年的计划</h1><p>写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。</p>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"健身\"></p>\n<ul>\n<li>明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉</li>\n<li>王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。</li>\n</ul>\n<h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"读书\"></p>\n<h3 id=\"技术类书籍-4本\"><a href=\"#技术类书籍-4本\" class=\"headerlink\" title=\"技术类书籍(4本+)\"></a>技术类书籍(4本+)</h3><ul>\n<li>iOS面试之道（已完成）</li>\n<li>Objective-C高级编程</li>\n<li>测试驱动的iOS开发</li>\n<li>图解HTTP</li>\n</ul>\n<h3 id=\"非技术类书籍-3本\"><a href=\"#非技术类书籍-3本\" class=\"headerlink\" title=\"非技术类书籍(3本+)\"></a>非技术类书籍(3本+)</h3><ul>\n<li>人类简史（已完成）</li>\n<li>未来简史</li>\n<li>微习惯（已完成）</li>\n<li>三体</li>\n<li>今日简史</li>\n</ul>\n<h3 id=\"源码阅读\"><a href=\"#源码阅读\" class=\"headerlink\" title=\"源码阅读\"></a>源码阅读</h3><ul>\n<li>MBPogressHUD（已完成）</li>\n<li>MJRefresh</li>\n<li>Toast（已完成）</li>\n<li>DZNEmptyDataSet（已完成）</li>\n<li>SDWebImage</li>\n<li>IDMPhotoBrowser</li>\n<li>YYKit</li>\n</ul>\n<h3 id=\"跨平台框架\"><a href=\"#跨平台框架\" class=\"headerlink\" title=\"跨平台框架\"></a>跨平台框架</h3><ul>\n<li>尝试一下ReactNative.</li>\n</ul>\n<h3 id=\"学习基金\"><a href=\"#学习基金\" class=\"headerlink\" title=\"学习基金\"></a>学习基金</h3><ul>\n<li>成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）</li>\n</ul>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><ul>\n<li>计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用</li>\n</ul>\n<h3 id=\"博客-6篇\"><a href=\"#博客-6篇\" class=\"headerlink\" title=\"博客(6篇+)\"></a>博客(6篇+)</h3><ul>\n<li>每两个月写一篇博客来总结自己</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcfu9a5200006r36umcff7kb","category_id":"ckcfu9a5c00046r36x4dxqoty","_id":"ckcfu9a5q000g6r363sobsfao"},{"post_id":"ckcfu9a5900026r36mzq396qk","category_id":"ckcfu9a5c00046r36x4dxqoty","_id":"ckcfu9a5x000m6r36xv0eqjlj"},{"post_id":"ckcfu9a5u000j6r36o64a7lwe","category_id":"ckcfu9a5c00046r36x4dxqoty","_id":"ckcfu9a60000t6r36zfgk2y9p"},{"post_id":"ckcfu9a5e00066r36j84p5l24","category_id":"ckcfu9a5q000f6r36x9qe9yro","_id":"ckcfu9a62000y6r364v6y1ka5"},{"post_id":"ckcfu9a5f00076r36khbqopua","category_id":"ckcfu9a5y000o6r36bmj80mzy","_id":"ckcfu9a6300116r366hruvbnd"},{"post_id":"ckcfu9a61000x6r36yejq6ftz","category_id":"ckcfu9a5y000o6r36bmj80mzy","_id":"ckcfu9a6400156r36me951c2l"},{"post_id":"ckcfu9a5g00086r36ijzksfdy","category_id":"ckcfu9a5y000o6r36bmj80mzy","_id":"ckcfu9a6500176r3615e028s5"},{"post_id":"ckcfu9a5k000c6r366xnwakxg","category_id":"ckcfu9a5q000f6r36x9qe9yro","_id":"ckcfu9a66001b6r36p55byfiy"},{"post_id":"ckcfu9a5n000e6r3661k9jusm","category_id":"ckcfu9a5y000o6r36bmj80mzy","_id":"ckcfu9a67001e6r36xeuwx3a7"},{"post_id":"ckcfu9a5w000l6r365ve41us7","category_id":"ckcfu9a5y000o6r36bmj80mzy","_id":"ckcfu9a67001f6r36cyyq2siu"},{"post_id":"ckcfu9a5y000q6r36r9dwrrcj","category_id":"ckcfu9a66001d6r36b3rt0ltz","_id":"ckcfu9a67001h6r36voox6qg8"},{"post_id":"ckcfu9a60000s6r36rpanptdx","category_id":"ckcfu9a67001g6r36o4sb4fte","_id":"ckcfu9a68001i6r36w0muwggg"}],"PostTag":[{"post_id":"ckcfu9a5200006r36umcff7kb","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5j000b6r36dqlp1y21"},{"post_id":"ckcfu9a5g00086r36ijzksfdy","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5l000d6r36h8ndyspf"},{"post_id":"ckcfu9a5k000c6r366xnwakxg","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5s000i6r362zhkhpxl"},{"post_id":"ckcfu9a5900026r36mzq396qk","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5w000k6r36b35aijoa"},{"post_id":"ckcfu9a5n000e6r3661k9jusm","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5y000p6r36kubcaxwk"},{"post_id":"ckcfu9a5u000j6r36o64a7lwe","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a5z000r6r368qlnwmjv"},{"post_id":"ckcfu9a5e00066r36j84p5l24","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a61000w6r3656u3niqy"},{"post_id":"ckcfu9a5w000l6r365ve41us7","tag_id":"ckcfu9a5d00056r36066itq49","_id":"ckcfu9a63000z6r36k5nd5q5x"},{"post_id":"ckcfu9a5f00076r36khbqopua","tag_id":"ckcfu9a5x000n6r36hk9fspwb","_id":"ckcfu9a6400126r36l8vhmm6x"},{"post_id":"ckcfu9a5y000q6r36r9dwrrcj","tag_id":"ckcfu9a61000v6r36paxiakrc","_id":"ckcfu9a6400146r362rkl0cbb"},{"post_id":"ckcfu9a60000s6r36rpanptdx","tag_id":"ckcfu9a6400136r36858vi0ym","_id":"ckcfu9a6500196r36j6z4j8tp"},{"post_id":"ckcfu9a61000x6r36yejq6ftz","tag_id":"ckcfu9a6500186r36ywvfmbtv","_id":"ckcfu9a66001c6r363cub7hq0"}],"Tag":[{"name":"iOS","_id":"ckcfu9a5d00056r36066itq49"},{"name":"学习笔记","_id":"ckcfu9a5x000n6r36hk9fspwb"},{"name":"旅行","_id":"ckcfu9a61000v6r36paxiakrc"},{"name":"网络","_id":"ckcfu9a6400136r36858vi0ym"},{"name":"年度总结","_id":"ckcfu9a6500186r36ywvfmbtv"}]}}