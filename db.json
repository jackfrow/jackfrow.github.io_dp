{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1565247058000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1565247058000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1565247058000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1565247058000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1565247058000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1565247058000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1565247058000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1565247058000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1565247058000},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1565247058000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1565247058000},{"_id":"themes/next/_config.yml","hash":"23514f5aa06f1b93ae41a82edb9bdf384706ce20","modified":1565248220000},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1565247058000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1565247058000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1565247058000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1565247058000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1594359655414},{"_id":"source/_posts/APP冷启动.md","hash":"a618a1605e5bdb9962f3796f4e128632a4c99c56","modified":1594353425106},{"_id":"source/_posts/AVFoundation总结.md","hash":"f60a48216fff50bc337a00f7b768d0be1dea3a1e","modified":1594353425106},{"_id":"source/_posts/MBProgressHUD源码解析.md","hash":"bdc5a16670d151ea197a00f94d7028601bc8b2fb","modified":1594353425107},{"_id":"source/_posts/OC对象本质.md","hash":"1307151c47b266b1a0bbeaab614016b82df74691","modified":1594353534364},{"_id":"source/_posts/Runtime总结.md","hash":"0ababb9e2ef65748dfa1c00a1e33093709de5db5","modified":1594353425107},{"_id":"source/_posts/TPKeyboardAvoiding源码解析.md","hash":"7c6a5539eeb2256c9c66b9551c80ab4ec6c79b44","modified":1594353425107},{"_id":"source/_posts/cocoapods.md","hash":"1a22834c47b71dd25d5a7c42c45512fa1a4e4ceb","modified":1594353425107},{"_id":"source/_posts/iOS中常用 的三方库.md","hash":"64da3a93b7836198845b72419c752ddeb2c3344e","modified":1594353425107},{"_id":"source/_posts/iOS生成.pem推送证书.md","hash":"e5e771e72eaa90a26808712964630edbdf73b3c5","modified":1594353425108},{"_id":"source/_posts/imags.md","hash":"e05712d6deaa47051452f120214afb2460eb75e1","modified":1594353425108},{"_id":"source/_posts/在服务器上部署shadowsocks服务.md","hash":"2123c677695411e611e0f956af41e5bdd26be3b8","modified":1594353425108},{"_id":"source/_posts/年度总结.md","hash":"3b31353d7667ec1cbfc15580e50a0f7ec8346756","modified":1594353425108},{"_id":"source/categories/index.md","hash":"6734661e2fdde22cc31a6c723ac2dd35dd4c531a","modified":1594353425109},{"_id":"source/tags/index.md","hash":"60f0385ca91dddbeee932ae45c9f130f47cf7fe6","modified":1594353425109},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1565247058000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1565247058000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1565247053000},{"_id":"themes/next/.git/index","hash":"a7465c04674546726335af6df9e2bc6227fbc6d0","modified":1594360755643},{"_id":"themes/next/.git/packed-refs","hash":"ae421c3c59b504716340fe85ae852ebd4aed1b8d","modified":1565247058000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1565247058000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1565247058000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1565247058000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1565247058000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1565247058000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1565247058000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1565247058000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1565247058000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1565247058000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1565247058000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1565247058000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1565247058000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1565247058000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1565247058000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1565247058000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1565247058000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1565247058000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1565247058000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1565247058000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1565247058000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1565247058000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1565247058000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1565247058000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1565247058000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1565247058000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1565247058000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1565247058000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1565247058000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1565247058000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1565247058000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1565247058000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1565247058000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1565247058000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1565247053000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1565247053000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1565247053000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1565247053000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1565247053000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1565247053000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1565247053000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1565247053000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1565247053000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1565247053000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1565247053000},{"_id":"themes/next/.git/logs/HEAD","hash":"641c3ccc56667c1c7ae71cc9a5402b341fd35a91","modified":1565247058000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1565247058000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1565247058000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1565247058000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1565247058000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1565247058000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1565247058000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1565247058000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1565247058000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1565247058000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1565247058000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1565247058000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1565247058000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1565247058000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1565247058000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1565247058000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1565247058000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1565247058000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1565247058000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1565247058000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1565247058000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1565247058000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1565247058000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1565247058000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1565247058000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1565247058000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1565247058000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1565247058000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1565247058000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1565247058000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1565247058000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1565247058000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1565247058000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1565247058000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1565247058000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1565247058000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1565247058000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1565247058000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1565247058000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1565247058000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1565247058000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1565247058000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1565247058000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1565247058000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1565247058000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1565247058000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1565247058000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1565247058000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565247058000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1565247058000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565247058000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1565247058000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1565247058000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1565247058000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565247058000},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1565247058000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1565247058000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1565247058000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1565247058000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1565247058000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1565247058000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1565247058000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1565247058000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1565247058000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1565247058000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1565247058000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1565247058000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1565247058000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1565247058000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1565247058000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1565247058000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1565247058000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1565247058000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1565247058000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1565247058000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1565247058000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1565247058000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1565247058000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1565247058000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1565247058000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1565247058000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1565247058000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1565247058000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1565247058000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1565247058000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1565247058000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1565247058000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1565247058000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1565247058000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1565247058000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1565247058000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1565247058000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1565247058000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1565247058000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1565247058000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1565247058000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1565247058000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1565247058000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1565247058000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1565247058000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1565247058000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1565247058000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565247058000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565247058000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"641c3ccc56667c1c7ae71cc9a5402b341fd35a91","modified":1565247058000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1565247058000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1565247058000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1565247058000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1565247058000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1565247058000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1565247058000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565247058000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1565247058000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565247058000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565247058000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"641c3ccc56667c1c7ae71cc9a5402b341fd35a91","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1565247058000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1565247058000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1565247058000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565247058000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1565247058000},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.idx","hash":"6507e0cdf986f371d6d304387f789444a7663c56","modified":1565247058000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1565247058000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1565247058000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1565247058000},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.pack","hash":"2ab7a76d496119b851249983db6b500a45c77c47","modified":1565247058000},{"_id":"public/categories/index.html","hash":"7d993a93d026a83f298800ccefe72facb5605553","modified":1594361054230},{"_id":"public/tags/index.html","hash":"8a81168c95b1c2686f8acb942c6f221a10e60013","modified":1594361054230},{"_id":"public/2020/07/10/OC对象本质/index.html","hash":"f06956dcfbd7d4af0d4332f66b0e168f5871cda5","modified":1594361054231},{"_id":"public/2019/10/31/Runtime总结/index.html","hash":"8d7458c0ff552251dc24d043927a36e9791ee059","modified":1594361054231},{"_id":"public/2019/08/08/iOS中常用 的三方库/index.html","hash":"fdeb38a57189d5325e11f1220b103e0662dbfe3d","modified":1594361054231},{"_id":"public/2018/03/28/imags/index.html","hash":"16e3951de93e932209fcc00c3f9da7944b5680b4","modified":1594361054231},{"_id":"public/archives/page/2/index.html","hash":"56362902b396d4258e67bd843b5b6b4b110f7cc8","modified":1594361054231},{"_id":"public/archives/2018/index.html","hash":"3b984f1bf26ed187dbcb6b1f3c9e93c80aa23647","modified":1594361054231},{"_id":"public/archives/2018/03/index.html","hash":"71dbe0c3d08962bcc09df79d1ef830e1b886fec3","modified":1594361054231},{"_id":"public/archives/2018/04/index.html","hash":"4c7b6ec39212b9817a0b21e9372596ca7e583ea0","modified":1594361054231},{"_id":"public/archives/2018/12/index.html","hash":"3fcac0ce3d68346c89c59438ce1e43bb1c095483","modified":1594361054231},{"_id":"public/archives/2019/index.html","hash":"fce54fdde35eef0d163542386e3dab52a4b9cd5d","modified":1594361054231},{"_id":"public/archives/2019/01/index.html","hash":"361db23eb5ce4eff46406ac6250daa65e000435d","modified":1594361054231},{"_id":"public/archives/2019/05/index.html","hash":"b86a23c697ea0fa56c25b00511c6137f6b595fd2","modified":1594361054231},{"_id":"public/archives/2019/08/index.html","hash":"a8194f75ababc9cd3760e31174b2f438b2e815f5","modified":1594361054231},{"_id":"public/archives/2019/09/index.html","hash":"95d0b328b14c18aef4c0be5ba9e16d00366db8bc","modified":1594361054231},{"_id":"public/archives/2019/10/index.html","hash":"a199edd7552963f5d0cdf0c746dc8ef428965f61","modified":1594361054231},{"_id":"public/archives/2019/11/index.html","hash":"ccf3807a7a222bc482b90c2caef0cfb1e63da8f1","modified":1594361054231},{"_id":"public/archives/2020/index.html","hash":"4bf1344103b89254f15a9ab162eacf5ce846bc94","modified":1594361054231},{"_id":"public/archives/2020/07/index.html","hash":"49b43736996de77eb2d64964a9aeec9469beb2db","modified":1594361054232},{"_id":"public/categories/学习总结/index.html","hash":"a80479aed851f92c8a9f42423301e6321033ef2b","modified":1594361054232},{"_id":"public/categories/源码阅读/index.html","hash":"f7f9e704b60d30c09ab1ab455e5499a7eb9718a8","modified":1594361054232},{"_id":"public/categories/学习笔记/index.html","hash":"802cc2afb8bcf75badb13d01fb51a233f226ec8f","modified":1594361054232},{"_id":"public/categories/风景/index.html","hash":"195d15ced3cf4e59cf436c5fd06f8e564751a149","modified":1594361054232},{"_id":"public/categories/工具/index.html","hash":"69deff0530b60a389ba2789f6450bdce52b8aab0","modified":1594361054232},{"_id":"public/tags/iOS/index.html","hash":"0c6a7044ecfade560f3bb09880dbe4da2710e96f","modified":1594361054232},{"_id":"public/tags/学习笔记/index.html","hash":"a529b864c526dcfffbf240244f8fa73cc322e04d","modified":1594361054232},{"_id":"public/tags/旅行/index.html","hash":"59fa12ebdaa05fa3f7836ea7e83e9562e62984e8","modified":1594361054232},{"_id":"public/tags/网络/index.html","hash":"866d1281a5a217841045b151441b861911875020","modified":1594361054232},{"_id":"public/tags/年度总结/index.html","hash":"5d9bf2fdb2bce3612874eb731d3f731ca1f11776","modified":1594361054232},{"_id":"public/2019/11/14/在服务器上部署shadowsocks服务/index.html","hash":"5013d4314d9e3d8824eb186074c0f6e0e487220b","modified":1594361054232},{"_id":"public/2019/09/09/AVFoundation总结/index.html","hash":"3538e8731b1f0de8e6c20e01669fd83dca03f1fe","modified":1594361054232},{"_id":"public/2019/08/23/APP冷启动/index.html","hash":"45d795fc437d261240176414abd7c70b1ec11e3a","modified":1594361054232},{"_id":"public/2019/08/30/TPKeyboardAvoiding源码解析/index.html","hash":"ace4ae3a8ce9be354a7941bc5b85b037f9acd335","modified":1594361054232},{"_id":"public/2019/05/23/MBProgressHUD源码解析/index.html","hash":"6d7427951931b0dbdc4fe1ebdbbfbf058b468fef","modified":1594361054232},{"_id":"public/2019/01/15/iOS生成.pem推送证书/index.html","hash":"569fd7b0053199f658c6cd5c957a08d9ba4a926e","modified":1594361054232},{"_id":"public/2018/12/29/年度总结/index.html","hash":"2865dc5d35a41c3d2421b98273843c0453f1dc4f","modified":1594361054232},{"_id":"public/2018/04/09/cocoapods/index.html","hash":"603f7f5e3d8969fe74d0b2e1ab4d258dd813f845","modified":1594361054232},{"_id":"public/archives/index.html","hash":"f462c36aadd0835fe138caf07341515e54d2942a","modified":1594361054232},{"_id":"public/index.html","hash":"faa0e0518046ee3a3bb384ba4faa3af9f61b18e7","modified":1594361054232},{"_id":"public/page/2/index.html","hash":"141c4a97e0834d357e13dd76a8527923974d0ab7","modified":1594361054233},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1594361054237},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1594361054237},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1594361054237},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1594361054237},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1594361054237},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1594361054237},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1594361054237},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1594361054237},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1594361054237},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1594361054237},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1594361054237},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1594361054238},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594361054238},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1594361054238},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594361054238},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1594361054238},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1594361054238},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1594361054238},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1594361054238},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1594361054238},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594361054238},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594361054238},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594361054238},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594361054238},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594361054238},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594361054238},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1594361054238},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1594361054238},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1594361054238},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1594361054238},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1594361054238},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1594361054238},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594361054238},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594361054632},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594361054639},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1594361054649},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1594361054649},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1594361054649},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1594361054649},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1594361054649},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1594361054649},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1594361054649},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1594361054649},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1594361054649},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1594361054649},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1594361054649},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1594361054649},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1594361054649},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1594361054649},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1594361054650},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1594361054650},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1594361054650},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1594361054650},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1594361054650},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1594361054650},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1594361054650},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1594361054650},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1594361054650},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1594361054651},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1594361054651},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1594361054651},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1594361054651},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1594361054651},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1594361054651},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1594361054651},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1594361054651},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1594361054652},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1594361054652},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1594361054652},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1594361054652},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1594361054652},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1594361054652},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1594361054652},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1594361054652},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1594361054652},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1594361054652},{"_id":"public/css/main.css","hash":"525e64fb44879eb63faa96afd61851188c6715cc","modified":1594361054652},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1594361054652},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1594361054652},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1594361054652},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1594361054652},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1594361054652},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1594361054652},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1594361054652},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1594361054652},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1594361054652},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1594361054653},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1594361054653},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1594361054653},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1594361054653},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1594361054653},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1594361054653},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1594361054653},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1594361054653},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1594361054653},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1594361054653},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1594361054653},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1594361054654},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1594361054654},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594361054655},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1594361054692}],"Category":[{"name":"学习总结","_id":"ckcfteldv00048h36fgucg2c0"},{"name":"源码阅读","_id":"ckcftele5000f8h36sa4hnu93"},{"name":"学习笔记","_id":"ckcfteleb000o8h36fz4hdy5u"},{"name":"风景","_id":"ckcftelej001d8h361ohv22aq"},{"name":"工具","_id":"ckcftelek001g8h36ebdvygsn"}],"Data":[],"Page":[{"title":"categories","date":"2019-08-08T07:01:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-08 15:01:54\ntype: \"categories\"\n---\n","updated":"2020-07-10T03:57:05.109Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckcfteldr00018h367xhn0rcw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-08T07:04:05.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-08 15:04:05\ntype: tags\n---\n\n","updated":"2020-07-10T03:57:05.109Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckcfteldu00038h36s1d8sw4s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"APP冷启动","date":"2019-08-23T03:21:40.000Z","_content":"\n#### 什么是APP冷启动\n\nAPP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。\n\n#### 前言\n\n网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）\n\n#### APP启动阶段\n\nAPP启动阶段主要分为两个阶段：\n\n1.main()函数执行之前\n\n2.main()函数之后\n\n#### main函数执行之前\n\n在main()函数执行之前，系统主要会做下面几件事情：\n\n1. 加载可执行文件（APP的.o文件的集合）\n2. 加载动态链接库,进行rebase指针调整和bing符号绑定\n3. Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等\n4. load()方法初始化\n\n#### 优化方案\n\n1. 对多个非系统动态库进行合并（最多支持6个）\n2. 减少load()方法中的耗时操作\n\n#### main()函数之后\n\nmain()函数指的是didFinishLaunchingWithOptions方法中执行的操作。\n\n#### 优化方案\n\n1. 将非首屏渲染必须的操作异步执行。\n2. 如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。\n\n#### 检测手段\n\n1. TimerProfile :使用指导:[Instruments Tutorial with Swift: Getting Started](https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started)\n\n2. 打点测试。","source":"_posts/APP冷启动.md","raw":"---\ntitle: APP冷启动\ndate: 2019-8-23 11:21:40\ntag: iOS\ncategories: 学习总结\n---\n\n#### 什么是APP冷启动\n\nAPP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。\n\n#### 前言\n\n网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）\n\n#### APP启动阶段\n\nAPP启动阶段主要分为两个阶段：\n\n1.main()函数执行之前\n\n2.main()函数之后\n\n#### main函数执行之前\n\n在main()函数执行之前，系统主要会做下面几件事情：\n\n1. 加载可执行文件（APP的.o文件的集合）\n2. 加载动态链接库,进行rebase指针调整和bing符号绑定\n3. Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等\n4. load()方法初始化\n\n#### 优化方案\n\n1. 对多个非系统动态库进行合并（最多支持6个）\n2. 减少load()方法中的耗时操作\n\n#### main()函数之后\n\nmain()函数指的是didFinishLaunchingWithOptions方法中执行的操作。\n\n#### 优化方案\n\n1. 将非首屏渲染必须的操作异步执行。\n2. 如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。\n\n#### 检测手段\n\n1. TimerProfile :使用指导:[Instruments Tutorial with Swift: Getting Started](https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started)\n\n2. 打点测试。","slug":"APP冷启动","published":1,"updated":"2020-07-10T03:57:05.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfteldo00008h36i4la1nz2","content":"<h4 id=\"什么是APP冷启动\"><a href=\"#什么是APP冷启动\" class=\"headerlink\" title=\"什么是APP冷启动\"></a>什么是APP冷启动</h4><p>APP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）</p>\n<h4 id=\"APP启动阶段\"><a href=\"#APP启动阶段\" class=\"headerlink\" title=\"APP启动阶段\"></a>APP启动阶段</h4><p>APP启动阶段主要分为两个阶段：</p>\n<p>1.main()函数执行之前</p>\n<p>2.main()函数之后</p>\n<h4 id=\"main函数执行之前\"><a href=\"#main函数执行之前\" class=\"headerlink\" title=\"main函数执行之前\"></a>main函数执行之前</h4><p>在main()函数执行之前，系统主要会做下面几件事情：</p>\n<ol>\n<li>加载可执行文件（APP的.o文件的集合）</li>\n<li>加载动态链接库,进行rebase指针调整和bing符号绑定</li>\n<li>Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等</li>\n<li>load()方法初始化</li>\n</ol>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>对多个非系统动态库进行合并（最多支持6个）</li>\n<li>减少load()方法中的耗时操作</li>\n</ol>\n<h4 id=\"main-函数之后\"><a href=\"#main-函数之后\" class=\"headerlink\" title=\"main()函数之后\"></a>main()函数之后</h4><p>main()函数指的是didFinishLaunchingWithOptions方法中执行的操作。</p>\n<h4 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>将非首屏渲染必须的操作异步执行。</li>\n<li>如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。</li>\n</ol>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><ol>\n<li><p>TimerProfile :使用指导:<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started\" target=\"_blank\" rel=\"noopener\">Instruments Tutorial with Swift: Getting Started</a></p>\n</li>\n<li><p>打点测试。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是APP冷启动\"><a href=\"#什么是APP冷启动\" class=\"headerlink\" title=\"什么是APP冷启动\"></a>什么是APP冷启动</h4><p>APP冷启动是指，APP点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的过程。这是一次完整的启动过程。APP冷启动时间的长短是衡量一个APP好坏的重要标志。</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>网上好多文章完全就是乱扯，抄过去抄过来，在didFinishLaunchingWithOptions方法完成之前，你的APP怎么可能完成首屏渲染，吐槽一下。（手机运行会做一定程度的优化，并不会完全等didFinishLaunchingWithOptions执行完再去渲染首屏界面）</p>\n<h4 id=\"APP启动阶段\"><a href=\"#APP启动阶段\" class=\"headerlink\" title=\"APP启动阶段\"></a>APP启动阶段</h4><p>APP启动阶段主要分为两个阶段：</p>\n<p>1.main()函数执行之前</p>\n<p>2.main()函数之后</p>\n<h4 id=\"main函数执行之前\"><a href=\"#main函数执行之前\" class=\"headerlink\" title=\"main函数执行之前\"></a>main函数执行之前</h4><p>在main()函数执行之前，系统主要会做下面几件事情：</p>\n<ol>\n<li>加载可执行文件（APP的.o文件的集合）</li>\n<li>加载动态链接库,进行rebase指针调整和bing符号绑定</li>\n<li>Objc运行时的初始化处理，包括 Objc 相关类的注册、category 注册、selector唯一性检查等</li>\n<li>load()方法初始化</li>\n</ol>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>对多个非系统动态库进行合并（最多支持6个）</li>\n<li>减少load()方法中的耗时操作</li>\n</ol>\n<h4 id=\"main-函数之后\"><a href=\"#main-函数之后\" class=\"headerlink\" title=\"main()函数之后\"></a>main()函数之后</h4><p>main()函数指的是didFinishLaunchingWithOptions方法中执行的操作。</p>\n<h4 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><ol>\n<li>将非首屏渲染必须的操作异步执行。</li>\n<li>如果有广告页面，可以考虑将耗时操作放广告页中执行一半(或者全部)，在首屏中再执行剩下的一半。</li>\n</ol>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><ol>\n<li><p>TimerProfile :使用指导:<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.raywenderlich.com%2F397-instruments-tutorial-with-swift-getting-started\" target=\"_blank\" rel=\"noopener\">Instruments Tutorial with Swift: Getting Started</a></p>\n</li>\n<li><p>打点测试。</p>\n</li>\n</ol>\n"},{"title":"AVFoundation总结","date":"2019-09-09T02:42:49.000Z","_content":"\n#### 框架简介\n\n> AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。\n\n#### 概念介绍\n\n##### AVAsset\n\n> AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。\n\n```swift\n  let asset = AVAsset(url: url)\n```\n\n##### AVPlayer\n\n> An object that provides the interface to control the player’s transport behavior.\n\n```swift\nlet player = AVPlayer(playerItem: <#T##AVPlayerItem?#>)//初始化\n player.seek(to: CMTime.zero) //跳转到播放位置\n player.play()//开始播放\n player.pause()//暂停\n```\n\n##### AVPlayerItem\n\n> 该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。\n\n```swift\nlet playItem = AVPlayerItem(asset: <#T##AVAsset#>)\n```\n\n##### AVPlayerLayer\n\n> 用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.\n\n##### AVAssetTrack\n\n> AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理\n\n```swift\n  //获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)\n  guard let assetTrack = asset.tracks(withMediaType: .video).first else {continue }\n```\n\n多条轨道与显示的关系：\n\n![DC9D6C74-F6D8-4D71-8456-7673C2F6353F](https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg)\n\n##### AVVideoCompositionInstruction\n\n> 可以用作每段处理视屏的指令。\n\n##### AVVideoCompositionLayerInstruction\n\n> 用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。\n\n##### AVAssetExportSession\n\n> 针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。\n\n```swift\n    // MARK: - 导出合成的视频\n    func export(){\n        let session = AVAssetExportSession.init(asset: compostion.copy() as! AVAsset, presetName: AVAssetExportPreset1920x1080)\n        \n        session?.outputURL = JRVideoEditor.createTemplateFileURL()\n        session?.outputFileType = AVFileType.mp4\n        session?.videoComposition = videoComposition\n        \n        session?.exportAsynchronously(completionHandler: {[weak self] in\n            guard let strongSelf = self else {return}\n            let status = session?.status\n            if status == AVAssetExportSession.Status.completed {\n                strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: { (success) in\n                    DispatchQueue.main.async {\n                       strongSelf.showSaveResult(isSuccess: success)\n                    }\n                })\n            }\n        })\n    }\n```\n\n> \n\n##### AVMutableComposition\n\n> AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。\n\n```swift\nlet composition = AVMutableComposition()\n//新建一条视屏轨道\n guard let trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {return}\n//提取视屏资源\nlet videoComposition = AVMutableVideoComposition(propertiesOf: composition)\n```\n\n![AVFoundation编辑结构图](https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg)\n\n#### 实战场景\n\n##### 视屏播放\n\n```swift\n      guard let string = Bundle.main.path(forResource: \"01_nebula\", ofType: \"mp4\")else{\n           return\n        }\n        let url = URL(fileURLWithPath: string)\n\n        let asset = AVAsset(url: url)\n\n        let playItem = AVPlayerItem(asset: asset)\n\n         player = AVPlayer(playerItem: playItem)\n\n        let layer = AVPlayerLayer(player: player)\n        \n        layer.frame = view.bounds\n        \n        view.layer.addSublayer(layer)\n        \n        player.play()\n```\n\n##### 视屏拼接\n\n视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。\n\n```swift\n func buildVideoTrack()  {\n        \n        //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        \n        guard let track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        \n        for asset in videos {\n             //获取视频资源中的视频轨道\n            guard let assetTrack = asset.tracks(withMediaType: .video).first else {\n                continue\n            }\n            \n            do {\n                try track.insertTimeRange(CMTimeRange(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                  cursorTime = CMTimeAdd(cursorTime, asset.duration)\n            } catch  {\n                print(\"insert error\")\n            }\n        }\n        \n    }\n```\n\n##### 添加水印&添加动画\n\n要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。\n\n> 水印代码\n\n```swift\n\n        // 1 - Set up the text layer\n            let subtitle1Text = CATextLayer()\n            subtitle1Text.font = \"Helvetica-Bold\" as CFTypeRef\n            subtitle1Text.fontSize = 36\n            subtitle1Text.frame = CGRect(x: 0, y: 0, width: size.width, height: 100)\n            subtitle1Text.string = \"jackfrow\"\n            subtitle1Text.alignmentMode = .center\n            subtitle1Text.foregroundColor = UIColor.white.cgColor\n        \n            //2 - The usual overlay\n            let overlayLayer = CALayer()\n            overlayLayer.addSublayer(subtitle1Text)\n            overlayLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            overlayLayer.masksToBounds = true\n            \n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            \n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            \n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer)\n            \n            // 3 - apply magic\n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n> 动画代码\n\n```swift\n        //1.overlay\n              let animationImage = UIImage(named: \"star.png\")\n              let overlayLayer1 = CALayer()\n              overlayLayer1.contents = animationImage?.cgImage\n              overlayLayer1.frame = CGRect(x: size.width/2 - 64, y: size.height/2 + 200, width:128, height: 128)\n              overlayLayer1.masksToBounds = true\n              \n              let overlayLayer2 = CALayer()\n              overlayLayer2.contents = animationImage?.cgImage\n              overlayLayer2.frame = CGRect(x: size.width/2 - 64 , y: size.height/2 - 200, width: 128, height: 128)\n              overlayLayer2.masksToBounds = true\n        \n        //2.3 - Twinkle\n            let animationScale = CABasicAnimation(keyPath: \"transform.scale\")\n                  animationScale.duration = 1.0\n                  animationScale.repeatCount = 5\n                  animationScale.autoreverses = true\n                   //  // animate from half size to full size\n            animationScale.fromValue = NSNumber(floatLiteral: 0.5)\n            animationScale.toValue = NSNumber(floatLiteral: 1.0)\n            animationScale.beginTime = AVCoreAnimationBeginTimeAtZero\n              \n            overlayLayer1.add(animationScale, forKey: \"scale\")\n            overlayLayer2.add(animationScale, forKey: \"scale\")\n            \n            //3 - Composition\n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer1)\n            parentLayer.addSublayer(overlayLayer2)\n            \n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n##### 过渡效果\n\n一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。\n\n所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。\n\n```swift\n///创建两条相交的视屏轨道  \nfunc buildCompositionVideoTracks()  {\n       //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        //创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1\n        guard let trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        guard let trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        \n        let videoTracks = [trackA,trackB]\n     //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        //转场动画时间\n        let transitionDuration = CMTime(value: 2, timescale: 1)\n        for (index,value) in assets.enumerated() {\n            //交叉循环A，B轨道\n            let trackIndex = index % 2\n            let currentTrack = videoTracks[trackIndex]\n            //获取视频资源中的视频轨道\n            guard let assetTrack = value.tracks(withMediaType: .video).first else {\n                continue\n            }\n            do {\n                //插入提取的视频轨道到 空白(编辑)轨道的指定位置中\n                try currentTrack.insertTimeRange(CMTimeRange(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                cursorTime = CMTimeAdd(cursorTime, value.duration)\n                //光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画\n                cursorTime = CMTimeSubtract(cursorTime, transitionDuration)\n            } catch {\n                \n            }\n        }\n        \n    }\n    /// 设置转场动画\n    func setupTransition(for instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType) {\n        let identityTransform = CGAffineTransform.identity\n        let timeRange = instruction.timeRange\n        let videoWidth = self.videoComposition.renderSize.width\n        if type == TransitionType.Push{\n            let fromEndTranform = CGAffineTransform(translationX: -videoWidth, y: 0)\n            let toStartTranform = CGAffineTransform(translationX: videoWidth, y: 0)\n            \n            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)\n            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)\n        }else {\n            fromLayer.setOpacityRamp(fromStartOpacity: 1.0, toEndOpacity: 0.0, timeRange: timeRange)\n        }\n        \n        //重新赋值\n        instruction.layerInstructions = [fromLayer,toLayer]\n    }\n\n```\n\n##### Demo\n\n[AVFoundationDemo](https://github.com/jackfrow/AVFoundationDemo)\n\n#### 参考链接\n\n- [AVFoundation视屏开发总结](http://zichao.me/2016/03/28/视频开发总结/)\n- [LearningAVFoundation之视频合成+转场过渡动画](https://juejin.im/post/5bee688ae51d45313b1ac683)\n- [**在 iOS 上捕获视频**](https://objccn.io/issue-23-1/)\n- [How to Play, Record, and Merge Videos in iOS and Swift](https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift)\n- [AVFoundation Tutorial: Adding Overlays and Animations to Videos](https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos)\n- [AVFoundation Programming Guide](https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188)","source":"_posts/AVFoundation总结.md","raw":"---\ntitle: AVFoundation总结\ndate: 2019-9-9 10:42:49\ntag: iOS\ncategories: 学习总结\n---\n\n#### 框架简介\n\n> AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。\n\n#### 概念介绍\n\n##### AVAsset\n\n> AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。\n\n```swift\n  let asset = AVAsset(url: url)\n```\n\n##### AVPlayer\n\n> An object that provides the interface to control the player’s transport behavior.\n\n```swift\nlet player = AVPlayer(playerItem: <#T##AVPlayerItem?#>)//初始化\n player.seek(to: CMTime.zero) //跳转到播放位置\n player.play()//开始播放\n player.pause()//暂停\n```\n\n##### AVPlayerItem\n\n> 该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。\n\n```swift\nlet playItem = AVPlayerItem(asset: <#T##AVAsset#>)\n```\n\n##### AVPlayerLayer\n\n> 用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.\n\n##### AVAssetTrack\n\n> AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理\n\n```swift\n  //获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)\n  guard let assetTrack = asset.tracks(withMediaType: .video).first else {continue }\n```\n\n多条轨道与显示的关系：\n\n![DC9D6C74-F6D8-4D71-8456-7673C2F6353F](https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg)\n\n##### AVVideoCompositionInstruction\n\n> 可以用作每段处理视屏的指令。\n\n##### AVVideoCompositionLayerInstruction\n\n> 用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。\n\n##### AVAssetExportSession\n\n> 针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。\n\n```swift\n    // MARK: - 导出合成的视频\n    func export(){\n        let session = AVAssetExportSession.init(asset: compostion.copy() as! AVAsset, presetName: AVAssetExportPreset1920x1080)\n        \n        session?.outputURL = JRVideoEditor.createTemplateFileURL()\n        session?.outputFileType = AVFileType.mp4\n        session?.videoComposition = videoComposition\n        \n        session?.exportAsynchronously(completionHandler: {[weak self] in\n            guard let strongSelf = self else {return}\n            let status = session?.status\n            if status == AVAssetExportSession.Status.completed {\n                strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: { (success) in\n                    DispatchQueue.main.async {\n                       strongSelf.showSaveResult(isSuccess: success)\n                    }\n                })\n            }\n        })\n    }\n```\n\n> \n\n##### AVMutableComposition\n\n> AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。\n\n```swift\nlet composition = AVMutableComposition()\n//新建一条视屏轨道\n guard let trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {return}\n//提取视屏资源\nlet videoComposition = AVMutableVideoComposition(propertiesOf: composition)\n```\n\n![AVFoundation编辑结构图](https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg)\n\n#### 实战场景\n\n##### 视屏播放\n\n```swift\n      guard let string = Bundle.main.path(forResource: \"01_nebula\", ofType: \"mp4\")else{\n           return\n        }\n        let url = URL(fileURLWithPath: string)\n\n        let asset = AVAsset(url: url)\n\n        let playItem = AVPlayerItem(asset: asset)\n\n         player = AVPlayer(playerItem: playItem)\n\n        let layer = AVPlayerLayer(player: player)\n        \n        layer.frame = view.bounds\n        \n        view.layer.addSublayer(layer)\n        \n        player.play()\n```\n\n##### 视屏拼接\n\n视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。\n\n```swift\n func buildVideoTrack()  {\n        \n        //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        \n        guard let track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        \n        for asset in videos {\n             //获取视频资源中的视频轨道\n            guard let assetTrack = asset.tracks(withMediaType: .video).first else {\n                continue\n            }\n            \n            do {\n                try track.insertTimeRange(CMTimeRange(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                  cursorTime = CMTimeAdd(cursorTime, asset.duration)\n            } catch  {\n                print(\"insert error\")\n            }\n        }\n        \n    }\n```\n\n##### 添加水印&添加动画\n\n要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。\n\n> 水印代码\n\n```swift\n\n        // 1 - Set up the text layer\n            let subtitle1Text = CATextLayer()\n            subtitle1Text.font = \"Helvetica-Bold\" as CFTypeRef\n            subtitle1Text.fontSize = 36\n            subtitle1Text.frame = CGRect(x: 0, y: 0, width: size.width, height: 100)\n            subtitle1Text.string = \"jackfrow\"\n            subtitle1Text.alignmentMode = .center\n            subtitle1Text.foregroundColor = UIColor.white.cgColor\n        \n            //2 - The usual overlay\n            let overlayLayer = CALayer()\n            overlayLayer.addSublayer(subtitle1Text)\n            overlayLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            overlayLayer.masksToBounds = true\n            \n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            \n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            \n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer)\n            \n            // 3 - apply magic\n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n> 动画代码\n\n```swift\n        //1.overlay\n              let animationImage = UIImage(named: \"star.png\")\n              let overlayLayer1 = CALayer()\n              overlayLayer1.contents = animationImage?.cgImage\n              overlayLayer1.frame = CGRect(x: size.width/2 - 64, y: size.height/2 + 200, width:128, height: 128)\n              overlayLayer1.masksToBounds = true\n              \n              let overlayLayer2 = CALayer()\n              overlayLayer2.contents = animationImage?.cgImage\n              overlayLayer2.frame = CGRect(x: size.width/2 - 64 , y: size.height/2 - 200, width: 128, height: 128)\n              overlayLayer2.masksToBounds = true\n        \n        //2.3 - Twinkle\n            let animationScale = CABasicAnimation(keyPath: \"transform.scale\")\n                  animationScale.duration = 1.0\n                  animationScale.repeatCount = 5\n                  animationScale.autoreverses = true\n                   //  // animate from half size to full size\n            animationScale.fromValue = NSNumber(floatLiteral: 0.5)\n            animationScale.toValue = NSNumber(floatLiteral: 1.0)\n            animationScale.beginTime = AVCoreAnimationBeginTimeAtZero\n              \n            overlayLayer1.add(animationScale, forKey: \"scale\")\n            overlayLayer2.add(animationScale, forKey: \"scale\")\n            \n            //3 - Composition\n            let parentLayer = CALayer()\n            let videoLayer = CALayer()\n            parentLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            videoLayer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)\n            parentLayer.addSublayer(videoLayer)\n            parentLayer.addSublayer(overlayLayer1)\n            parentLayer.addSublayer(overlayLayer2)\n            \n            composition.animationTool = AVVideoCompositionCoreAnimationTool(postProcessingAsVideoLayer: videoLayer, in: parentLayer)\n```\n\n##### 过渡效果\n\n一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。\n\n所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。\n\n```swift\n///创建两条相交的视屏轨道  \nfunc buildCompositionVideoTracks()  {\n       //使用invalid，系统会自动分配一个有效的trackId\n        let trackId = kCMPersistentTrackID_Invalid\n        //创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1\n        guard let trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        guard let trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) else {\n            return\n        }\n        \n        let videoTracks = [trackA,trackB]\n     //视频片段插入时间轴时的起始点\n        var cursorTime = CMTime.zero\n        //转场动画时间\n        let transitionDuration = CMTime(value: 2, timescale: 1)\n        for (index,value) in assets.enumerated() {\n            //交叉循环A，B轨道\n            let trackIndex = index % 2\n            let currentTrack = videoTracks[trackIndex]\n            //获取视频资源中的视频轨道\n            guard let assetTrack = value.tracks(withMediaType: .video).first else {\n                continue\n            }\n            do {\n                //插入提取的视频轨道到 空白(编辑)轨道的指定位置中\n                try currentTrack.insertTimeRange(CMTimeRange(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)\n                //光标移动到视频末尾处，以便插入下一段视频\n                cursorTime = CMTimeAdd(cursorTime, value.duration)\n                //光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画\n                cursorTime = CMTimeSubtract(cursorTime, transitionDuration)\n            } catch {\n                \n            }\n        }\n        \n    }\n    /// 设置转场动画\n    func setupTransition(for instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType) {\n        let identityTransform = CGAffineTransform.identity\n        let timeRange = instruction.timeRange\n        let videoWidth = self.videoComposition.renderSize.width\n        if type == TransitionType.Push{\n            let fromEndTranform = CGAffineTransform(translationX: -videoWidth, y: 0)\n            let toStartTranform = CGAffineTransform(translationX: videoWidth, y: 0)\n            \n            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)\n            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)\n        }else {\n            fromLayer.setOpacityRamp(fromStartOpacity: 1.0, toEndOpacity: 0.0, timeRange: timeRange)\n        }\n        \n        //重新赋值\n        instruction.layerInstructions = [fromLayer,toLayer]\n    }\n\n```\n\n##### Demo\n\n[AVFoundationDemo](https://github.com/jackfrow/AVFoundationDemo)\n\n#### 参考链接\n\n- [AVFoundation视屏开发总结](http://zichao.me/2016/03/28/视频开发总结/)\n- [LearningAVFoundation之视频合成+转场过渡动画](https://juejin.im/post/5bee688ae51d45313b1ac683)\n- [**在 iOS 上捕获视频**](https://objccn.io/issue-23-1/)\n- [How to Play, Record, and Merge Videos in iOS and Swift](https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift)\n- [AVFoundation Tutorial: Adding Overlays and Animations to Videos](https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos)\n- [AVFoundation Programming Guide](https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188)","slug":"AVFoundation总结","published":1,"updated":"2020-07-10T03:57:05.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftelds00028h3653y4z9p3","content":"<h4 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h4><blockquote>\n<p>AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。</p>\n</blockquote>\n<h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><h5 id=\"AVAsset\"><a href=\"#AVAsset\" class=\"headerlink\" title=\"AVAsset\"></a>AVAsset</h5><blockquote>\n<p>AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayer\"><a href=\"#AVPlayer\" class=\"headerlink\" title=\"AVPlayer\"></a>AVPlayer</h5><blockquote>\n<p>An object that provides the interface to control the player’s transport behavior.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"type\">AVPlayer</span>(playerItem: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVPlayerItem?</span>#&gt;)<span class=\"comment\">//初始化</span></span><br><span class=\"line\"> player.seek(to: <span class=\"type\">CMTime</span>.zero) <span class=\"comment\">//跳转到播放位置</span></span><br><span class=\"line\"> player.play()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\"> player.pause()<span class=\"comment\">//暂停</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerItem\"><a href=\"#AVPlayerItem\" class=\"headerlink\" title=\"AVPlayerItem\"></a>AVPlayerItem</h5><blockquote>\n<p>该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVAsset</span>#&gt;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerLayer\"><a href=\"#AVPlayerLayer\" class=\"headerlink\" title=\"AVPlayerLayer\"></a>AVPlayerLayer</h5><blockquote>\n<p>用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.</p>\n</blockquote>\n<h5 id=\"AVAssetTrack\"><a href=\"#AVAssetTrack\" class=\"headerlink\" title=\"AVAssetTrack\"></a>AVAssetTrack</h5><blockquote>\n<p>AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)</span></span><br><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">continue</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多条轨道与显示的关系：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg\" alt=\"DC9D6C74-F6D8-4D71-8456-7673C2F6353F\"></p>\n<h5 id=\"AVVideoCompositionInstruction\"><a href=\"#AVVideoCompositionInstruction\" class=\"headerlink\" title=\"AVVideoCompositionInstruction\"></a>AVVideoCompositionInstruction</h5><blockquote>\n<p>可以用作每段处理视屏的指令。</p>\n</blockquote>\n<h5 id=\"AVVideoCompositionLayerInstruction\"><a href=\"#AVVideoCompositionLayerInstruction\" class=\"headerlink\" title=\"AVVideoCompositionLayerInstruction\"></a>AVVideoCompositionLayerInstruction</h5><blockquote>\n<p>用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。</p>\n</blockquote>\n<h5 id=\"AVAssetExportSession\"><a href=\"#AVAssetExportSession\" class=\"headerlink\" title=\"AVAssetExportSession\"></a>AVAssetExportSession</h5><blockquote>\n<p>针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MARK: - 导出合成的视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = <span class=\"type\">AVAssetExportSession</span>.<span class=\"keyword\">init</span>(asset: compostion.copy() <span class=\"keyword\">as</span>! <span class=\"type\">AVAsset</span>, presetName: <span class=\"type\">AVAssetExportPreset1920x1080</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.outputURL = <span class=\"type\">JRVideoEditor</span>.createTemplateFileURL()</span><br><span class=\"line\">    session?.outputFileType = <span class=\"type\">AVFileType</span>.mp4</span><br><span class=\"line\">    session?.videoComposition = videoComposition</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.exportAsynchronously(completionHandler: &#123;[<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf = <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> status = session?.status</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status == <span class=\"type\">AVAssetExportSession</span>.<span class=\"type\">Status</span>.completed &#123;</span><br><span class=\"line\">            strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: &#123; (success) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">                   strongSelf.showSaveResult(isSuccess: success)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<h5 id=\"AVMutableComposition\"><a href=\"#AVMutableComposition\" class=\"headerlink\" title=\"AVMutableComposition\"></a>AVMutableComposition</h5><blockquote>\n<p>AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> composition = <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\"><span class=\"comment\">//新建一条视屏轨道</span></span><br><span class=\"line\"> <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//提取视屏资源</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> videoComposition = <span class=\"type\">AVMutableVideoComposition</span>(propertiesOf: composition)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg\" alt=\"AVFoundation编辑结构图\"></p>\n<h4 id=\"实战场景\"><a href=\"#实战场景\" class=\"headerlink\" title=\"实战场景\"></a>实战场景</h4><h5 id=\"视屏播放\"><a href=\"#视屏播放\" class=\"headerlink\" title=\"视屏播放\"></a>视屏播放</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> string = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"01_nebula\"</span>, ofType: <span class=\"string\">\"mp4\"</span>)<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = <span class=\"type\">URL</span>(fileURLWithPath: string)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: asset)</span><br><span class=\"line\"></span><br><span class=\"line\">   player = <span class=\"type\">AVPlayer</span>(playerItem: playItem)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> layer = <span class=\"type\">AVPlayerLayer</span>(player: player)</span><br><span class=\"line\">  </span><br><span class=\"line\">  layer.frame = view.bounds</span><br><span class=\"line\">  </span><br><span class=\"line\">  view.layer.addSublayer(layer)</span><br><span class=\"line\">  </span><br><span class=\"line\">  player.play()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"视屏拼接\"><a href=\"#视屏拼接\" class=\"headerlink\" title=\"视屏拼接\"></a>视屏拼接</h5><p>视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildVideoTrack</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">for</span> asset <span class=\"keyword\">in</span> videos &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">           <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">continue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> track.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">               <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                 cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, asset.duration)</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"insert error\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加水印-amp-添加动画\"><a href=\"#添加水印-amp-添加动画\" class=\"headerlink\" title=\"添加水印&amp;添加动画\"></a>添加水印&amp;添加动画</h5><p>要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。</p>\n<blockquote>\n<p>水印代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - Set up the text layer</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subtitle1Text = <span class=\"type\">CATextLayer</span>()</span><br><span class=\"line\">    subtitle1Text.font = <span class=\"string\">\"Helvetica-Bold\"</span> <span class=\"keyword\">as</span> <span class=\"type\">CFTypeRef</span></span><br><span class=\"line\">    subtitle1Text.fontSize = <span class=\"number\">36</span></span><br><span class=\"line\">    subtitle1Text.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">    subtitle1Text.string = <span class=\"string\">\"jackfrow\"</span></span><br><span class=\"line\">    subtitle1Text.alignmentMode = .center</span><br><span class=\"line\">    subtitle1Text.foregroundColor = <span class=\"type\">UIColor</span>.white.cgColor</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2 - The usual overlay</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> overlayLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    overlayLayer.addSublayer(subtitle1Text)</span><br><span class=\"line\">    overlayLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    overlayLayer.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3 - apply magic</span></span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>动画代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.overlay</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> animationImage = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"star.png\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer1 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer1.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer1.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span>, y: size.height/<span class=\"number\">2</span> + <span class=\"number\">200</span>, width:<span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer1.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer2 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer2.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer2.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span> , y: size.height/<span class=\"number\">2</span> - <span class=\"number\">200</span>, width: <span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer2.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.3 - Twinkle</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> animationScale = <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">\"transform.scale\"</span>)</span><br><span class=\"line\">          animationScale.duration = <span class=\"number\">1.0</span></span><br><span class=\"line\">          animationScale.repeatCount = <span class=\"number\">5</span></span><br><span class=\"line\">          animationScale.autoreverses = <span class=\"literal\">true</span></span><br><span class=\"line\">           <span class=\"comment\">//  // animate from half size to full size</span></span><br><span class=\"line\">    animationScale.fromValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    animationScale.toValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    animationScale.beginTime = <span class=\"type\">AVCoreAnimationBeginTimeAtZero</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    overlayLayer1.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    overlayLayer2.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3 - Composition</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer1)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h5><p>一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。</p>\n<p>所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///创建两条相交的视屏轨道  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildCompositionVideoTracks</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">        <span class=\"comment\">//创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoTracks = [trackA,trackB]</span><br><span class=\"line\">     <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">        <span class=\"comment\">//转场动画时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> transitionDuration = <span class=\"type\">CMTime</span>(value: <span class=\"number\">2</span>, timescale: <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index,value) <span class=\"keyword\">in</span> assets.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//交叉循环A，B轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> trackIndex = index % <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentTrack = videoTracks[trackIndex]</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = value.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入提取的视频轨道到 空白(编辑)轨道的指定位置中</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> currentTrack.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">                <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, value.duration)</span><br><span class=\"line\">                <span class=\"comment\">//光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeSubtract</span>(cursorTime, transitionDuration)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 设置转场动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupTransition</span><span class=\"params\">(<span class=\"keyword\">for</span> instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identityTransform = <span class=\"type\">CGAffineTransform</span>.identity</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeRange = instruction.timeRange</span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoWidth = <span class=\"keyword\">self</span>.videoComposition.renderSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type == <span class=\"type\">TransitionType</span>.<span class=\"type\">Push</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fromEndTranform = <span class=\"type\">CGAffineTransform</span>(translationX: -videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> toStartTranform = <span class=\"type\">CGAffineTransform</span>(translationX: videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)</span><br><span class=\"line\">            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fromLayer.setOpacityRamp(fromStartOpacity: <span class=\"number\">1.0</span>, toEndOpacity: <span class=\"number\">0.0</span>, timeRange: timeRange)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">        instruction.layerInstructions = [fromLayer,toLayer]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h5><p><a href=\"https://github.com/jackfrow/AVFoundationDemo\" target=\"_blank\" rel=\"noopener\">AVFoundationDemo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://zichao.me/2016/03/28/视频开发总结/\" target=\"_blank\" rel=\"noopener\">AVFoundation视屏开发总结</a></li>\n<li><a href=\"https://juejin.im/post/5bee688ae51d45313b1ac683\" target=\"_blank\" rel=\"noopener\">LearningAVFoundation之视频合成+转场过渡动画</a></li>\n<li><a href=\"https://objccn.io/issue-23-1/\" target=\"_blank\" rel=\"noopener\"><strong>在 iOS 上捕获视频</strong></a></li>\n<li><a href=\"https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift\" target=\"_blank\" rel=\"noopener\">How to Play, Record, and Merge Videos in iOS and Swift</a></li>\n<li><a href=\"https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos\" target=\"_blank\" rel=\"noopener\">AVFoundation Tutorial: Adding Overlays and Animations to Videos</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188\" target=\"_blank\" rel=\"noopener\">AVFoundation Programming Guide</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"框架简介\"><a href=\"#框架简介\" class=\"headerlink\" title=\"框架简介\"></a>框架简介</h4><blockquote>\n<p>AVFoundation是iOS中用于处理音视频的框架，主要提供的功能有，视屏播放，视屏录制，以及视屏编辑等功能。</p>\n</blockquote>\n<h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><h5 id=\"AVAsset\"><a href=\"#AVAsset\" class=\"headerlink\" title=\"AVAsset\"></a>AVAsset</h5><blockquote>\n<p>AVAsset是AVFoundation框架中抽象类，用来表示音频或者视屏资源,是一组音视频资源的类型,其中比较重要的属性有duration（持续时间）,tracks（资源轨道）。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayer\"><a href=\"#AVPlayer\" class=\"headerlink\" title=\"AVPlayer\"></a>AVPlayer</h5><blockquote>\n<p>An object that provides the interface to control the player’s transport behavior.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> player = <span class=\"type\">AVPlayer</span>(playerItem: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVPlayerItem?</span>#&gt;)<span class=\"comment\">//初始化</span></span><br><span class=\"line\"> player.seek(to: <span class=\"type\">CMTime</span>.zero) <span class=\"comment\">//跳转到播放位置</span></span><br><span class=\"line\"> player.play()<span class=\"comment\">//开始播放</span></span><br><span class=\"line\"> player.pause()<span class=\"comment\">//暂停</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerItem\"><a href=\"#AVPlayerItem\" class=\"headerlink\" title=\"AVPlayerItem\"></a>AVPlayerItem</h5><blockquote>\n<p>该类主要是用于管理资源对象，提供播放数据源，旨在表示由AVPlayer播放的资产的呈现状态，并允许观察该状态，它控制着视频从创建到销毁的诸多状态。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: &lt;#<span class=\"type\">T</span>##<span class=\"type\">AVAsset</span>#&gt;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"AVPlayerLayer\"><a href=\"#AVPlayerLayer\" class=\"headerlink\" title=\"AVPlayerLayer\"></a>AVPlayerLayer</h5><blockquote>\n<p>用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.</p>\n</blockquote>\n<h5 id=\"AVAssetTrack\"><a href=\"#AVAssetTrack\" class=\"headerlink\" title=\"AVAssetTrack\"></a>AVAssetTrack</h5><blockquote>\n<p>AVAssetTrack是资源轨道，用于获取AVAsset中的资源，并加以处理</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取视屏资源中的视屏轨道(视屏交叉部分就会有多条轨道,这里只取第一条)</span></span><br><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">continue</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多条轨道与显示的关系：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6wo934s59j30kf05vjrq.jpg\" alt=\"DC9D6C74-F6D8-4D71-8456-7673C2F6353F\"></p>\n<h5 id=\"AVVideoCompositionInstruction\"><a href=\"#AVVideoCompositionInstruction\" class=\"headerlink\" title=\"AVVideoCompositionInstruction\"></a>AVVideoCompositionInstruction</h5><blockquote>\n<p>可以用作每段处理视屏的指令。</p>\n</blockquote>\n<h5 id=\"AVVideoCompositionLayerInstruction\"><a href=\"#AVVideoCompositionLayerInstruction\" class=\"headerlink\" title=\"AVVideoCompositionLayerInstruction\"></a>AVVideoCompositionLayerInstruction</h5><blockquote>\n<p>用于显示界面的layer层,上图中可以看到1.2共存的部分,便会有多个LayerInstruction,就是一个资源中有多个轨道,并且轨道相交的部分就会产生多个LayerInstruction。</p>\n</blockquote>\n<h5 id=\"AVAssetExportSession\"><a href=\"#AVAssetExportSession\" class=\"headerlink\" title=\"AVAssetExportSession\"></a>AVAssetExportSession</h5><blockquote>\n<p>针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MARK: - 导出合成的视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = <span class=\"type\">AVAssetExportSession</span>.<span class=\"keyword\">init</span>(asset: compostion.copy() <span class=\"keyword\">as</span>! <span class=\"type\">AVAsset</span>, presetName: <span class=\"type\">AVAssetExportPreset1920x1080</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.outputURL = <span class=\"type\">JRVideoEditor</span>.createTemplateFileURL()</span><br><span class=\"line\">    session?.outputFileType = <span class=\"type\">AVFileType</span>.mp4</span><br><span class=\"line\">    session?.videoComposition = videoComposition</span><br><span class=\"line\">    </span><br><span class=\"line\">    session?.exportAsynchronously(completionHandler: &#123;[<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf = <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> status = session?.status</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status == <span class=\"type\">AVAssetExportSession</span>.<span class=\"type\">Status</span>.completed &#123;</span><br><span class=\"line\">            strongSelf.saveToAlbum(atURL: session!.outputURL!, complete: &#123; (success) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">                   strongSelf.showSaveResult(isSuccess: success)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n</blockquote>\n<h5 id=\"AVMutableComposition\"><a href=\"#AVMutableComposition\" class=\"headerlink\" title=\"AVMutableComposition\"></a>AVMutableComposition</h5><blockquote>\n<p>AVAsset的子类，可以用来新建视屏轨道，音频轨道，提取出资源中音频资源，视屏资源。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> composition = <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\"><span class=\"comment\">//新建一条视屏轨道</span></span><br><span class=\"line\"> <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = compostion.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//提取视屏资源</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> videoComposition = <span class=\"type\">AVMutableVideoComposition</span>(propertiesOf: composition)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g72g8fm2u4j30l50e3jw0.jpg\" alt=\"AVFoundation编辑结构图\"></p>\n<h4 id=\"实战场景\"><a href=\"#实战场景\" class=\"headerlink\" title=\"实战场景\"></a>实战场景</h4><h5 id=\"视屏播放\"><a href=\"#视屏播放\" class=\"headerlink\" title=\"视屏播放\"></a>视屏播放</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> string = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"01_nebula\"</span>, ofType: <span class=\"string\">\"mp4\"</span>)<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = <span class=\"type\">URL</span>(fileURLWithPath: string)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> asset = <span class=\"type\">AVAsset</span>(url: url)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> playItem = <span class=\"type\">AVPlayerItem</span>(asset: asset)</span><br><span class=\"line\"></span><br><span class=\"line\">   player = <span class=\"type\">AVPlayer</span>(playerItem: playItem)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> layer = <span class=\"type\">AVPlayerLayer</span>(player: player)</span><br><span class=\"line\">  </span><br><span class=\"line\">  layer.frame = view.bounds</span><br><span class=\"line\">  </span><br><span class=\"line\">  view.layer.addSublayer(layer)</span><br><span class=\"line\">  </span><br><span class=\"line\">  player.play()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"视屏拼接\"><a href=\"#视屏拼接\" class=\"headerlink\" title=\"视屏拼接\"></a>视屏拼接</h5><p>视屏拼接主要需要一条视频轨道用来存放视屏资源的数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildVideoTrack</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> track = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">for</span> asset <span class=\"keyword\">in</span> videos &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">           <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = asset.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">continue</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> track.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: asset.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">               <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                 cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, asset.duration)</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"insert error\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加水印-amp-添加动画\"><a href=\"#添加水印-amp-添加动画\" class=\"headerlink\" title=\"添加水印&amp;添加动画\"></a>添加水印&amp;添加动画</h5><p>要想对视屏资源进行添加效果，主要是需要对AVMutableVideoComposition的animationTool属性进行处理。</p>\n<blockquote>\n<p>水印代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - Set up the text layer</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subtitle1Text = <span class=\"type\">CATextLayer</span>()</span><br><span class=\"line\">    subtitle1Text.font = <span class=\"string\">\"Helvetica-Bold\"</span> <span class=\"keyword\">as</span> <span class=\"type\">CFTypeRef</span></span><br><span class=\"line\">    subtitle1Text.fontSize = <span class=\"number\">36</span></span><br><span class=\"line\">    subtitle1Text.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">    subtitle1Text.string = <span class=\"string\">\"jackfrow\"</span></span><br><span class=\"line\">    subtitle1Text.alignmentMode = .center</span><br><span class=\"line\">    subtitle1Text.foregroundColor = <span class=\"type\">UIColor</span>.white.cgColor</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2 - The usual overlay</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> overlayLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    overlayLayer.addSublayer(subtitle1Text)</span><br><span class=\"line\">    overlayLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    overlayLayer.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    </span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3 - apply magic</span></span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>动画代码</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.overlay</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> animationImage = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"star.png\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer1 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer1.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer1.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span>, y: size.height/<span class=\"number\">2</span> + <span class=\"number\">200</span>, width:<span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer1.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">let</span> overlayLayer2 = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">      overlayLayer2.contents = animationImage?.cgImage</span><br><span class=\"line\">      overlayLayer2.frame = <span class=\"type\">CGRect</span>(x: size.width/<span class=\"number\">2</span> - <span class=\"number\">64</span> , y: size.height/<span class=\"number\">2</span> - <span class=\"number\">200</span>, width: <span class=\"number\">128</span>, height: <span class=\"number\">128</span>)</span><br><span class=\"line\">      overlayLayer2.masksToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.3 - Twinkle</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> animationScale = <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">\"transform.scale\"</span>)</span><br><span class=\"line\">          animationScale.duration = <span class=\"number\">1.0</span></span><br><span class=\"line\">          animationScale.repeatCount = <span class=\"number\">5</span></span><br><span class=\"line\">          animationScale.autoreverses = <span class=\"literal\">true</span></span><br><span class=\"line\">           <span class=\"comment\">//  // animate from half size to full size</span></span><br><span class=\"line\">    animationScale.fromValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    animationScale.toValue = <span class=\"type\">NSNumber</span>(floatLiteral: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    animationScale.beginTime = <span class=\"type\">AVCoreAnimationBeginTimeAtZero</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    overlayLayer1.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    overlayLayer2.add(animationScale, forKey: <span class=\"string\">\"scale\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3 - Composition</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoLayer = <span class=\"type\">CALayer</span>()</span><br><span class=\"line\">    parentLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    videoLayer.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: size.width, height: size.height)</span><br><span class=\"line\">    parentLayer.addSublayer(videoLayer)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer1)</span><br><span class=\"line\">    parentLayer.addSublayer(overlayLayer2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    composition.animationTool = <span class=\"type\">AVVideoCompositionCoreAnimationTool</span>(postProcessingAsVideoLayer: videoLayer, <span class=\"keyword\">in</span>: parentLayer)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h5><p>一段视屏资源播放出来主要是由它在视屏资源轨道中资源来决定的，效果类似于上图。</p>\n<p>所以要想实现视屏的过渡效果，主要是需要多条视屏轨道交叉播放，然后对轨道交叉部分做一定的处理，就可以实现视屏的过渡效果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///创建两条相交的视屏轨道  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildCompositionVideoTracks</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用invalid，系统会自动分配一个有效的trackId</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> trackId = kCMPersistentTrackID_Invalid</span><br><span class=\"line\">        <span class=\"comment\">//创建AB两条视频轨道，视频片段交叉插入到轨道中，通过对两条轨道的叠加编辑各种效果。如0-5秒内，A轨道内容alpha逐渐到0，B轨道内容alpha逐渐到1</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackA = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> trackB = composition.addMutableTrack(withMediaType: .video, preferredTrackID: trackId) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoTracks = [trackA,trackB]</span><br><span class=\"line\">     <span class=\"comment\">//视频片段插入时间轴时的起始点</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorTime = <span class=\"type\">CMTime</span>.zero</span><br><span class=\"line\">        <span class=\"comment\">//转场动画时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> transitionDuration = <span class=\"type\">CMTime</span>(value: <span class=\"number\">2</span>, timescale: <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index,value) <span class=\"keyword\">in</span> assets.enumerated() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//交叉循环A，B轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> trackIndex = index % <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentTrack = videoTracks[trackIndex]</span><br><span class=\"line\">            <span class=\"comment\">//获取视频资源中的视频轨道</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> assetTrack = value.tracks(withMediaType: .video).first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//插入提取的视频轨道到 空白(编辑)轨道的指定位置中</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> currentTrack.insertTimeRange(<span class=\"type\">CMTimeRange</span>(start: .zero, duration: value.duration), of: assetTrack, at: cursorTime)</span><br><span class=\"line\">                <span class=\"comment\">//光标移动到视频末尾处，以便插入下一段视频</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeAdd</span>(cursorTime, value.duration)</span><br><span class=\"line\">                <span class=\"comment\">//光标回退转场动画时长的距离，这一段前后视频重叠部分组合成转场动画</span></span><br><span class=\"line\">                cursorTime = <span class=\"type\">CMTimeSubtract</span>(cursorTime, transitionDuration)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// 设置转场动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupTransition</span><span class=\"params\">(<span class=\"keyword\">for</span> instruction: AVMutableVideoCompositionInstruction, fromLayer: AVMutableVideoCompositionLayerInstruction, toLayer: AVMutableVideoCompositionLayerInstruction ,type: TransitionType)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identityTransform = <span class=\"type\">CGAffineTransform</span>.identity</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timeRange = instruction.timeRange</span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoWidth = <span class=\"keyword\">self</span>.videoComposition.renderSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type == <span class=\"type\">TransitionType</span>.<span class=\"type\">Push</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> fromEndTranform = <span class=\"type\">CGAffineTransform</span>(translationX: -videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> toStartTranform = <span class=\"type\">CGAffineTransform</span>(translationX: videoWidth, y: <span class=\"number\">0</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            fromLayer.setTransformRamp(fromStart: identityTransform, toEnd: fromEndTranform, timeRange: timeRange)</span><br><span class=\"line\">            toLayer.setTransformRamp(fromStart: toStartTranform, toEnd: identityTransform, timeRange: timeRange)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fromLayer.setOpacityRamp(fromStartOpacity: <span class=\"number\">1.0</span>, toEndOpacity: <span class=\"number\">0.0</span>, timeRange: timeRange)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">        instruction.layerInstructions = [fromLayer,toLayer]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h5><p><a href=\"https://github.com/jackfrow/AVFoundationDemo\" target=\"_blank\" rel=\"noopener\">AVFoundationDemo</a></p>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"http://zichao.me/2016/03/28/视频开发总结/\" target=\"_blank\" rel=\"noopener\">AVFoundation视屏开发总结</a></li>\n<li><a href=\"https://juejin.im/post/5bee688ae51d45313b1ac683\" target=\"_blank\" rel=\"noopener\">LearningAVFoundation之视频合成+转场过渡动画</a></li>\n<li><a href=\"https://objccn.io/issue-23-1/\" target=\"_blank\" rel=\"noopener\"><strong>在 iOS 上捕获视频</strong></a></li>\n<li><a href=\"https://www.raywenderlich.com/5135-how-to-play-record-and-merge-videos-in-ios-and-swift\" target=\"_blank\" rel=\"noopener\">How to Play, Record, and Merge Videos in iOS and Swift</a></li>\n<li><a href=\"https://www.raywenderlich.com/2734-avfoundation-tutorial-adding-overlays-and-animations-to-videos\" target=\"_blank\" rel=\"noopener\">AVFoundation Tutorial: Adding Overlays and Animations to Videos</a></li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188\" target=\"_blank\" rel=\"noopener\">AVFoundation Programming Guide</a></li>\n</ul>\n"},{"title":"MBProgressHUD源码解析","date":"2019-05-23T14:30:00.000Z","typora-root-url":"../assets","_content":"\n​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。\n\n### 功能\n\n> MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。\n\n### 框架结构\n\n> ##### MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\n\n### API结构\n\n#### MBProgressHUD\n\n##### 方法\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated;\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated;\n+ (nullable MBProgressHUD *)HUDForView:(UIView *)view;\n- (instancetype)initWithView:(UIView *)view;\n- (void)showAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated afterDelay:(NSTimeInterval)delay;\n```\n\n##### **属性**\n\n```objc\n@property (weak, nonatomic) id<MBProgressHUDDelegate> delegate;\n@property (copy, nullable) MBProgressHUDCompletionBlock completionBlock;\n@property (assign, nonatomic) NSTimeInterval graceTime;\n@property (assign, nonatomic) NSTimeInterval minShowTime;\n@property (assign, nonatomic) BOOL removeFromSuperViewOnHide;\n@property (assign, nonatomic) MBProgressHUDMode mode;\n@property (strong, nonatomic, nullable) UIColor *contentColor UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) MBProgressHUDAnimation animationType UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGPoint offset UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGFloat margin UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGSize minSize UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter = isSquare) BOOL square UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter=areDefaultMotionEffectsEnabled) BOOL defaultMotionEffectsEnabled UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) float progress;\n@property (strong, nonatomic, nullable) NSProgress *progressObject;\n@property (strong, nonatomic, readonly) MBBackgroundView *bezelView;\n@property (strong, nonatomic, readonly) MBBackgroundView *backgroundView;\n@property (strong, nonatomic, nullable) UIView *customView;\n@property (strong, nonatomic, readonly) UILabel *label;\n@property (strong, nonatomic, readonly) UILabel *detailsLabel;\n@property (strong, nonatomic, readonly) UIButton *button;\n```\n\n#### MBRoundProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *progressTintColor;\n@property (nonatomic, strong) UIColor *backgroundTintColor;\n@property (nonatomic, assign, getter = isAnnular) BOOL annular;\n```\n\n#### MBBarProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *lineColor;\n@property (nonatomic, strong) UIColor *progressRemainingColor;\n@property (nonatomic, strong) UIColor *progressColor;\n```\n\n#### MBBackgroundView\n\n```objc\n@property (nonatomic) MBProgressHUDBackgroundStyle style;\n@property (nonatomic) UIBlurEffectStyle blurEffectStyle;\n@property (nonatomic, strong) UIColor *color;\n```\n\n### 调用流程\n\n外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到`animateIn:withType: completion:`，下面是方法调用流程图。\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg)\n\n### 内部实现\n\n#### show\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [[self alloc] initWithView:view];\n    hud.removeFromSuperViewOnHide = YES;\n    [view addSubview:hud];\n    [hud showAnimated:animated];\n    return hud;\n}\n\n- (void)showAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.minShowTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = NO;\n    // If the grace time is set, postpone the HUD display\n    if (self.graceTime > 0.0) {\n        NSTimer *timer = [NSTimer timerWithTimeInterval:self.graceTime target:self selector:@selector(handleGraceTimer:) userInfo:nil repeats:NO];\n        [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n        self.graceTimer = timer;\n    } \n    // ... otherwise show the HUD immediately\n    else {\n        [self showUsingAnimation:self.useAnimation];\n    }\n}\n\n- (void)showUsingAnimation:(BOOL)animated {\n    // Cancel any previous animations\n    [self.bezelView.layer removeAllAnimations];\n    [self.backgroundView.layer removeAllAnimations];\n\n    // Cancel any scheduled hideAnimated:afterDelay: calls\n    [self.hideDelayTimer invalidate];\n\n    self.showStarted = [NSDate date];\n    self.alpha = 1.f;\n\n    // Needed in case we hide and re-show with the same NSProgress object attached.\n    [self setNSProgressDisplayLinkEnabled:YES];\n\n    if (animated) {\n        [self animateIn:YES withType:self.animationType completion:NULL];\n    } else {\n        self.bezelView.alpha = 1.f;\n        self.backgroundView.alpha = 1.f;\n    }\n}\n```\n\n#### hide\n\n```objc\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [self HUDForView:view];\n    if (hud != nil) {\n        hud.removeFromSuperViewOnHide = YES;\n        [hud hideAnimated:animated];\n        return YES;\n    }\n    return NO;\n}\n\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n\n (void)hideAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.graceTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = YES;\n    // If the minShow time is set, calculate how long the HUD was shown,\n    // and postpone the hiding operation if necessary\n    if (self.minShowTime > 0.0 && self.showStarted) {\n        NSTimeInterval interv = [[NSDate date] timeIntervalSinceDate:self.showStarted];\n        if (interv < self.minShowTime) {\n            NSTimer *timer = [NSTimer timerWithTimeInterval:(self.minShowTime - interv) target:self selector:@selector(handleMinShowTimer:) userInfo:nil repeats:NO];\n            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n            self.minShowTimer = timer;\n            return;\n        } \n    }\n    // ... otherwise hide the HUD immediately\n    [self hideUsingAnimation:self.useAnimation];\n}\n\n- (void)hideUsingAnimation:(BOOL)animated {\n    // Cancel any scheduled hideAnimated:afterDelay: calls.\n    // This needs to happen here instead of in done,\n    // to avoid races if another hideAnimated:afterDelay:\n    // call comes in while the HUD is animating out.\n    [self.hideDelayTimer invalidate];\n\n    if (animated && self.showStarted) {\n        self.showStarted = nil;\n        [self animateIn:NO withType:self.animationType completion:^(BOOL finished) {\n            [self done];\n        }];\n    } else {\n        self.showStarted = nil;\n        self.bezelView.alpha = 0.f;\n        self.backgroundView.alpha = 1.f;\n        [self done];\n    }\n}\n```\n\n\n\n这里注意一下在拿当前hud时的方法.\n\n```objc\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n```\n\n\n\n因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。\n\n\n\n而无论是`show`方法，还是`hide`方法，在设定animated属性为YES的前提下，最终都会走到`animateIn: withType: completion:`方法：\n\n```objc\n- (void)animateIn:(BOOL)animatingIn withType:(MBProgressHUDAnimation)type completion:(void(^)(BOOL finished))completion {\n    // Automatically determine the correct zoom animation type\n    if (type == MBProgressHUDAnimationZoom) {\n        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;\n    }\n\n    CGAffineTransform small = CGAffineTransformMakeScale(0.5f, 0.5f);\n    CGAffineTransform large = CGAffineTransformMakeScale(1.5f, 1.5f);\n\n    // Set starting state\n    UIView *bezelView = self.bezelView;\n    if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomIn) {\n        bezelView.transform = small;\n    } else if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomOut) {\n        bezelView.transform = large;\n    }\n\n    // Perform animations\n    dispatch_block_t animations = ^{\n        if (animatingIn) {\n            bezelView.transform = CGAffineTransformIdentity;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomIn) {\n            bezelView.transform = large;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomOut) {\n            bezelView.transform = small;\n        }\n        CGFloat alpha = animatingIn ? 1.f : 0.f;\n        bezelView.alpha = alpha;\n        self.backgroundView.alpha = alpha;\n    };\n    [UIView animateWithDuration:0.3 delay:0. usingSpringWithDamping:1.f initialSpringVelocity:0.f options:UIViewAnimationOptionBeginFromCurrentState animations:animations completion:completion];\n}\n\n```\n\n\n\n### 收获\n\n1. 暴露出来的API最终都会走到同一个私有方法里。\n2. 使用CADisplayLink来刷新更新频率可能很高的view。\n3. 使用循环时，注意条件可以减少循环次数，进而对程序进行优化。\n4. 在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。","source":"_posts/MBProgressHUD源码解析.md","raw":"---\ntitle: MBProgressHUD源码解析\ndate: 2019-5-23 22:30:00\ntag: iOS\ncategories: 源码阅读\n\n\ntypora-root-url: ../assets\n---\n\n​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。\n\n### 功能\n\n> MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。\n\n### 框架结构\n\n> ##### MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\n\n### API结构\n\n#### MBProgressHUD\n\n##### 方法\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated;\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated;\n+ (nullable MBProgressHUD *)HUDForView:(UIView *)view;\n- (instancetype)initWithView:(UIView *)view;\n- (void)showAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated;\n- (void)hideAnimated:(BOOL)animated afterDelay:(NSTimeInterval)delay;\n```\n\n##### **属性**\n\n```objc\n@property (weak, nonatomic) id<MBProgressHUDDelegate> delegate;\n@property (copy, nullable) MBProgressHUDCompletionBlock completionBlock;\n@property (assign, nonatomic) NSTimeInterval graceTime;\n@property (assign, nonatomic) NSTimeInterval minShowTime;\n@property (assign, nonatomic) BOOL removeFromSuperViewOnHide;\n@property (assign, nonatomic) MBProgressHUDMode mode;\n@property (strong, nonatomic, nullable) UIColor *contentColor UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) MBProgressHUDAnimation animationType UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGPoint offset UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGFloat margin UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) CGSize minSize UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter = isSquare) BOOL square UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic, getter=areDefaultMotionEffectsEnabled) BOOL defaultMotionEffectsEnabled UI_APPEARANCE_SELECTOR;\n@property (assign, nonatomic) float progress;\n@property (strong, nonatomic, nullable) NSProgress *progressObject;\n@property (strong, nonatomic, readonly) MBBackgroundView *bezelView;\n@property (strong, nonatomic, readonly) MBBackgroundView *backgroundView;\n@property (strong, nonatomic, nullable) UIView *customView;\n@property (strong, nonatomic, readonly) UILabel *label;\n@property (strong, nonatomic, readonly) UILabel *detailsLabel;\n@property (strong, nonatomic, readonly) UIButton *button;\n```\n\n#### MBRoundProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *progressTintColor;\n@property (nonatomic, strong) UIColor *backgroundTintColor;\n@property (nonatomic, assign, getter = isAnnular) BOOL annular;\n```\n\n#### MBBarProgressView\n\n```objc\n@property (nonatomic, assign) float progress;\n@property (nonatomic, strong) UIColor *lineColor;\n@property (nonatomic, strong) UIColor *progressRemainingColor;\n@property (nonatomic, strong) UIColor *progressColor;\n```\n\n#### MBBackgroundView\n\n```objc\n@property (nonatomic) MBProgressHUDBackgroundStyle style;\n@property (nonatomic) UIBlurEffectStyle blurEffectStyle;\n@property (nonatomic, strong) UIColor *color;\n```\n\n### 调用流程\n\n外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到`animateIn:withType: completion:`，下面是方法调用流程图。\n\n![](http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg)\n\n### 内部实现\n\n#### show\n\n```objc\n+ (instancetype)showHUDAddedTo:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [[self alloc] initWithView:view];\n    hud.removeFromSuperViewOnHide = YES;\n    [view addSubview:hud];\n    [hud showAnimated:animated];\n    return hud;\n}\n\n- (void)showAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.minShowTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = NO;\n    // If the grace time is set, postpone the HUD display\n    if (self.graceTime > 0.0) {\n        NSTimer *timer = [NSTimer timerWithTimeInterval:self.graceTime target:self selector:@selector(handleGraceTimer:) userInfo:nil repeats:NO];\n        [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n        self.graceTimer = timer;\n    } \n    // ... otherwise show the HUD immediately\n    else {\n        [self showUsingAnimation:self.useAnimation];\n    }\n}\n\n- (void)showUsingAnimation:(BOOL)animated {\n    // Cancel any previous animations\n    [self.bezelView.layer removeAllAnimations];\n    [self.backgroundView.layer removeAllAnimations];\n\n    // Cancel any scheduled hideAnimated:afterDelay: calls\n    [self.hideDelayTimer invalidate];\n\n    self.showStarted = [NSDate date];\n    self.alpha = 1.f;\n\n    // Needed in case we hide and re-show with the same NSProgress object attached.\n    [self setNSProgressDisplayLinkEnabled:YES];\n\n    if (animated) {\n        [self animateIn:YES withType:self.animationType completion:NULL];\n    } else {\n        self.bezelView.alpha = 1.f;\n        self.backgroundView.alpha = 1.f;\n    }\n}\n```\n\n#### hide\n\n```objc\n+ (BOOL)hideHUDForView:(UIView *)view animated:(BOOL)animated {\n    MBProgressHUD *hud = [self HUDForView:view];\n    if (hud != nil) {\n        hud.removeFromSuperViewOnHide = YES;\n        [hud hideAnimated:animated];\n        return YES;\n    }\n    return NO;\n}\n\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n\n (void)hideAnimated:(BOOL)animated {\n    MBMainThreadAssert();\n    [self.graceTimer invalidate];\n    self.useAnimation = animated;\n    self.finished = YES;\n    // If the minShow time is set, calculate how long the HUD was shown,\n    // and postpone the hiding operation if necessary\n    if (self.minShowTime > 0.0 && self.showStarted) {\n        NSTimeInterval interv = [[NSDate date] timeIntervalSinceDate:self.showStarted];\n        if (interv < self.minShowTime) {\n            NSTimer *timer = [NSTimer timerWithTimeInterval:(self.minShowTime - interv) target:self selector:@selector(handleMinShowTimer:) userInfo:nil repeats:NO];\n            [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n            self.minShowTimer = timer;\n            return;\n        } \n    }\n    // ... otherwise hide the HUD immediately\n    [self hideUsingAnimation:self.useAnimation];\n}\n\n- (void)hideUsingAnimation:(BOOL)animated {\n    // Cancel any scheduled hideAnimated:afterDelay: calls.\n    // This needs to happen here instead of in done,\n    // to avoid races if another hideAnimated:afterDelay:\n    // call comes in while the HUD is animating out.\n    [self.hideDelayTimer invalidate];\n\n    if (animated && self.showStarted) {\n        self.showStarted = nil;\n        [self animateIn:NO withType:self.animationType completion:^(BOOL finished) {\n            [self done];\n        }];\n    } else {\n        self.showStarted = nil;\n        self.bezelView.alpha = 0.f;\n        self.backgroundView.alpha = 1.f;\n        [self done];\n    }\n}\n```\n\n\n\n这里注意一下在拿当前hud时的方法.\n\n```objc\n+ (MBProgressHUD *)HUDForView:(UIView *)view {\n    NSEnumerator *subviewsEnum = [view.subviews reverseObjectEnumerator];\n    for (UIView *subview in subviewsEnum) {\n        if ([subview isKindOfClass:self]) {\n            MBProgressHUD *hud = (MBProgressHUD *)subview;\n            if (hud.hasFinished == NO) {\n                return hud;\n            }\n        }\n    }\n    return nil;\n}\n```\n\n\n\n因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。\n\n\n\n而无论是`show`方法，还是`hide`方法，在设定animated属性为YES的前提下，最终都会走到`animateIn: withType: completion:`方法：\n\n```objc\n- (void)animateIn:(BOOL)animatingIn withType:(MBProgressHUDAnimation)type completion:(void(^)(BOOL finished))completion {\n    // Automatically determine the correct zoom animation type\n    if (type == MBProgressHUDAnimationZoom) {\n        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;\n    }\n\n    CGAffineTransform small = CGAffineTransformMakeScale(0.5f, 0.5f);\n    CGAffineTransform large = CGAffineTransformMakeScale(1.5f, 1.5f);\n\n    // Set starting state\n    UIView *bezelView = self.bezelView;\n    if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomIn) {\n        bezelView.transform = small;\n    } else if (animatingIn && bezelView.alpha == 0.f && type == MBProgressHUDAnimationZoomOut) {\n        bezelView.transform = large;\n    }\n\n    // Perform animations\n    dispatch_block_t animations = ^{\n        if (animatingIn) {\n            bezelView.transform = CGAffineTransformIdentity;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomIn) {\n            bezelView.transform = large;\n        } else if (!animatingIn && type == MBProgressHUDAnimationZoomOut) {\n            bezelView.transform = small;\n        }\n        CGFloat alpha = animatingIn ? 1.f : 0.f;\n        bezelView.alpha = alpha;\n        self.backgroundView.alpha = alpha;\n    };\n    [UIView animateWithDuration:0.3 delay:0. usingSpringWithDamping:1.f initialSpringVelocity:0.f options:UIViewAnimationOptionBeginFromCurrentState animations:animations completion:completion];\n}\n\n```\n\n\n\n### 收获\n\n1. 暴露出来的API最终都会走到同一个私有方法里。\n2. 使用CADisplayLink来刷新更新频率可能很高的view。\n3. 使用循环时，注意条件可以减少循环次数，进而对程序进行优化。\n4. 在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。","slug":"MBProgressHUD源码解析","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfteldx00068h366fnqoi46","content":"<p>​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><blockquote>\n<p>MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。</p>\n</blockquote>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><blockquote>\n<h5 id=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\"><a href=\"#MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\" class=\"headerlink\" title=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\"></a>MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.</h5></blockquote>\n<h3 id=\"API结构\"><a href=\"#API结构\" class=\"headerlink\" title=\"API结构\"></a>API结构</h3><h4 id=\"MBProgressHUD\"><a href=\"#MBProgressHUD\" class=\"headerlink\" title=\"MBProgressHUD\"></a>MBProgressHUD</h4><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"keyword\">nullable</span> MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated afterDelay:(<span class=\"built_in\">NSTimeInterval</span>)delay;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a><strong>属性</strong></h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;MBProgressHUDDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nullable</span>) MBProgressHUDCompletionBlock completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> graceTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> minShowTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> removeFromSuperViewOnHide;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDMode mode;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIColor</span> *contentColor <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDAnimation animationType <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGPoint</span> offset <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGFloat</span> margin <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGSize</span> minSize <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span> = isSquare) <span class=\"built_in\">BOOL</span> square <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=areDefaultMotionEffectsEnabled) <span class=\"built_in\">BOOL</span> defaultMotionEffectsEnabled <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">NSProgress</span> *progressObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *bezelView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *backgroundView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIView</span> *customView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *label;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *detailsLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIButton</span> *button;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBRoundProgressView\"><a href=\"#MBRoundProgressView\" class=\"headerlink\" title=\"MBRoundProgressView\"></a>MBRoundProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *backgroundTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">getter</span> = isAnnular) <span class=\"built_in\">BOOL</span> annular;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBarProgressView\"><a href=\"#MBBarProgressView\" class=\"headerlink\" title=\"MBBarProgressView\"></a>MBBarProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *lineColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressRemainingColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressColor;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBackgroundView\"><a href=\"#MBBackgroundView\" class=\"headerlink\" title=\"MBBackgroundView\"></a>MBBackgroundView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) MBProgressHUDBackgroundStyle style;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIBlurEffectStyle</span> blurEffectStyle;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *color;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h3><p>外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到<code>animateIn:withType: completion:</code>，下面是方法调用流程图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg\" alt></p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [[<span class=\"keyword\">self</span> alloc] initWithView:view];</span><br><span class=\"line\">    hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    [view addSubview:hud];</span><br><span class=\"line\">    [hud showAnimated:animated];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.minShowTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the grace time is set, postpone the HUD display</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.graceTime &gt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:<span class=\"keyword\">self</span>.graceTime target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleGraceTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.graceTimer = timer;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise show the HUD immediately</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> showUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any previous animations</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.bezelView.layer removeAllAnimations];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.backgroundView.layer removeAllAnimations];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.showStarted = [<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Needed in case we hide and re-show with the same NSProgress object attached.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNSProgressDisplayLinkEnabled:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">YES</span> withType:<span class=\"keyword\">self</span>.animationType completion:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\"hide\"></a>hide</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [<span class=\"keyword\">self</span> HUDForView:view];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hud != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [hud hideAnimated:animated];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.graceTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the minShow time is set, calculate how long the HUD was shown,</span></span><br><span class=\"line\">    <span class=\"comment\">// and postpone the hiding operation if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.minShowTime &gt; <span class=\"number\">0.0</span> &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> interv = [[<span class=\"built_in\">NSDate</span> date] timeIntervalSinceDate:<span class=\"keyword\">self</span>.showStarted];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interv &lt; <span class=\"keyword\">self</span>.minShowTime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:(<span class=\"keyword\">self</span>.minShowTime - interv) target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleMinShowTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.minShowTimer = timer;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise hide the HUD immediately</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> hideUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls.</span></span><br><span class=\"line\">    <span class=\"comment\">// This needs to happen here instead of in done,</span></span><br><span class=\"line\">    <span class=\"comment\">// to avoid races if another hideAnimated:afterDelay:</span></span><br><span class=\"line\">    <span class=\"comment\">// call comes in while the HUD is animating out.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">NO</span> withType:<span class=\"keyword\">self</span>.animationType completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意一下在拿当前hud时的方法.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。</p>\n<p>而无论是<code>show</code>方法，还是<code>hide</code>方法，在设定animated属性为YES的前提下，最终都会走到<code>animateIn: withType: completion:</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)animateIn:(<span class=\"built_in\">BOOL</span>)animatingIn withType:(MBProgressHUDAnimation)type completion:(<span class=\"keyword\">void</span>(^)(<span class=\"built_in\">BOOL</span> finished))completion &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Automatically determine the correct zoom animation type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == MBProgressHUDAnimationZoom) &#123;</span><br><span class=\"line\">        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> small = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.5</span>f, <span class=\"number\">0.5</span>f);</span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> large = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.5</span>f, <span class=\"number\">1.5</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set starting state</span></span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *bezelView = <span class=\"keyword\">self</span>.bezelView;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">        bezelView.transform = small;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">        bezelView.transform = large;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Perform animations</span></span><br><span class=\"line\">    dispatch_block_t animations = ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animatingIn) &#123;</span><br><span class=\"line\">            bezelView.transform = <span class=\"built_in\">CGAffineTransformIdentity</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">            bezelView.transform = large;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">            bezelView.transform = small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> alpha = animatingIn ? <span class=\"number\">1.</span>f : <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        bezelView.alpha = alpha;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = alpha;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.3</span> delay:<span class=\"number\">0.</span> usingSpringWithDamping:<span class=\"number\">1.</span>f initialSpringVelocity:<span class=\"number\">0.</span>f options:<span class=\"built_in\">UIViewAnimationOptionBeginFromCurrentState</span> animations:animations completion:completion];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h3><ol>\n<li>暴露出来的API最终都会走到同一个私有方法里。</li>\n<li>使用CADisplayLink来刷新更新频率可能很高的view。</li>\n<li>使用循环时，注意条件可以减少循环次数，进而对程序进行优化。</li>\n<li>在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>​    在所有程序员提高的方法中，几乎所有人都提到了要多读优秀的源码。所以在学习的路途中便开始了源码阅读的计划，至于从哪个源码开始呢，首先肯定是要自己经常用的，并且比较优秀的。所以最终确定为从MBProgressHUD开始进行源码计划。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><blockquote>\n<p>MBProgressHUD是一个为iOS添加悬浮层的框架，主要用在网络请求，弹窗提示等场景。</p>\n</blockquote>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><blockquote>\n<h5 id=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\"><a href=\"#MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView\" class=\"headerlink\" title=\"MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.\"></a>MBProgressHUD包含了4个类，MBProgressHUD，MBRoundProgressView，MBBarProgressView，MBBackgroundView.</h5></blockquote>\n<h3 id=\"API结构\"><a href=\"#API结构\" class=\"headerlink\" title=\"API结构\"></a>API结构</h3><h4 id=\"MBProgressHUD\"><a href=\"#MBProgressHUD\" class=\"headerlink\" title=\"MBProgressHUD\"></a>MBProgressHUD</h4><h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">+ (<span class=\"keyword\">nullable</span> MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated afterDelay:(<span class=\"built_in\">NSTimeInterval</span>)delay;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a><strong>属性</strong></h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;MBProgressHUDDelegate&gt; delegate;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nullable</span>) MBProgressHUDCompletionBlock completionBlock;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> graceTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> minShowTime;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> removeFromSuperViewOnHide;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDMode mode;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIColor</span> *contentColor <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) MBProgressHUDAnimation animationType <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGPoint</span> offset <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGFloat</span> margin <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">CGSize</span> minSize <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span> = isSquare) <span class=\"built_in\">BOOL</span> square <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=areDefaultMotionEffectsEnabled) <span class=\"built_in\">BOOL</span> defaultMotionEffectsEnabled <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">NSProgress</span> *progressObject;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *bezelView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) MBBackgroundView *backgroundView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">nullable</span>) <span class=\"built_in\">UIView</span> *customView;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *label;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UILabel</span> *detailsLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIButton</span> *button;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBRoundProgressView\"><a href=\"#MBRoundProgressView\" class=\"headerlink\" title=\"MBRoundProgressView\"></a>MBRoundProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *backgroundTintColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">getter</span> = isAnnular) <span class=\"built_in\">BOOL</span> annular;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBarProgressView\"><a href=\"#MBBarProgressView\" class=\"headerlink\" title=\"MBBarProgressView\"></a>MBBarProgressView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> progress;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *lineColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressRemainingColor;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *progressColor;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MBBackgroundView\"><a href=\"#MBBackgroundView\" class=\"headerlink\" title=\"MBBackgroundView\"></a>MBBackgroundView</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) MBProgressHUDBackgroundStyle style;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIBlurEffectStyle</span> blurEffectStyle;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *color;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用流程\"><a href=\"#调用流程\" class=\"headerlink\" title=\"调用流程\"></a>调用流程</h3><p>外部暴露的API主要分为show和hide两个类，不论是show还是hide，方法的最终调用都会走到<code>animateIn:withType: completion:</code>，下面是方法调用流程图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79ly1g3g2vm1hh6j314e0irdis.jpg\" alt></p>\n<h3 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h3><h4 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)showHUDAddedTo:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [[<span class=\"keyword\">self</span> alloc] initWithView:view];</span><br><span class=\"line\">    hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    [view addSubview:hud];</span><br><span class=\"line\">    [hud showAnimated:animated];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.minShowTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the grace time is set, postpone the HUD display</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.graceTime &gt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:<span class=\"keyword\">self</span>.graceTime target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleGraceTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.graceTimer = timer;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise show the HUD immediately</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> showUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any previous animations</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.bezelView.layer removeAllAnimations];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.backgroundView.layer removeAllAnimations];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.showStarted = [<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Needed in case we hide and re-show with the same NSProgress object attached.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNSProgressDisplayLinkEnabled:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">YES</span> withType:<span class=\"keyword\">self</span>.animationType completion:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hide\"><a href=\"#hide\" class=\"headerlink\" title=\"hide\"></a>hide</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">BOOL</span>)hideHUDForView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBProgressHUD *hud = [<span class=\"keyword\">self</span> HUDForView:view];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hud != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        hud.removeFromSuperViewOnHide = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [hud hideAnimated:animated];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> (<span class=\"keyword\">void</span>)hideAnimated:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    MBMainThreadAssert();</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.graceTimer invalidate];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.useAnimation = animated;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the minShow time is set, calculate how long the HUD was shown,</span></span><br><span class=\"line\">    <span class=\"comment\">// and postpone the hiding operation if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.minShowTime &gt; <span class=\"number\">0.0</span> &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> interv = [[<span class=\"built_in\">NSDate</span> date] timeIntervalSinceDate:<span class=\"keyword\">self</span>.showStarted];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interv &lt; <span class=\"keyword\">self</span>.minShowTime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> timerWithTimeInterval:(<span class=\"keyword\">self</span>.minShowTime - interv) target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(handleMinShowTimer:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.minShowTimer = timer;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... otherwise hide the HUD immediately</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> hideUsingAnimation:<span class=\"keyword\">self</span>.useAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideUsingAnimation:(<span class=\"built_in\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cancel any scheduled hideAnimated:afterDelay: calls.</span></span><br><span class=\"line\">    <span class=\"comment\">// This needs to happen here instead of in done,</span></span><br><span class=\"line\">    <span class=\"comment\">// to avoid races if another hideAnimated:afterDelay:</span></span><br><span class=\"line\">    <span class=\"comment\">// call comes in while the HUD is animating out.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.hideDelayTimer invalidate];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animated &amp;&amp; <span class=\"keyword\">self</span>.showStarted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> animateIn:<span class=\"literal\">NO</span> withType:<span class=\"keyword\">self</span>.animationType completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showStarted = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bezelView.alpha = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> done];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意一下在拿当前hud时的方法.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (MBProgressHUD *)HUDForView:(<span class=\"built_in\">UIView</span> *)view &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSEnumerator</span> *subviewsEnum = [view.subviews reverseObjectEnumerator];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subview <span class=\"keyword\">in</span> subviewsEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([subview isKindOfClass:<span class=\"keyword\">self</span>]) &#123;</span><br><span class=\"line\">            MBProgressHUD *hud = (MBProgressHUD *)subview;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hud.hasFinished == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hud;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为hud通常是最后放上去的，所以这里在拿hud的时候使用反向枚举器，可以减少循环次数。</p>\n<p>而无论是<code>show</code>方法，还是<code>hide</code>方法，在设定animated属性为YES的前提下，最终都会走到<code>animateIn: withType: completion:</code>方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)animateIn:(<span class=\"built_in\">BOOL</span>)animatingIn withType:(MBProgressHUDAnimation)type completion:(<span class=\"keyword\">void</span>(^)(<span class=\"built_in\">BOOL</span> finished))completion &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Automatically determine the correct zoom animation type</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == MBProgressHUDAnimationZoom) &#123;</span><br><span class=\"line\">        type = animatingIn ? MBProgressHUDAnimationZoomIn : MBProgressHUDAnimationZoomOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> small = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.5</span>f, <span class=\"number\">0.5</span>f);</span><br><span class=\"line\">    <span class=\"built_in\">CGAffineTransform</span> large = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.5</span>f, <span class=\"number\">1.5</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set starting state</span></span><br><span class=\"line\">    <span class=\"built_in\">UIView</span> *bezelView = <span class=\"keyword\">self</span>.bezelView;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">        bezelView.transform = small;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animatingIn &amp;&amp; bezelView.alpha == <span class=\"number\">0.</span>f &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">        bezelView.transform = large;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Perform animations</span></span><br><span class=\"line\">    dispatch_block_t animations = ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (animatingIn) &#123;</span><br><span class=\"line\">            bezelView.transform = <span class=\"built_in\">CGAffineTransformIdentity</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomIn) &#123;</span><br><span class=\"line\">            bezelView.transform = large;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!animatingIn &amp;&amp; type == MBProgressHUDAnimationZoomOut) &#123;</span><br><span class=\"line\">            bezelView.transform = small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> alpha = animatingIn ? <span class=\"number\">1.</span>f : <span class=\"number\">0.</span>f;</span><br><span class=\"line\">        bezelView.alpha = alpha;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundView.alpha = alpha;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.3</span> delay:<span class=\"number\">0.</span> usingSpringWithDamping:<span class=\"number\">1.</span>f initialSpringVelocity:<span class=\"number\">0.</span>f options:<span class=\"built_in\">UIViewAnimationOptionBeginFromCurrentState</span> animations:animations completion:completion];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h3><ol>\n<li>暴露出来的API最终都会走到同一个私有方法里。</li>\n<li>使用CADisplayLink来刷新更新频率可能很高的view。</li>\n<li>使用循环时，注意条件可以减少循环次数，进而对程序进行优化。</li>\n<li>在添加hud时可以增加最小时间和延迟执行时间，避免一闪而过。</li>\n</ol>\n"},{"title":"OC对象本质","date":"2020-07-10T03:58:59.000Z","_content":"\n这里什么都没有","source":"_posts/OC对象本质.md","raw":"---\ntitle: OC对象本质\ndate: 2020-7-10 11:58:59\ntag: 学习笔记\ncategories: 学习笔记\n---\n\n这里什么都没有","slug":"OC对象本质","published":1,"updated":"2020-07-10T03:58:54.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfteldy00078h368tgx0m68","content":"<p>这里什么都没有</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里什么都没有</p>\n"},{"title":"runtime总结","date":"2019-10-31T12:00:01.000Z","_content":"\n#### 前言\n\n​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。\n\n#### runtime是什么？\n\n​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。\n\n#### 有什么用？\n\n   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。","source":"_posts/Runtime总结.md","raw":"---\ntitle: runtime总结\ndate: 2019-10-31 20:00:01\ntag: iOS\ncategories: 学习笔记\n---\n\n#### 前言\n\n​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。\n\n#### runtime是什么？\n\n​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。\n\n#### 有什么用？\n\n   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。","slug":"Runtime总结","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfteldz00088h36v5ndm8lr","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。</p>\n<h4 id=\"runtime是什么？\"><a href=\"#runtime是什么？\" class=\"headerlink\" title=\"runtime是什么？\"></a>runtime是什么？</h4><p>​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。</p>\n<h4 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h4><p>   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​    晚上关于runtime的文章有很多，但是却几乎都是在讲怎么用，并没有讲清楚原理。所以在学习了很多关于runtime的知识之后，打算自己总结一下。</p>\n<h4 id=\"runtime是什么？\"><a href=\"#runtime是什么？\" class=\"headerlink\" title=\"runtime是什么？\"></a>runtime是什么？</h4><p>​    首先，runtime是明确实体是一个库，名字叫runtime，![image-20191031200820268](/Users/jackfrow/Library/Application Support/typora-user-images/image-20191031200820268.png)。</p>\n<h4 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h4><p>   在OC中，95%的代码都是用C语言写的，剩下的就是一个runtime，说到底，oc的方法调用到最后都是调用一个函数，但是通过runtime这个系统库，它把寻找函数调用的通过封装到了runtime里面，于是OC就从C语言多了对象的概念，有了发消息的概念，说到底，就是让我们在编程时，有了不同的编程思维感受，能够更加方便的完成任务。</p>\n"},{"title":"TPKeyboardAvoiding源码解析","date":"2019-08-30T08:35:40.000Z","_content":"\n#### 简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\n\n#### 框架结构 ![TPKeyboardAvoiding](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg)\n\n其中一共有3个类,1个分类。\n\n#### 框架使用\n\n![image-20190830170555434](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg)\n\n只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。\n\n#### 源码解析\n\n由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification;\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification;\n```\n\n\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification {\n    NSDictionary *info = [notification userInfo];\n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];\n\n    CGRect keyboardRect = [self convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect)) {\n        return;\n    }\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n\n    state.keyboardRect = keyboardRect;\n\n    if ( !state.keyboardVisible ) {\n        state.priorInset = self.contentInset;\n        state.priorScrollIndicatorInsets = self.scrollIndicatorInsets;\n        state.priorPagingEnabled = self.pagingEnabled;\n    }\n\n    state.keyboardVisible = YES;\n    self.pagingEnabled = NO;\n\n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        state.priorContentSize = self.contentSize;\n        self.contentSize = CGSizeZero;\n        \n        if ( CGSizeEqualToSize(self.contentSize, CGSizeZero) ) {\n            // Set the content size, if it's not set. Do not set content size explicitly if auto-layout\n            // is being used to manage subviews\n            self.contentSize = [self TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];\n        }\n    }\n    \n    // Delay until a future run loop such that the cursor position is available in a text view\n    // In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires\n    // NOTE: Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay\n    // for the text view's current cursor position to be available\n    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC));\n    \n    dispatch_after(delay, dispatch_get_main_queue(), ^{\n        \n        // Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited\n        [UIView beginAnimations:nil context:NULL];\n        \n        [UIView setAnimationDelegate:self];\n        [UIView setAnimationWillStartSelector:@selector(keyboardViewAppear:context:)];\n        \n        [UIView setAnimationDidStopSelector:@selector(keyboardViewDisappear:finished:context:)];\n        \n        [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n        [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n        \n        self.contentInset = [self TPKeyboardAvoiding_contentInsetForKeyboard];\n        \n        UIView *firstResponder = [self TPKeyboardAvoiding_findFirstResponderBeneathView:self];\n        if ( firstResponder ) {\n            CGFloat viewableHeight = self.bounds.size.height - self.contentInset.top - self.contentInset.bottom;\n            [self setContentOffset:CGPointMake(self.contentOffset.x,\n                                               [self TPKeyboardAvoiding_idealOffsetForView:firstResponder\n                                                                     withViewingAreaHeight:viewableHeight])\n                          animated:NO];\n        }\n        \n        self.scrollIndicatorInsets = self.contentInset;\n        [self layoutIfNeeded];\n        \n        [UIView commitAnimations];\n    });\n}\n```\n\n该方法主要分为以下几个步骤:\n\n1、拿到键盘将要出现的状态；\n\n2、保存当前ScrollView的状态；\n\n3、计算当前ScrollView滚动范围；\n\n4、调整ScrollView的contentInset；\n\n5、调整ScrollView的ContentOffset。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification {\n    CGRect keyboardRect = [self convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect) && !self.keyboardAvoidingState.keyboardAnimationInProgress) {\n        return;\n    }\n    \n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n    \n    if ( !state.keyboardVisible ) {\n        return;\n    }\n    \n    state.keyboardRect = CGRectZero;\n    state.keyboardVisible = NO;\n    \n    // Restore dimensions to prior size\n    [UIView beginAnimations:nil context:NULL];\n    [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n    [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n    \n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        self.contentSize = state.priorContentSize;\n    }\n    \n    self.contentInset = state.priorInset;\n    self.scrollIndicatorInsets = state.priorScrollIndicatorInsets;\n    self.pagingEnabled = state.priorPagingEnabled;\n\t[self layoutIfNeeded];\n    [UIView commitAnimations];\n}\n```\n\n该方法主要负责ScrollView状态的恢复。\n\n至此，该框架的核心方法已经总结完毕。\n\n#### 小结\n\nTPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。\n","source":"_posts/TPKeyboardAvoiding源码解析.md","raw":"---\ntitle: TPKeyboardAvoiding源码解析\ndate: 2019-8-30 16:35:40\ntag: iOS\ncategories: 源码阅读\n---\n\n#### 简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\n\n#### 框架结构 ![TPKeyboardAvoiding](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg)\n\n其中一共有3个类,1个分类。\n\n#### 框架使用\n\n![image-20190830170555434](https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg)\n\n只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。\n\n#### 源码解析\n\n由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification;\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification;\n```\n\n\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillShow:(NSNotification*)notification {\n    NSDictionary *info = [notification userInfo];\n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];\n\n    CGRect keyboardRect = [self convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect)) {\n        return;\n    }\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n\n    state.keyboardRect = keyboardRect;\n\n    if ( !state.keyboardVisible ) {\n        state.priorInset = self.contentInset;\n        state.priorScrollIndicatorInsets = self.scrollIndicatorInsets;\n        state.priorPagingEnabled = self.pagingEnabled;\n    }\n\n    state.keyboardVisible = YES;\n    self.pagingEnabled = NO;\n\n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        state.priorContentSize = self.contentSize;\n        self.contentSize = CGSizeZero;\n        \n        if ( CGSizeEqualToSize(self.contentSize, CGSizeZero) ) {\n            // Set the content size, if it's not set. Do not set content size explicitly if auto-layout\n            // is being used to manage subviews\n            self.contentSize = [self TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];\n        }\n    }\n    \n    // Delay until a future run loop such that the cursor position is available in a text view\n    // In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires\n    // NOTE: Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay\n    // for the text view's current cursor position to be available\n    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.01 * NSEC_PER_SEC));\n    \n    dispatch_after(delay, dispatch_get_main_queue(), ^{\n        \n        // Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited\n        [UIView beginAnimations:nil context:NULL];\n        \n        [UIView setAnimationDelegate:self];\n        [UIView setAnimationWillStartSelector:@selector(keyboardViewAppear:context:)];\n        \n        [UIView setAnimationDidStopSelector:@selector(keyboardViewDisappear:finished:context:)];\n        \n        [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n        [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n        \n        self.contentInset = [self TPKeyboardAvoiding_contentInsetForKeyboard];\n        \n        UIView *firstResponder = [self TPKeyboardAvoiding_findFirstResponderBeneathView:self];\n        if ( firstResponder ) {\n            CGFloat viewableHeight = self.bounds.size.height - self.contentInset.top - self.contentInset.bottom;\n            [self setContentOffset:CGPointMake(self.contentOffset.x,\n                                               [self TPKeyboardAvoiding_idealOffsetForView:firstResponder\n                                                                     withViewingAreaHeight:viewableHeight])\n                          animated:NO];\n        }\n        \n        self.scrollIndicatorInsets = self.contentInset;\n        [self layoutIfNeeded];\n        \n        [UIView commitAnimations];\n    });\n}\n```\n\n该方法主要分为以下几个步骤:\n\n1、拿到键盘将要出现的状态；\n\n2、保存当前ScrollView的状态；\n\n3、计算当前ScrollView滚动范围；\n\n4、调整ScrollView的contentInset；\n\n5、调整ScrollView的ContentOffset。\n\n```objc\n- (void)TPKeyboardAvoiding_keyboardWillHide:(NSNotification*)notification {\n    CGRect keyboardRect = [self convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] CGRectValue] fromView:nil];\n    if (CGRectIsEmpty(keyboardRect) && !self.keyboardAvoidingState.keyboardAnimationInProgress) {\n        return;\n    }\n    \n    TPKeyboardAvoidingState *state = self.keyboardAvoidingState;\n    \n    if ( state.ignoringNotifications ) {\n        return;\n    }\n    \n    if ( !state.keyboardVisible ) {\n        return;\n    }\n    \n    state.keyboardRect = CGRectZero;\n    state.keyboardVisible = NO;\n    \n    // Restore dimensions to prior size\n    [UIView beginAnimations:nil context:NULL];\n    [UIView setAnimationCurve:[[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] intValue]];\n    [UIView setAnimationDuration:[[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]];\n    \n    if ( [self isKindOfClass:[TPKeyboardAvoidingScrollView class]] ) {\n        self.contentSize = state.priorContentSize;\n    }\n    \n    self.contentInset = state.priorInset;\n    self.scrollIndicatorInsets = state.priorScrollIndicatorInsets;\n    self.pagingEnabled = state.priorPagingEnabled;\n\t[self layoutIfNeeded];\n    [UIView commitAnimations];\n}\n```\n\n该方法主要负责ScrollView状态的恢复。\n\n至此，该框架的核心方法已经总结完毕。\n\n#### 小结\n\nTPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。\n","slug":"TPKeyboardAvoiding源码解析","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftele2000c8h36kkgczw9l","content":"<h4 id=\"简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"><a href=\"#简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\" class=\"headerlink\" title=\"简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"></a>简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。</h4><h4 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构 \"></a>框架结构 <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg\" alt=\"TPKeyboardAvoiding\"></h4><p>其中一共有3个类,1个分类。</p>\n<h4 id=\"框架使用\"><a href=\"#框架使用\" class=\"headerlink\" title=\"框架使用\"></a>框架使用</h4><p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg\" alt=\"image-20190830170555434\"></p>\n<p>只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p>由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *info = [notification userInfo];</span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardRect = keyboardRect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        state.priorInset = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        state.priorScrollIndicatorInsets = <span class=\"keyword\">self</span>.scrollIndicatorInsets;</span><br><span class=\"line\">        state.priorPagingEnabled = <span class=\"keyword\">self</span>.pagingEnabled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        state.priorContentSize = <span class=\"keyword\">self</span>.contentSize;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = <span class=\"built_in\">CGSizeZero</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">CGSizeEqualToSize</span>(<span class=\"keyword\">self</span>.contentSize, <span class=\"built_in\">CGSizeZero</span>) ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Set the content size, if it's not set. Do not set content size explicitly if auto-layout</span></span><br><span class=\"line\">            <span class=\"comment\">// is being used to manage subviews</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.contentSize = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Delay until a future run loop such that the cursor position is available in a text view</span></span><br><span class=\"line\">    <span class=\"comment\">// In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay</span></span><br><span class=\"line\">    <span class=\"comment\">// for the text view's current cursor position to be available</span></span><br><span class=\"line\">    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(delay, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited</span></span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationWillStartSelector:<span class=\"keyword\">@selector</span>(keyboardViewAppear:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(keyboardViewDisappear:finished:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentInset = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_contentInsetForKeyboard];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">UIView</span> *firstResponder = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_findFirstResponderBeneathView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( firstResponder ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">CGFloat</span> viewableHeight = <span class=\"keyword\">self</span>.bounds.size.height - <span class=\"keyword\">self</span>.contentInset.top - <span class=\"keyword\">self</span>.contentInset.bottom;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.contentOffset.x,</span><br><span class=\"line\">                                               [<span class=\"keyword\">self</span> TPKeyboardAvoiding_idealOffsetForView:firstResponder</span><br><span class=\"line\">                                                                     withViewingAreaHeight:viewableHeight])</span><br><span class=\"line\">                          animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.scrollIndicatorInsets = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要分为以下几个步骤:</p>\n<p>1、拿到键盘将要出现的状态；</p>\n<p>2、保存当前ScrollView的状态；</p>\n<p>3、计算当前ScrollView滚动范围；</p>\n<p>4、调整ScrollView的contentInset；</p>\n<p>5、调整ScrollView的ContentOffset。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect) &amp;&amp; !<span class=\"keyword\">self</span>.keyboardAvoidingState.keyboardAnimationInProgress) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.keyboardRect = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Restore dimensions to prior size</span></span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = state.priorContentSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.contentInset = state.priorInset;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.scrollIndicatorInsets = state.priorScrollIndicatorInsets;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = state.priorPagingEnabled;</span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要负责ScrollView状态的恢复。</p>\n<p>至此，该框架的核心方法已经总结完毕。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>TPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"><a href=\"#简介-TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\" class=\"headerlink\" title=\"简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。\"></a>简介 : TPKeyboardAvoiding是一个第三方键盘管理工具，作用是避免键盘遮挡视图。</h4><h4 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构 \"></a>框架结构 <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxpmgzg6j30jp082aal.jpg\" alt=\"TPKeyboardAvoiding\"></h4><p>其中一共有3个类,1个分类。</p>\n<h4 id=\"框架使用\"><a href=\"#框架使用\" class=\"headerlink\" title=\"框架使用\"></a>框架使用</h4><p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g6kxq56c6tj31eo08edh7.jpg\" alt=\"image-20190830170555434\"></p>\n<p>只需要将用到tableView的地方替换成TPKeyboardAvoidingTableView，同理适用于TPKeyboardAvoidingCollectionView，TPKeyboardAvoidingScrollView。其中整个核心都是利用UIScrollView (TPKeyboardAvoidingAdditions)来实现的。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p>由于整个核心实现都是在以下代码中实现的，所以主要针对以下两个方法进行讲解。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillShow:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *info = [notification userInfo];</span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.animationDuration = [[info objectForKey:kUIKeyboardAnimationDurationUserInfoKey] doubleValue];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[info objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardRect = keyboardRect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        state.priorInset = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        state.priorScrollIndicatorInsets = <span class=\"keyword\">self</span>.scrollIndicatorInsets;</span><br><span class=\"line\">        state.priorPagingEnabled = <span class=\"keyword\">self</span>.pagingEnabled;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        state.priorContentSize = <span class=\"keyword\">self</span>.contentSize;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = <span class=\"built_in\">CGSizeZero</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">CGSizeEqualToSize</span>(<span class=\"keyword\">self</span>.contentSize, <span class=\"built_in\">CGSizeZero</span>) ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Set the content size, if it's not set. Do not set content size explicitly if auto-layout</span></span><br><span class=\"line\">            <span class=\"comment\">// is being used to manage subviews</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.contentSize = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_calculatedContentSizeFromSubviewFrames];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Delay until a future run loop such that the cursor position is available in a text view</span></span><br><span class=\"line\">    <span class=\"comment\">// In other words, it's not available (specifically, the prior cursor position is returned) when the first keyboard position change notification fires</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Unfortunately, using dispatch_async(main_queue) did not result in a sufficient-enough delay</span></span><br><span class=\"line\">    <span class=\"comment\">// for the text view's current cursor position to be available</span></span><br><span class=\"line\">    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class=\"number\">0.01</span> * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(delay, dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Shrink view's inset by the keyboard's height, and scroll to show the text field/view being edited</span></span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationWillStartSelector:<span class=\"keyword\">@selector</span>(keyboardViewAppear:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(keyboardViewDisappear:finished:context:)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentInset = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_contentInsetForKeyboard];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">UIView</span> *firstResponder = [<span class=\"keyword\">self</span> TPKeyboardAvoiding_findFirstResponderBeneathView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( firstResponder ) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">CGFloat</span> viewableHeight = <span class=\"keyword\">self</span>.bounds.size.height - <span class=\"keyword\">self</span>.contentInset.top - <span class=\"keyword\">self</span>.contentInset.bottom;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> setContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.contentOffset.x,</span><br><span class=\"line\">                                               [<span class=\"keyword\">self</span> TPKeyboardAvoiding_idealOffsetForView:firstResponder</span><br><span class=\"line\">                                                                     withViewingAreaHeight:viewableHeight])</span><br><span class=\"line\">                          animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.scrollIndicatorInsets = <span class=\"keyword\">self</span>.contentInset;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要分为以下几个步骤:</p>\n<p>1、拿到键盘将要出现的状态；</p>\n<p>2、保存当前ScrollView的状态；</p>\n<p>3、计算当前ScrollView滚动范围；</p>\n<p>4、调整ScrollView的contentInset；</p>\n<p>5、调整ScrollView的ContentOffset。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)TPKeyboardAvoiding_keyboardWillHide:(<span class=\"built_in\">NSNotification</span>*)notification &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect = [<span class=\"keyword\">self</span> convertRect:[[[notification userInfo] objectForKey:_UIKeyboardFrameEndUserInfoKey] <span class=\"built_in\">CGRectValue</span>] fromView:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectIsEmpty</span>(keyboardRect) &amp;&amp; !<span class=\"keyword\">self</span>.keyboardAvoidingState.keyboardAnimationInProgress) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    TPKeyboardAvoidingState *state = <span class=\"keyword\">self</span>.keyboardAvoidingState;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state.ignoringNotifications ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !state.keyboardVisible ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    state.keyboardRect = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">    state.keyboardVisible = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Restore dimensions to prior size</span></span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationCurve:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>] intValue]];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:[[[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKey</span>] floatValue]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( [<span class=\"keyword\">self</span> isKindOfClass:[TPKeyboardAvoidingScrollView <span class=\"keyword\">class</span>]] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.contentSize = state.priorContentSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.contentInset = state.priorInset;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.scrollIndicatorInsets = state.priorScrollIndicatorInsets;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pagingEnabled = state.priorPagingEnabled;</span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> layoutIfNeeded];</span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要负责ScrollView状态的恢复。</p>\n<p>至此，该框架的核心方法已经总结完毕。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>TPKeyboardAvoiding主要调整contentInset和contentOffset来解决键盘的遮挡问题。以后如果需要自己设计一个解决键盘遮挡问题的框架，便可以参考此思路。</p>\n"},{"title":"2018 最新安装cocoapods.","date":"2018-04-09T14:46:49.000Z","_content":"\n> 事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.\n\n# 一、简介\n\n# 什么是CocoaPods\n\nCocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。\n\nCocoaPods的好处\n\n1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。\n\n2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。\n\n# 二、Cocoapods安装步骤\n\n## 1、升级Ruby环境\n\n> 终端输入：$ gem update --system\n\n若提示没有权限，\n\n> 这时应该输入：$ sudo gem update --system\n\n## 2、更换Ruby镜像\n\n首先移除现有的Ruby镜像\n\n> 终端输入：$ gem sources --removehttps://rubygems.org/\n\n然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）\n\n> 终端输入：$ gem sources -ahttps://gems.ruby-china.org/\n\n执行完毕之后输入gem sources -l来查看当前镜像\n\n> 终端输入：$ gem sources -l\n\n如果结果是\n\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org/\n\n说明添加成功，否则继续执行$ gem source -a  https://gems.ruby-china.org/来添加\n\n## 3、安装CocoaPods\n\n接下来开始安装\n\n> 终端输入：$ sudo gem install cocoapods\n\n如果提示没有权限:\n\n> 终端输入：$ sudo gem install -n /usr/local/bin cocoapods\n\n安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）\n\n> 终端输入：$ pod setup\n\n## 4.pod setup无法执行解决方案\n\n### 4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\n\n> pod repo remove master\n\n> pod repo add master https://git.coding.net/CocoaPods/Specs.git\n\n> pod repo update\n\n### 4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\n\n> git clone https://github.com/CocoaPods/Specs\n\n### 4.3 从浏览器 [https://github.com/CocoaPods/Specs](https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs) 下载.\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nzip下载方式.png\n\n使用ZIP下载的方式下载下来文件，解压到repos目录.\n\n### 4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\n\n之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)\n\n> ​    git init\n\n### 4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174)\n\ngithub客户端\n\n至此你的电脑上已经能够正常使用cocoapods了。","source":"_posts/cocoapods.md","raw":"---\ntitle: 2018 最新安装cocoapods.\ndate: 2018-4-09 22:46:49\ntag: iOS\ncategories: 学习笔记\n---\n\n> 事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.\n\n# 一、简介\n\n# 什么是CocoaPods\n\nCocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。\n\nCocoaPods的好处\n\n1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。\n\n2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。\n\n# 二、Cocoapods安装步骤\n\n## 1、升级Ruby环境\n\n> 终端输入：$ gem update --system\n\n若提示没有权限，\n\n> 这时应该输入：$ sudo gem update --system\n\n## 2、更换Ruby镜像\n\n首先移除现有的Ruby镜像\n\n> 终端输入：$ gem sources --removehttps://rubygems.org/\n\n然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）\n\n> 终端输入：$ gem sources -ahttps://gems.ruby-china.org/\n\n执行完毕之后输入gem sources -l来查看当前镜像\n\n> 终端输入：$ gem sources -l\n\n如果结果是\n\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.org/\n\n说明添加成功，否则继续执行$ gem source -a  https://gems.ruby-china.org/来添加\n\n## 3、安装CocoaPods\n\n接下来开始安装\n\n> 终端输入：$ sudo gem install cocoapods\n\n如果提示没有权限:\n\n> 终端输入：$ sudo gem install -n /usr/local/bin cocoapods\n\n安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）\n\n> 终端输入：$ pod setup\n\n## 4.pod setup无法执行解决方案\n\n### 4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\n\n> pod repo remove master\n\n> pod repo add master https://git.coding.net/CocoaPods/Specs.git\n\n> pod repo update\n\n### 4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\n\n> git clone https://github.com/CocoaPods/Specs\n\n### 4.3 从浏览器 [https://github.com/CocoaPods/Specs](https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs) 下载.\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\nzip下载方式.png\n\n使用ZIP下载的方式下载下来文件，解压到repos目录.\n\n### 4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\n\n之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)\n\n> ​    git init\n\n### 4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\n\n![img](https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174)\n\ngithub客户端\n\n至此你的电脑上已经能够正常使用cocoapods了。","slug":"cocoapods","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftele4000e8h36tfercbzd","content":"<blockquote>\n<p>事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h1 id=\"什么是CocoaPods\"><a href=\"#什么是CocoaPods\" class=\"headerlink\" title=\"什么是CocoaPods\"></a>什么是CocoaPods</h1><p>CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。</p>\n<p>CocoaPods的好处</p>\n<p>1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。</p>\n<p>2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</p>\n<h1 id=\"二、Cocoapods安装步骤\"><a href=\"#二、Cocoapods安装步骤\" class=\"headerlink\" title=\"二、Cocoapods安装步骤\"></a>二、Cocoapods安装步骤</h1><h2 id=\"1、升级Ruby环境\"><a href=\"#1、升级Ruby环境\" class=\"headerlink\" title=\"1、升级Ruby环境\"></a>1、升级Ruby环境</h2><blockquote>\n<p>终端输入：$ gem update –system</p>\n</blockquote>\n<p>若提示没有权限，</p>\n<blockquote>\n<p>这时应该输入：$ sudo gem update –system</p>\n</blockquote>\n<h2 id=\"2、更换Ruby镜像\"><a href=\"#2、更换Ruby镜像\" class=\"headerlink\" title=\"2、更换Ruby镜像\"></a>2、更换Ruby镜像</h2><p>首先移除现有的Ruby镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources –remove<a href=\"https://rubygems.org/\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/</a></p>\n</blockquote>\n<p>然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）</p>\n<blockquote>\n<p>终端输入：$ gem sources -a<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n</blockquote>\n<p>执行完毕之后输入gem sources -l来查看当前镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources -l</p>\n</blockquote>\n<p>如果结果是</p>\n<p><strong>* CURRENT SOURCES *</strong></p>\n<p><a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n<p>说明添加成功，否则继续执行$ gem source -a  <a href=\"https://gems.ruby-china.org/来添加\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/来添加</a></p>\n<h2 id=\"3、安装CocoaPods\"><a href=\"#3、安装CocoaPods\" class=\"headerlink\" title=\"3、安装CocoaPods\"></a>3、安装CocoaPods</h2><p>接下来开始安装</p>\n<blockquote>\n<p>终端输入：$ sudo gem install cocoapods</p>\n</blockquote>\n<p>如果提示没有权限:</p>\n<blockquote>\n<p>终端输入：$ sudo gem install -n /usr/local/bin cocoapods</p>\n</blockquote>\n<p>安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）</p>\n<blockquote>\n<p>终端输入：$ pod setup</p>\n</blockquote>\n<h2 id=\"4-pod-setup无法执行解决方案\"><a href=\"#4-pod-setup无法执行解决方案\" class=\"headerlink\" title=\"4.pod setup无法执行解决方案\"></a>4.pod setup无法执行解决方案</h2><h3 id=\"4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\"><a href=\"#4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\" class=\"headerlink\" title=\"4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\"></a>4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)</h3><blockquote>\n<p>pod repo remove master</p>\n</blockquote>\n<blockquote>\n<p>pod repo add master <a href=\"https://git.coding.net/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">https://git.coding.net/CocoaPods/Specs.git</a></p>\n</blockquote>\n<blockquote>\n<p>pod repo update</p>\n</blockquote>\n<h3 id=\"4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\"><a href=\"#4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\" class=\"headerlink\" title=\"4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\"></a>4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos</h3><blockquote>\n<p>git clone <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a></p>\n</blockquote>\n<h3 id=\"4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\"><a href=\"#4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\" class=\"headerlink\" title=\"4.3 从浏览器 https://github.com/CocoaPods/Specs 下载.\"></a>4.3 从浏览器 <a href=\"https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 下载.</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>zip下载方式.png</p>\n<p>使用ZIP下载的方式下载下来文件，解压到repos目录.</p>\n<h3 id=\"4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\"><a href=\"#4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\" class=\"headerlink\" title=\"4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\"></a>4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）</h3><p>之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)</p>\n<blockquote>\n<p>​    git init</p>\n</blockquote>\n<h3 id=\"4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\"><a href=\"#4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\" class=\"headerlink\" title=\"4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\"></a>4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174\" alt=\"img\"></p>\n<p>github客户端</p>\n<p>至此你的电脑上已经能够正常使用cocoapods了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>事件起因：制作了一个cocoapods库，已经发布成功，但是搜索不出来.删除索引文件并且重新生成也没有用，主要问题就是repos仓库的内容无法更新.</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h1 id=\"什么是CocoaPods\"><a href=\"#什么是CocoaPods\" class=\"headerlink\" title=\"什么是CocoaPods\"></a>什么是CocoaPods</h1><p>CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。</p>\n<p>CocoaPods的好处</p>\n<p>1、在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的-fno-objc-arc配置等。</p>\n<p>2、使用CocoaPods可以很方便地查找新的第三方库，这些类库是比较“标准的”，而不是网上随便找到的，这样可以让我们找到真正好用的类库。</p>\n<h1 id=\"二、Cocoapods安装步骤\"><a href=\"#二、Cocoapods安装步骤\" class=\"headerlink\" title=\"二、Cocoapods安装步骤\"></a>二、Cocoapods安装步骤</h1><h2 id=\"1、升级Ruby环境\"><a href=\"#1、升级Ruby环境\" class=\"headerlink\" title=\"1、升级Ruby环境\"></a>1、升级Ruby环境</h2><blockquote>\n<p>终端输入：$ gem update –system</p>\n</blockquote>\n<p>若提示没有权限，</p>\n<blockquote>\n<p>这时应该输入：$ sudo gem update –system</p>\n</blockquote>\n<h2 id=\"2、更换Ruby镜像\"><a href=\"#2、更换Ruby镜像\" class=\"headerlink\" title=\"2、更换Ruby镜像\"></a>2、更换Ruby镜像</h2><p>首先移除现有的Ruby镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources –remove<a href=\"https://rubygems.org/\" target=\"_blank\" rel=\"noopener\">https://rubygems.org/</a></p>\n</blockquote>\n<p>然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了）</p>\n<blockquote>\n<p>终端输入：$ gem sources -a<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n</blockquote>\n<p>执行完毕之后输入gem sources -l来查看当前镜像</p>\n<blockquote>\n<p>终端输入：$ gem sources -l</p>\n</blockquote>\n<p>如果结果是</p>\n<p><strong>* CURRENT SOURCES *</strong></p>\n<p><a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/</a></p>\n<p>说明添加成功，否则继续执行$ gem source -a  <a href=\"https://gems.ruby-china.org/来添加\" target=\"_blank\" rel=\"noopener\">https://gems.ruby-china.org/来添加</a></p>\n<h2 id=\"3、安装CocoaPods\"><a href=\"#3、安装CocoaPods\" class=\"headerlink\" title=\"3、安装CocoaPods\"></a>3、安装CocoaPods</h2><p>接下来开始安装</p>\n<blockquote>\n<p>终端输入：$ sudo gem install cocoapods</p>\n</blockquote>\n<p>如果提示没有权限:</p>\n<blockquote>\n<p>终端输入：$ sudo gem install -n /usr/local/bin cocoapods</p>\n</blockquote>\n<p>安装完成之后再执行pod setup（PS：这个过程是漫长的，要有耐心,如果你是黑人脸的话，那基本就停在这了）</p>\n<blockquote>\n<p>终端输入：$ pod setup</p>\n</blockquote>\n<h2 id=\"4-pod-setup无法执行解决方案\"><a href=\"#4-pod-setup无法执行解决方案\" class=\"headerlink\" title=\"4.pod setup无法执行解决方案\"></a>4.pod setup无法执行解决方案</h2><h3 id=\"4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\"><a href=\"#4-1-安装国内镜像源-但是目前没有找到国内仍在维护的镜像源\" class=\"headerlink\" title=\"4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)\"></a>4.1 安装国内镜像源(但是目前没有找到国内仍在维护的镜像源)</h3><blockquote>\n<p>pod repo remove master</p>\n</blockquote>\n<blockquote>\n<p>pod repo add master <a href=\"https://git.coding.net/CocoaPods/Specs.git\" target=\"_blank\" rel=\"noopener\">https://git.coding.net/CocoaPods/Specs.git</a></p>\n</blockquote>\n<blockquote>\n<p>pod repo update</p>\n</blockquote>\n<h3 id=\"4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\"><a href=\"#4-2-使用git-把镜像源克隆下来，然后放到-cocoapods-repos\" class=\"headerlink\" title=\"4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos\"></a>4.2 使用git 把镜像源克隆下来，然后放到~/.cocoapods/repos</h3><blockquote>\n<p>git clone <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a></p>\n</blockquote>\n<h3 id=\"4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\"><a href=\"#4-3-从浏览器-https-github-com-CocoaPods-Specs-下载\" class=\"headerlink\" title=\"4.3 从浏览器 https://github.com/CocoaPods/Specs 下载.\"></a>4.3 从浏览器 <a href=\"https://link.jianshu.com/?t=https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 下载.</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-b947ebd8335c8680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>zip下载方式.png</p>\n<p>使用ZIP下载的方式下载下来文件，解压到repos目录.</p>\n<h3 id=\"4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\"><a href=\"#4-4-如果你有同事的话，找他拷贝一份-cocoapods-repos目录下的文件（这种方法最轻松！！）\" class=\"headerlink\" title=\"4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）\"></a>4.4 如果你有同事的话，找他拷贝一份~/.cocoapods/repos目录下的文件（这种方法最轻松！！）</h3><p>之后 只需要cd ~/.cocoapods/repos/master路径，执行一步(如果.git不存在的话)</p>\n<blockquote>\n<p>​    git init</p>\n</blockquote>\n<h3 id=\"4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\"><a href=\"#4-5-使用github客户端进行下载镜像源-博主目前就使用的这种方式，感觉十分好用\" class=\"headerlink\" title=\"4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)\"></a>4.5 使用github客户端进行下载镜像源(博主目前就使用的这种方式，感觉十分好用)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/1877622-181805ef89d34a3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/174\" alt=\"img\"></p>\n<p>github客户端</p>\n<p>至此你的电脑上已经能够正常使用cocoapods了。</p>\n"},{"title":"iOS中常用的三方库","date":"2019-08-08T07:21:40.000Z","_content":"\nMasonry(页面布局 ) --> [Masonry](https://github.com/SnapKit/Masonry)\n\nAFNetworking(网络请求)  --> [AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\nCocoaLumberjack(记录log) --> [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)\n\nYTKNetwork(网络请求使用层优化) --> [YTKNetwork](https://github.com/yuantiku/YTKNetwork)\n\nSAMKeychain(用来存储账号密码) --> [SAMKeychain](https://github.com/soffes/SAMKeychain)\n\nSDWebImage(图片加载) --> [SDWebImage](https://github.com/SDWebImage/SDWebImage)\n\nMBProgressHUD(进度指示) --> [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nIQKeyboardManager(键盘管理) --> [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\nReactiveObjC(OC响应式框架) --> [ReactiveObjC](https://github.com/ReactiveCocoa/ReactiveObjC)\n\nRJBadgeKit(小红点统一管理工具) --> [RJBadgeKit](https://github.com/RylanJIN/RJBadgeKit)\n\nWMPageController(分页控制管理器) --> [WMPageController](https://github.com/wangmchn/WMPageController)\n\nYYKit(工具库) --> [YYKit](https://github.com/ibireme/YYKit)\n\nIDMPhotoBrowser(图片浏览器) --> [IDMPhotoBrowser](https://github.com/thiagoperes/IDMPhotoBrowser)\n\nDZNEmptyDataSet(空数据设置) --> [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\nMLeaksFinder(内存泄露检测) --> [MLeaksFinder](https://github.com/Tencent/MLeaksFinder)\n\nBagel（网络请求打印） --> [Bagel](https://github.com/yagiz/Bagel)","source":"_posts/iOS中常用 的三方库.md","raw":"---\ntitle: iOS中常用的三方库\ntag: iOS\ndate: 2019-8-8 15:21:40\ncategories: 学习总结\n---\n\nMasonry(页面布局 ) --> [Masonry](https://github.com/SnapKit/Masonry)\n\nAFNetworking(网络请求)  --> [AFNetworking](https://github.com/AFNetworking/AFNetworking)\n\nCocoaLumberjack(记录log) --> [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)\n\nYTKNetwork(网络请求使用层优化) --> [YTKNetwork](https://github.com/yuantiku/YTKNetwork)\n\nSAMKeychain(用来存储账号密码) --> [SAMKeychain](https://github.com/soffes/SAMKeychain)\n\nSDWebImage(图片加载) --> [SDWebImage](https://github.com/SDWebImage/SDWebImage)\n\nMBProgressHUD(进度指示) --> [MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nIQKeyboardManager(键盘管理) --> [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\nReactiveObjC(OC响应式框架) --> [ReactiveObjC](https://github.com/ReactiveCocoa/ReactiveObjC)\n\nRJBadgeKit(小红点统一管理工具) --> [RJBadgeKit](https://github.com/RylanJIN/RJBadgeKit)\n\nWMPageController(分页控制管理器) --> [WMPageController](https://github.com/wangmchn/WMPageController)\n\nYYKit(工具库) --> [YYKit](https://github.com/ibireme/YYKit)\n\nIDMPhotoBrowser(图片浏览器) --> [IDMPhotoBrowser](https://github.com/thiagoperes/IDMPhotoBrowser)\n\nDZNEmptyDataSet(空数据设置) --> [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\nMLeaksFinder(内存泄露检测) --> [MLeaksFinder](https://github.com/Tencent/MLeaksFinder)\n\nBagel（网络请求打印） --> [Bagel](https://github.com/yagiz/Bagel)","slug":"iOS中常用 的三方库","published":1,"updated":"2020-07-10T03:57:05.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftele7000j8h369gn20jxp","content":"<p>Masonry(页面布局 ) –&gt; <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a></p>\n<p>AFNetworking(网络请求)  –&gt; <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></p>\n<p>CocoaLumberjack(记录log) –&gt; <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\" target=\"_blank\" rel=\"noopener\">CocoaLumberjack</a></p>\n<p>YTKNetwork(网络请求使用层优化) –&gt; <a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a></p>\n<p>SAMKeychain(用来存储账号密码) –&gt; <a href=\"https://github.com/soffes/SAMKeychain\" target=\"_blank\" rel=\"noopener\">SAMKeychain</a></p>\n<p>SDWebImage(图片加载) –&gt; <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<p>MBProgressHUD(进度指示) –&gt; <a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a></p>\n<p>IQKeyboardManager(键盘管理) –&gt; <a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a></p>\n<p>ReactiveObjC(OC响应式框架) –&gt; <a href=\"https://github.com/ReactiveCocoa/ReactiveObjC\" target=\"_blank\" rel=\"noopener\">ReactiveObjC</a></p>\n<p>RJBadgeKit(小红点统一管理工具) –&gt; <a href=\"https://github.com/RylanJIN/RJBadgeKit\" target=\"_blank\" rel=\"noopener\">RJBadgeKit</a></p>\n<p>WMPageController(分页控制管理器) –&gt; <a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a></p>\n<p>YYKit(工具库) –&gt; <a href=\"https://github.com/ibireme/YYKit\" target=\"_blank\" rel=\"noopener\">YYKit</a></p>\n<p>IDMPhotoBrowser(图片浏览器) –&gt; <a href=\"https://github.com/thiagoperes/IDMPhotoBrowser\" target=\"_blank\" rel=\"noopener\">IDMPhotoBrowser</a></p>\n<p>DZNEmptyDataSet(空数据设置) –&gt; <a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a></p>\n<p>MLeaksFinder(内存泄露检测) –&gt; <a href=\"https://github.com/Tencent/MLeaksFinder\" target=\"_blank\" rel=\"noopener\">MLeaksFinder</a></p>\n<p>Bagel（网络请求打印） –&gt; <a href=\"https://github.com/yagiz/Bagel\" target=\"_blank\" rel=\"noopener\">Bagel</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Masonry(页面布局 ) –&gt; <a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a></p>\n<p>AFNetworking(网络请求)  –&gt; <a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></p>\n<p>CocoaLumberjack(记录log) –&gt; <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\" target=\"_blank\" rel=\"noopener\">CocoaLumberjack</a></p>\n<p>YTKNetwork(网络请求使用层优化) –&gt; <a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a></p>\n<p>SAMKeychain(用来存储账号密码) –&gt; <a href=\"https://github.com/soffes/SAMKeychain\" target=\"_blank\" rel=\"noopener\">SAMKeychain</a></p>\n<p>SDWebImage(图片加载) –&gt; <a href=\"https://github.com/SDWebImage/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<p>MBProgressHUD(进度指示) –&gt; <a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a></p>\n<p>IQKeyboardManager(键盘管理) –&gt; <a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a></p>\n<p>ReactiveObjC(OC响应式框架) –&gt; <a href=\"https://github.com/ReactiveCocoa/ReactiveObjC\" target=\"_blank\" rel=\"noopener\">ReactiveObjC</a></p>\n<p>RJBadgeKit(小红点统一管理工具) –&gt; <a href=\"https://github.com/RylanJIN/RJBadgeKit\" target=\"_blank\" rel=\"noopener\">RJBadgeKit</a></p>\n<p>WMPageController(分页控制管理器) –&gt; <a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a></p>\n<p>YYKit(工具库) –&gt; <a href=\"https://github.com/ibireme/YYKit\" target=\"_blank\" rel=\"noopener\">YYKit</a></p>\n<p>IDMPhotoBrowser(图片浏览器) –&gt; <a href=\"https://github.com/thiagoperes/IDMPhotoBrowser\" target=\"_blank\" rel=\"noopener\">IDMPhotoBrowser</a></p>\n<p>DZNEmptyDataSet(空数据设置) –&gt; <a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a></p>\n<p>MLeaksFinder(内存泄露检测) –&gt; <a href=\"https://github.com/Tencent/MLeaksFinder\" target=\"_blank\" rel=\"noopener\">MLeaksFinder</a></p>\n<p>Bagel（网络请求打印） –&gt; <a href=\"https://github.com/yagiz/Bagel\" target=\"_blank\" rel=\"noopener\">Bagel</a></p>\n"},{"title":"iOS pem 证书生成","date":"2019-01-15T08:52:59.000Z","_content":"\n# pem文件概述\n\n​\tpem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。\n\n# 生成.pem的方法\n\n​\t生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。\n\n## 分别生成\n\n### 生成cert文件\n\n![F9EE8275-559C-496A-8B9D-57E6C0DD2308.png](https://i.loli.net/2019/01/16/5c3ea96bedbdb.png)\n\n![C4B31488-5045-44C0-AE65-532E13E210B5.png](https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png)\n\n![8CADA519-4E76-4242-A40F-58A6FF9BA487.png](https://i.loli.net/2019/01/16/5c3ea96a5cf94.png)\n\n\n\n### 生成key文件\n\n![3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png](https://i.loli.net/2019/01/16/5c3ea96bd197e.png)\n\n![5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png](https://i.loli.net/2019/01/16/5c3ea96a4926e.png)\n\n![1C5B5045-8DC1-4A7F-A822-B8A76549A535.png](https://i.loli.net/2019/01/16/5c3ea96a30943.png)\n\n\n\n### 生成cert pem文件​\t\n\n​\t将apns-dev-cert.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12\n```\n\n\n\n### 生成key pem文件\n\n​\t将apns-dev-key.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12\n```\n\n​\t移除key pem的密码\n\n```\nopenssl rsa -in apns-dev-key.pem -out apns-dev-key.pem\n```\n\n\n\n### 合成推送需要的pem文件\n\n​\t将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件\n\n```\ncat apns-dev-cert.pem apns-dev-key.pem > apns-dev.pem\n```\n\n\n\n### 测试pem文\n\n在终端测试：\n\n```\nopenssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem\n```\n\n终端最后显示以下内容，表示配置pem文件成功，\n\nKey-Arg   : None\n\nStart Time: 1467854873\n\nTimeout   : 300 (sec)\n\nVerify return code: 0 (ok)\n\n## 直接生成\n\n​\t**同时**选中cert和key,导出一份p12文件。\n\n![QQ20190116-102210@2x.png](https://i.loli.net/2019/01/16/5c3ea96ed3b56.png)\n\n​\t将p12文件转化成后台需要的pem证书.\n\n```\nopenssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts\n```\n\n### 工具\n\n​\t平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。\n\n[*Knuff*](https://github.com/KnuffApp/Knuff)\n\n[*SmartPush*](https://github.com/shaojiankui/SmartPush)\n\n## 参考文章\n\n[iOS推送证书生成pem文件（详细生成过程）](https://www.jianshu.com/p/cc952ea07a08)\n\n[Generate .pem file Used to setup Apple Push Notification](https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification)\n\n","source":"_posts/iOS生成.pem推送证书.md","raw":"---\ntitle: iOS pem 证书生成\ndate: 2019-1-15 16:52:59\ntag: iOS\ncategories: 学习笔记\n---\n\n# pem文件概述\n\n​\tpem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。\n\n# 生成.pem的方法\n\n​\t生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。\n\n## 分别生成\n\n### 生成cert文件\n\n![F9EE8275-559C-496A-8B9D-57E6C0DD2308.png](https://i.loli.net/2019/01/16/5c3ea96bedbdb.png)\n\n![C4B31488-5045-44C0-AE65-532E13E210B5.png](https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png)\n\n![8CADA519-4E76-4242-A40F-58A6FF9BA487.png](https://i.loli.net/2019/01/16/5c3ea96a5cf94.png)\n\n\n\n### 生成key文件\n\n![3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png](https://i.loli.net/2019/01/16/5c3ea96bd197e.png)\n\n![5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png](https://i.loli.net/2019/01/16/5c3ea96a4926e.png)\n\n![1C5B5045-8DC1-4A7F-A822-B8A76549A535.png](https://i.loli.net/2019/01/16/5c3ea96a30943.png)\n\n\n\n### 生成cert pem文件​\t\n\n​\t将apns-dev-cert.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12\n```\n\n\n\n### 生成key pem文件\n\n​\t将apns-dev-key.p12文件转换为pem格式\n\n```\nopenssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12\n```\n\n​\t移除key pem的密码\n\n```\nopenssl rsa -in apns-dev-key.pem -out apns-dev-key.pem\n```\n\n\n\n### 合成推送需要的pem文件\n\n​\t将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件\n\n```\ncat apns-dev-cert.pem apns-dev-key.pem > apns-dev.pem\n```\n\n\n\n### 测试pem文\n\n在终端测试：\n\n```\nopenssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem\n```\n\n终端最后显示以下内容，表示配置pem文件成功，\n\nKey-Arg   : None\n\nStart Time: 1467854873\n\nTimeout   : 300 (sec)\n\nVerify return code: 0 (ok)\n\n## 直接生成\n\n​\t**同时**选中cert和key,导出一份p12文件。\n\n![QQ20190116-102210@2x.png](https://i.loli.net/2019/01/16/5c3ea96ed3b56.png)\n\n​\t将p12文件转化成后台需要的pem证书.\n\n```\nopenssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts\n```\n\n### 工具\n\n​\t平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。\n\n[*Knuff*](https://github.com/KnuffApp/Knuff)\n\n[*SmartPush*](https://github.com/shaojiankui/SmartPush)\n\n## 参考文章\n\n[iOS推送证书生成pem文件（详细生成过程）](https://www.jianshu.com/p/cc952ea07a08)\n\n[Generate .pem file Used to setup Apple Push Notification](https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification)\n\n","slug":"iOS生成.pem推送证书","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftelea000l8h36sdbzcd7t","content":"<h1 id=\"pem文件概述\"><a href=\"#pem文件概述\" class=\"headerlink\" title=\"pem文件概述\"></a>pem文件概述</h1><p>​    pem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。</p>\n<h1 id=\"生成-pem的方法\"><a href=\"#生成-pem的方法\" class=\"headerlink\" title=\"生成.pem的方法\"></a>生成.pem的方法</h1><p>​    生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。</p>\n<h2 id=\"分别生成\"><a href=\"#分别生成\" class=\"headerlink\" title=\"分别生成\"></a>分别生成</h2><h3 id=\"生成cert文件\"><a href=\"#生成cert文件\" class=\"headerlink\" title=\"生成cert文件\"></a>生成cert文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bedbdb.png\" alt=\"F9EE8275-559C-496A-8B9D-57E6C0DD2308.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png\" alt=\"C4B31488-5045-44C0-AE65-532E13E210B5.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a5cf94.png\" alt=\"8CADA519-4E76-4242-A40F-58A6FF9BA487.png\"></p>\n<h3 id=\"生成key文件\"><a href=\"#生成key文件\" class=\"headerlink\" title=\"生成key文件\"></a>生成key文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bd197e.png\" alt=\"3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a4926e.png\" alt=\"5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a30943.png\" alt=\"1C5B5045-8DC1-4A7F-A822-B8A76549A535.png\"></p>\n<h3 id=\"生成cert-pem文件​\"><a href=\"#生成cert-pem文件​\" class=\"headerlink\" title=\"生成cert pem文件​\"></a>生成cert pem文件​</h3><p>​    将apns-dev-cert.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成key-pem文件\"><a href=\"#生成key-pem文件\" class=\"headerlink\" title=\"生成key pem文件\"></a>生成key pem文件</h3><p>​    将apns-dev-key.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12</span><br></pre></td></tr></table></figure>\n\n<p>​    移除key pem的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in apns-dev-key.pem -out apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合成推送需要的pem文件\"><a href=\"#合成推送需要的pem文件\" class=\"headerlink\" title=\"合成推送需要的pem文件\"></a>合成推送需要的pem文件</h3><p>​    将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat apns-dev-cert.pem apns-dev-key.pem &gt; apns-dev.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试pem文\"><a href=\"#测试pem文\" class=\"headerlink\" title=\"测试pem文\"></a>测试pem文</h3><p>在终端测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>终端最后显示以下内容，表示配置pem文件成功，</p>\n<p>Key-Arg   : None</p>\n<p>Start Time: 1467854873</p>\n<p>Timeout   : 300 (sec)</p>\n<p>Verify return code: 0 (ok)</p>\n<h2 id=\"直接生成\"><a href=\"#直接生成\" class=\"headerlink\" title=\"直接生成\"></a>直接生成</h2><p>​    <strong>同时</strong>选中cert和key,导出一份p12文件。</p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96ed3b56.png\" alt=\"QQ20190116-102210@2x.png\"></p>\n<p>​    将p12文件转化成后台需要的pem证书.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>​    平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。</p>\n<p><a href=\"https://github.com/KnuffApp/Knuff\" target=\"_blank\" rel=\"noopener\"><em>Knuff</em></a></p>\n<p><a href=\"https://github.com/shaojiankui/SmartPush\" target=\"_blank\" rel=\"noopener\"><em>SmartPush</em></a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/p/cc952ea07a08\" target=\"_blank\" rel=\"noopener\">iOS推送证书生成pem文件（详细生成过程）</a></p>\n<p><a href=\"https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification\" target=\"_blank\" rel=\"noopener\">Generate .pem file Used to setup Apple Push Notification</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pem文件概述\"><a href=\"#pem文件概述\" class=\"headerlink\" title=\"pem文件概述\"></a>pem文件概述</h1><p>​    pem文件是服务器向苹果服务器做推送时候需要的文件，主要是给php向苹果服务器验证时使用，下面介绍一下pem文件的生成。</p>\n<h1 id=\"生成-pem的方法\"><a href=\"#生成-pem的方法\" class=\"headerlink\" title=\"生成.pem的方法\"></a>生成.pem的方法</h1><p>​    生成pem主要有两种方式,1种是分别生成.pem的cert和生成.pem的key,然后再合成服务器需要的.pem。另一种是直接生成服务器需要的.pem。</p>\n<h2 id=\"分别生成\"><a href=\"#分别生成\" class=\"headerlink\" title=\"分别生成\"></a>分别生成</h2><h3 id=\"生成cert文件\"><a href=\"#生成cert文件\" class=\"headerlink\" title=\"生成cert文件\"></a>生成cert文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bedbdb.png\" alt=\"F9EE8275-559C-496A-8B9D-57E6C0DD2308.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96b7ee4a.png\" alt=\"C4B31488-5045-44C0-AE65-532E13E210B5.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a5cf94.png\" alt=\"8CADA519-4E76-4242-A40F-58A6FF9BA487.png\"></p>\n<h3 id=\"生成key文件\"><a href=\"#生成key文件\" class=\"headerlink\" title=\"生成key文件\"></a>生成key文件</h3><p><img src=\"https://i.loli.net/2019/01/16/5c3ea96bd197e.png\" alt=\"3185DA78-5055-40AA-A8AD-6A2487AEAC7F.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a4926e.png\" alt=\"5CCCADF1-8D36-455B-A5E8-F1D9E6385AB6.png\"></p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96a30943.png\" alt=\"1C5B5045-8DC1-4A7F-A822-B8A76549A535.png\"></p>\n<h3 id=\"生成cert-pem文件​\"><a href=\"#生成cert-pem文件​\" class=\"headerlink\" title=\"生成cert pem文件​\"></a>生成cert pem文件​</h3><p>​    将apns-dev-cert.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成key-pem文件\"><a href=\"#生成key-pem文件\" class=\"headerlink\" title=\"生成key pem文件\"></a>生成key pem文件</h3><p>​    将apns-dev-key.p12文件转换为pem格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12</span><br></pre></td></tr></table></figure>\n\n<p>​    移除key pem的密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rsa -in apns-dev-key.pem -out apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合成推送需要的pem文件\"><a href=\"#合成推送需要的pem文件\" class=\"headerlink\" title=\"合成推送需要的pem文件\"></a>合成推送需要的pem文件</h3><p>​    将apns-dev-cert.pem和apns-dev-key.pem文件合成为apns-dev.pem文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat apns-dev-cert.pem apns-dev-key.pem &gt; apns-dev.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试pem文\"><a href=\"#测试pem文\" class=\"headerlink\" title=\"测试pem文\"></a>测试pem文</h3><p>在终端测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem</span><br></pre></td></tr></table></figure>\n\n<p>终端最后显示以下内容，表示配置pem文件成功，</p>\n<p>Key-Arg   : None</p>\n<p>Start Time: 1467854873</p>\n<p>Timeout   : 300 (sec)</p>\n<p>Verify return code: 0 (ok)</p>\n<h2 id=\"直接生成\"><a href=\"#直接生成\" class=\"headerlink\" title=\"直接生成\"></a>直接生成</h2><p>​    <strong>同时</strong>选中cert和key,导出一份p12文件。</p>\n<p><img src=\"https://i.loli.net/2019/01/16/5c3ea96ed3b56.png\" alt=\"QQ20190116-102210@2x.png\"></p>\n<p>​    将p12文件转化成后台需要的pem证书.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in push_hilife.p12 -out pushcert.pem -nodes -clcerts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>​    平时涉及到推送都不太好测试，这时候怎么办呢，有网友给出了解决方案，使用它们开发好的工具可以调试推送。</p>\n<p><a href=\"https://github.com/KnuffApp/Knuff\" target=\"_blank\" rel=\"noopener\"><em>Knuff</em></a></p>\n<p><a href=\"https://github.com/shaojiankui/SmartPush\" target=\"_blank\" rel=\"noopener\"><em>SmartPush</em></a></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.jianshu.com/p/cc952ea07a08\" target=\"_blank\" rel=\"noopener\">iOS推送证书生成pem文件（详细生成过程）</a></p>\n<p><a href=\"https://stackoverflow.com/questions/21250510/generate-pem-file-used-to-setup-apple-push-notification\" target=\"_blank\" rel=\"noopener\">Generate .pem file Used to setup Apple Push Notification</a></p>\n"},{"title":"风景","date":"2018-03-28T14:46:49.000Z","_content":"\n![](http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg)\n\n![Caption](http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg)\n\n![](http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg)\n","source":"_posts/imags.md","raw":"---\ntitle: 风景\ndate: 2018-3-28 22:46:49\ntag: 旅行\ncategories: 风景\n---\n\n![](http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg)\n\n![Caption](http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg)\n\n![](http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg)\n","slug":"imags","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftelec000q8h36gimq4fyr","content":"<p><img src=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\" alt></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\" alt=\"Caption\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg\" alt></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg\" alt=\"Caption\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg\" alt></p>\n"},{"title":"服务端部署shadowsocks","date":"2019-11-14T06:09:01.000Z","_content":"\n#### 前言\n\n​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。\n\n#### 安装shadowsocks服务\n\n​      话不多说，直接进入正题。\n\n##### 安装pip\n\n​      如果你的操作系统是Centos，可以使用以下命令:\n\n   ```python\nyum install python-setuptools && easy_install pip\n   ```\n\n​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :\n\n```python\napt-get install python-pip\n```\n\n#####  安装shadowsocks\n\n```python\npip install shadowsocks\n```\n\n##### 配置**shadowsocks**\n\n在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 *mkdir /etc/shadowsocks* 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：\n\n```sh\n{\n\n\"server\":\"0.0.0.0\",\n\n\"server_port\":1234,\n\n\"local_address\":\"127.0.0.1\",\n\n\"local_port\":1080,\n\"password\":\"******\",\n\n\"timeout\":300,\n\n\"method\":\"aes-256-cfb\",\n\n\"fast_open\":false,\n\n\"workers\": 1\n\n}\n```\n\n主要参数说明\n\n```sh\n{\n\"server\":\"\",     ##服务器ip地址\n\"server_port\":1234,  ##代理端口\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080, ##本地监听端口\n\"password\":\"******\",   ##连接密码\n\"timeout\":300,\n\"method\":\"aes-256-cfb\", ##加密方式\n\"dast_open\":false\n}\n```\n\n##### shadowsocks的启动与关闭\n\n- 使用 *ssserver -c /etc/shadowsocks/config.json -d start* 命令启动\n- 使用 *netstat -tunlp* 命令查看\n- 使用*ssserver -c /etc/shadowsocks/config.json -d stop*命令停止\n\n##### 连接shadowsocks\n\n​    下载一个shadowsocks的客户端(mac版本):[shadowsocks](https://github.com/shadowsocks/ShadowsocksX-NG/releases/)\n\n​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可\n\n![image-20191114143926410](https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg)\n\n","source":"_posts/在服务器上部署shadowsocks服务.md","raw":"---\ntitle: 服务端部署shadowsocks\ndate: 2019-11-14 14:09:01\ntag: 网络\ncategories: 工具\n---\n\n#### 前言\n\n​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。\n\n#### 安装shadowsocks服务\n\n​      话不多说，直接进入正题。\n\n##### 安装pip\n\n​      如果你的操作系统是Centos，可以使用以下命令:\n\n   ```python\nyum install python-setuptools && easy_install pip\n   ```\n\n​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :\n\n```python\napt-get install python-pip\n```\n\n#####  安装shadowsocks\n\n```python\npip install shadowsocks\n```\n\n##### 配置**shadowsocks**\n\n在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 *mkdir /etc/shadowsocks* 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：\n\n```sh\n{\n\n\"server\":\"0.0.0.0\",\n\n\"server_port\":1234,\n\n\"local_address\":\"127.0.0.1\",\n\n\"local_port\":1080,\n\"password\":\"******\",\n\n\"timeout\":300,\n\n\"method\":\"aes-256-cfb\",\n\n\"fast_open\":false,\n\n\"workers\": 1\n\n}\n```\n\n主要参数说明\n\n```sh\n{\n\"server\":\"\",     ##服务器ip地址\n\"server_port\":1234,  ##代理端口\n\"local_address\":\"127.0.0.1\",\n\"local_port\":1080, ##本地监听端口\n\"password\":\"******\",   ##连接密码\n\"timeout\":300,\n\"method\":\"aes-256-cfb\", ##加密方式\n\"dast_open\":false\n}\n```\n\n##### shadowsocks的启动与关闭\n\n- 使用 *ssserver -c /etc/shadowsocks/config.json -d start* 命令启动\n- 使用 *netstat -tunlp* 命令查看\n- 使用*ssserver -c /etc/shadowsocks/config.json -d stop*命令停止\n\n##### 连接shadowsocks\n\n​    下载一个shadowsocks的客户端(mac版本):[shadowsocks](https://github.com/shadowsocks/ShadowsocksX-NG/releases/)\n\n​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可\n\n![image-20191114143926410](https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg)\n\n","slug":"在服务器上部署shadowsocks服务","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcfteled000s8h36zek4lg68","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。</p>\n<h4 id=\"安装shadowsocks服务\"><a href=\"#安装shadowsocks服务\" class=\"headerlink\" title=\"安装shadowsocks服务\"></a>安装shadowsocks服务</h4><p>​      话不多说，直接进入正题。</p>\n<h5 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h5><p>​      如果你的操作系统是Centos，可以使用以下命令:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置<strong>shadowsocks</strong></h5><p>在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 <em>mkdir /etc/shadowsocks</em> 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fast_open\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"workers\"</span>: 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要参数说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"\"</span>,     <span class=\"comment\">##服务器ip地址</span></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,  <span class=\"comment\">##代理端口</span></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080, <span class=\"comment\">##本地监听端口</span></span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,   <span class=\"comment\">##连接密码</span></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>, <span class=\"comment\">##加密方式</span></span><br><span class=\"line\"><span class=\"string\">\"dast_open\"</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shadowsocks的启动与关闭\"><a href=\"#shadowsocks的启动与关闭\" class=\"headerlink\" title=\"shadowsocks的启动与关闭\"></a>shadowsocks的启动与关闭</h5><ul>\n<li>使用 <em>ssserver -c /etc/shadowsocks/config.json -d start</em> 命令启动</li>\n<li>使用 <em>netstat -tunlp</em> 命令查看</li>\n<li>使用<em>ssserver -c /etc/shadowsocks/config.json -d stop</em>命令停止</li>\n</ul>\n<h5 id=\"连接shadowsocks\"><a href=\"#连接shadowsocks\" class=\"headerlink\" title=\"连接shadowsocks\"></a>连接shadowsocks</h5><p>​    下载一个shadowsocks的客户端(mac版本):<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/\" target=\"_blank\" rel=\"noopener\">shadowsocks</a></p>\n<p>​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg\" alt=\"image-20191114143926410\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>​        对于技术人员来说，网上查资料解决问题已经是非常重要的一个环节，谷歌的引擎搜索准确度也是世界上的顶尖水平，但是由于国内不能直接访问谷歌，所以出现了一些可以翻墙的技术和工具,shadowsocks就是其中之一。</p>\n<h4 id=\"安装shadowsocks服务\"><a href=\"#安装shadowsocks服务\" class=\"headerlink\" title=\"安装shadowsocks服务\"></a>安装shadowsocks服务</h4><p>​      话不多说，直接进入正题。</p>\n<h5 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h5><p>​      如果你的操作系统是Centos，可以使用以下命令:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>​     如果你的操作系统是Debian或者Ubuntu,可以使用以下命令 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置<strong>shadowsocks</strong></h5><p>在/etc/shadowsocks 文件夹下（如果没有改文件夹，则使用 <em>mkdir /etc/shadowsocks</em> 命令新建一个文件夹）新建一个配置文件config.json，并写入如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fast_open\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"workers\"</span>: 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要参数说明</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"\"</span>,     <span class=\"comment\">##服务器ip地址</span></span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:1234,  <span class=\"comment\">##代理端口</span></span><br><span class=\"line\"><span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080, <span class=\"comment\">##本地监听端口</span></span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"******\"</span>,   <span class=\"comment\">##连接密码</span></span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:300,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>, <span class=\"comment\">##加密方式</span></span><br><span class=\"line\"><span class=\"string\">\"dast_open\"</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shadowsocks的启动与关闭\"><a href=\"#shadowsocks的启动与关闭\" class=\"headerlink\" title=\"shadowsocks的启动与关闭\"></a>shadowsocks的启动与关闭</h5><ul>\n<li>使用 <em>ssserver -c /etc/shadowsocks/config.json -d start</em> 命令启动</li>\n<li>使用 <em>netstat -tunlp</em> 命令查看</li>\n<li>使用<em>ssserver -c /etc/shadowsocks/config.json -d stop</em>命令停止</li>\n</ul>\n<h5 id=\"连接shadowsocks\"><a href=\"#连接shadowsocks\" class=\"headerlink\" title=\"连接shadowsocks\"></a>连接shadowsocks</h5><p>​    下载一个shadowsocks的客户端(mac版本):<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/\" target=\"_blank\" rel=\"noopener\">shadowsocks</a></p>\n<p>​    打开shadowsocks的客户端,配置服务器IP地址、服务器端口，密码、以及加密方式点击确认即可</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8xk945qrpj30i60k8dh6.jpg\" alt=\"image-20191114143926410\"></p>\n"},{"title":"2018年度总结","date":"2018-12-29T08:52:59.000Z","_content":"\n​\t![图片](https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619)\n\n​\t前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。\n\n​\t本片文章主要分为三个部分:\n\n​\t1.今年的收获。\n\n​\t2.今年的遗憾。\n\n​\t3.明年的计划。\n\n# 今年的收获\n\n## 思想上的收获\n\n- 今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。\n\n## 生活娱乐上的收获\n\n- 王者荣耀上了王者(准确的说是25星)\n\n## 工作上的收获\n\n- 读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》\n\n# 今年的遗憾\n\n## 工作\n\n- 今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。\n\n## 生活\n\n1. 本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。\n2. 由于健身缺少计划，也没能坚持下去。\n\n# 明年的计划\n\n写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。\n\n## 生活\n\n![健身](https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n- 明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉\n- 王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。\n\n## 工作\n\n![读书](https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1)\n\n### 技术类书籍(4本+)\n\n- iOS面试之道（已完成）\n- Objective-C高级编程\n- 测试驱动的iOS开发\n- 图解HTTP\n\n### 非技术类书籍(3本+)\n\n+ 人类简史（已完成）\n+ 未来简史\n+ 微习惯（已完成）\n+ 三体\n+ 今日简史\n\n### 源码阅读\n\n- MBPogressHUD（已完成）\n- MJRefresh\n- Toast（已完成）\n- DZNEmptyDataSet（已完成）\n- SDWebImage\n- IDMPhotoBrowser\n- YYKit\n\n### 跨平台框架\n\n- 尝试一下ReactNative.\n\n### 学习基金\n\n- 成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）\n\n### Github\n\n+ 计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用\n\n### 博客(6篇+)\n\n+ 每两个月写一篇博客来总结自己\n\n","source":"_posts/年度总结.md","raw":"---\ntitle: 2018年度总结\ndate: 2018-12-29 16:52:59\ntag: 年度总结\ncategories: 学习笔记\n---\n\n​\t![图片](https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619)\n\n​\t前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。\n\n​\t本片文章主要分为三个部分:\n\n​\t1.今年的收获。\n\n​\t2.今年的遗憾。\n\n​\t3.明年的计划。\n\n# 今年的收获\n\n## 思想上的收获\n\n- 今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。\n\n## 生活娱乐上的收获\n\n- 王者荣耀上了王者(准确的说是25星)\n\n## 工作上的收获\n\n- 读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》\n\n# 今年的遗憾\n\n## 工作\n\n- 今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。\n\n## 生活\n\n1. 本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。\n2. 由于健身缺少计划，也没能坚持下去。\n\n# 明年的计划\n\n写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。\n\n## 生活\n\n![健身](https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n- 明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉\n- 王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。\n\n## 工作\n\n![读书](https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1)\n\n### 技术类书籍(4本+)\n\n- iOS面试之道（已完成）\n- Objective-C高级编程\n- 测试驱动的iOS开发\n- 图解HTTP\n\n### 非技术类书籍(3本+)\n\n+ 人类简史（已完成）\n+ 未来简史\n+ 微习惯（已完成）\n+ 三体\n+ 今日简史\n\n### 源码阅读\n\n- MBPogressHUD（已完成）\n- MJRefresh\n- Toast（已完成）\n- DZNEmptyDataSet（已完成）\n- SDWebImage\n- IDMPhotoBrowser\n- YYKit\n\n### 跨平台框架\n\n- 尝试一下ReactNative.\n\n### 学习基金\n\n- 成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）\n\n### Github\n\n+ 计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用\n\n### 博客(6篇+)\n\n+ 每两个月写一篇博客来总结自己\n\n","slug":"年度总结","published":1,"updated":"2020-07-10T03:57:05.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcftelef000x8h36tp49wc99","content":"<p>​    <img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619\" alt=\"图片\"></p>\n<p>​    前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。</p>\n<p>​    本片文章主要分为三个部分:</p>\n<p>​    1.今年的收获。</p>\n<p>​    2.今年的遗憾。</p>\n<p>​    3.明年的计划。</p>\n<h1 id=\"今年的收获\"><a href=\"#今年的收获\" class=\"headerlink\" title=\"今年的收获\"></a>今年的收获</h1><h2 id=\"思想上的收获\"><a href=\"#思想上的收获\" class=\"headerlink\" title=\"思想上的收获\"></a>思想上的收获</h2><ul>\n<li>今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。</li>\n</ul>\n<h2 id=\"生活娱乐上的收获\"><a href=\"#生活娱乐上的收获\" class=\"headerlink\" title=\"生活娱乐上的收获\"></a>生活娱乐上的收获</h2><ul>\n<li>王者荣耀上了王者(准确的说是25星)</li>\n</ul>\n<h2 id=\"工作上的收获\"><a href=\"#工作上的收获\" class=\"headerlink\" title=\"工作上的收获\"></a>工作上的收获</h2><ul>\n<li>读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》</li>\n</ul>\n<h1 id=\"今年的遗憾\"><a href=\"#今年的遗憾\" class=\"headerlink\" title=\"今年的遗憾\"></a>今年的遗憾</h1><h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li>今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。</li>\n</ul>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ol>\n<li>本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。</li>\n<li>由于健身缺少计划，也没能坚持下去。</li>\n</ol>\n<h1 id=\"明年的计划\"><a href=\"#明年的计划\" class=\"headerlink\" title=\"明年的计划\"></a>明年的计划</h1><p>写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。</p>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"健身\"></p>\n<ul>\n<li>明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉</li>\n<li>王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。</li>\n</ul>\n<h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"读书\"></p>\n<h3 id=\"技术类书籍-4本\"><a href=\"#技术类书籍-4本\" class=\"headerlink\" title=\"技术类书籍(4本+)\"></a>技术类书籍(4本+)</h3><ul>\n<li>iOS面试之道（已完成）</li>\n<li>Objective-C高级编程</li>\n<li>测试驱动的iOS开发</li>\n<li>图解HTTP</li>\n</ul>\n<h3 id=\"非技术类书籍-3本\"><a href=\"#非技术类书籍-3本\" class=\"headerlink\" title=\"非技术类书籍(3本+)\"></a>非技术类书籍(3本+)</h3><ul>\n<li>人类简史（已完成）</li>\n<li>未来简史</li>\n<li>微习惯（已完成）</li>\n<li>三体</li>\n<li>今日简史</li>\n</ul>\n<h3 id=\"源码阅读\"><a href=\"#源码阅读\" class=\"headerlink\" title=\"源码阅读\"></a>源码阅读</h3><ul>\n<li>MBPogressHUD（已完成）</li>\n<li>MJRefresh</li>\n<li>Toast（已完成）</li>\n<li>DZNEmptyDataSet（已完成）</li>\n<li>SDWebImage</li>\n<li>IDMPhotoBrowser</li>\n<li>YYKit</li>\n</ul>\n<h3 id=\"跨平台框架\"><a href=\"#跨平台框架\" class=\"headerlink\" title=\"跨平台框架\"></a>跨平台框架</h3><ul>\n<li>尝试一下ReactNative.</li>\n</ul>\n<h3 id=\"学习基金\"><a href=\"#学习基金\" class=\"headerlink\" title=\"学习基金\"></a>学习基金</h3><ul>\n<li>成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）</li>\n</ul>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><ul>\n<li>计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用</li>\n</ul>\n<h3 id=\"博客-6篇\"><a href=\"#博客-6篇\" class=\"headerlink\" title=\"博客(6篇+)\"></a>博客(6篇+)</h3><ul>\n<li>每两个月写一篇博客来总结自己</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>​    <img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676f0af490ee858?w=1080&h=658&f=jpeg&s=70619\" alt=\"图片\"></p>\n<p>​    前言:看到自己关注的开发者大都写了自己的年终终结，仿佛写了总结之后会有一种魔力来督促自己前进似的，所以有了这篇文章。</p>\n<p>​    本片文章主要分为三个部分:</p>\n<p>​    1.今年的收获。</p>\n<p>​    2.今年的遗憾。</p>\n<p>​    3.明年的计划。</p>\n<h1 id=\"今年的收获\"><a href=\"#今年的收获\" class=\"headerlink\" title=\"今年的收获\"></a>今年的收获</h1><h2 id=\"思想上的收获\"><a href=\"#思想上的收获\" class=\"headerlink\" title=\"思想上的收获\"></a>思想上的收获</h2><ul>\n<li>今年最大的收获就是思想上的，以前总有一点抗拒新东西，遇到问题就想去咨询一下圈内大佬，直到有一次问了桌大一个问题.桌大不仅给我解决方案，还附加了一段文字(遇到这种问题应该先去通过搜索解决。因为这样你更可能得到全面的答案。也锻炼了自己的信息筛选能力)。真的是一段醍醐灌顶的话。</li>\n</ul>\n<h2 id=\"生活娱乐上的收获\"><a href=\"#生活娱乐上的收获\" class=\"headerlink\" title=\"生活娱乐上的收获\"></a>生活娱乐上的收获</h2><ul>\n<li>王者荣耀上了王者(准确的说是25星)</li>\n</ul>\n<h2 id=\"工作上的收获\"><a href=\"#工作上的收获\" class=\"headerlink\" title=\"工作上的收获\"></a>工作上的收获</h2><ul>\n<li>读完了一个技术类书籍《编写高质量iOS与OS X代码的52个有效方法》</li>\n</ul>\n<h1 id=\"今年的遗憾\"><a href=\"#今年的遗憾\" class=\"headerlink\" title=\"今年的遗憾\"></a>今年的遗憾</h1><h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li>今年有计划一次跳槽，是一家比较大的公司，因为积累不足，导致面试未通过。</li>\n</ul>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><ol>\n<li>本来王者荣耀是计划要上一个荣耀王者的，结果到后面发现演员比较多，就放弃了。</li>\n<li>由于健身缺少计划，也没能坚持下去。</li>\n</ol>\n<h1 id=\"明年的计划\"><a href=\"#明年的计划\" class=\"headerlink\" title=\"明年的计划\"></a>明年的计划</h1><p>写这篇文章主要就是为了有一个计划表，所以明年计划会比较多，希望能大致完成。</p>\n<h2 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542765516b?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"健身\"></p>\n<ul>\n<li>明年的好好运动健身了，毕竟动不动就有什么程序员猝死的消息（真的是太可怕了）。明年计划增重10斤肌肉</li>\n<li>王者荣耀真的是个很毒的游戏，明年的少打了，娱乐娱乐就行。</li>\n</ul>\n<h2 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167db9542734ef49?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"读书\"></p>\n<h3 id=\"技术类书籍-4本\"><a href=\"#技术类书籍-4本\" class=\"headerlink\" title=\"技术类书籍(4本+)\"></a>技术类书籍(4本+)</h3><ul>\n<li>iOS面试之道（已完成）</li>\n<li>Objective-C高级编程</li>\n<li>测试驱动的iOS开发</li>\n<li>图解HTTP</li>\n</ul>\n<h3 id=\"非技术类书籍-3本\"><a href=\"#非技术类书籍-3本\" class=\"headerlink\" title=\"非技术类书籍(3本+)\"></a>非技术类书籍(3本+)</h3><ul>\n<li>人类简史（已完成）</li>\n<li>未来简史</li>\n<li>微习惯（已完成）</li>\n<li>三体</li>\n<li>今日简史</li>\n</ul>\n<h3 id=\"源码阅读\"><a href=\"#源码阅读\" class=\"headerlink\" title=\"源码阅读\"></a>源码阅读</h3><ul>\n<li>MBPogressHUD（已完成）</li>\n<li>MJRefresh</li>\n<li>Toast（已完成）</li>\n<li>DZNEmptyDataSet（已完成）</li>\n<li>SDWebImage</li>\n<li>IDMPhotoBrowser</li>\n<li>YYKit</li>\n</ul>\n<h3 id=\"跨平台框架\"><a href=\"#跨平台框架\" class=\"headerlink\" title=\"跨平台框架\"></a>跨平台框架</h3><ul>\n<li>尝试一下ReactNative.</li>\n</ul>\n<h3 id=\"学习基金\"><a href=\"#学习基金\" class=\"headerlink\" title=\"学习基金\"></a>学习基金</h3><ul>\n<li>成立1000元学习基金，一年下来能用到正途上（已购买李明杰底层原理，李明杰swift，戴明的iOS课程）</li>\n</ul>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><ul>\n<li>计划发布一个域名管理的开源库(JKIPManager)，这个看起来暂时没什么用</li>\n</ul>\n<h3 id=\"博客-6篇\"><a href=\"#博客-6篇\" class=\"headerlink\" title=\"博客(6篇+)\"></a>博客(6篇+)</h3><ul>\n<li>每两个月写一篇博客来总结自己</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcfteldo00008h36i4la1nz2","category_id":"ckcfteldv00048h36fgucg2c0","_id":"ckcftele6000g8h36gcyhpxpk"},{"post_id":"ckcftelds00028h3653y4z9p3","category_id":"ckcfteldv00048h36fgucg2c0","_id":"ckcfteleb000m8h36dd12qrrl"},{"post_id":"ckcftele7000j8h369gn20jxp","category_id":"ckcfteldv00048h36fgucg2c0","_id":"ckcftelee000t8h3641ahk186"},{"post_id":"ckcfteldx00068h366fnqoi46","category_id":"ckcftele5000f8h36sa4hnu93","_id":"ckcftelef000y8h36j4aow09r"},{"post_id":"ckcfteldy00078h368tgx0m68","category_id":"ckcfteleb000o8h36fz4hdy5u","_id":"ckcfteleg00118h36y62zqhu4"},{"post_id":"ckcftelef000x8h36tp49wc99","category_id":"ckcfteleb000o8h36fz4hdy5u","_id":"ckcfteleh00158h36yky3my1a"},{"post_id":"ckcfteldz00088h36v5ndm8lr","category_id":"ckcfteleb000o8h36fz4hdy5u","_id":"ckcftelei00178h36zvu8jcu5"},{"post_id":"ckcftele2000c8h36kkgczw9l","category_id":"ckcftele5000f8h36sa4hnu93","_id":"ckcftelei001b8h36p32lz8gc"},{"post_id":"ckcftele4000e8h36tfercbzd","category_id":"ckcfteleb000o8h36fz4hdy5u","_id":"ckcftelej001e8h36v8n47n13"},{"post_id":"ckcftelea000l8h36sdbzcd7t","category_id":"ckcfteleb000o8h36fz4hdy5u","_id":"ckcftelek001f8h36nfso5d18"},{"post_id":"ckcftelec000q8h36gimq4fyr","category_id":"ckcftelej001d8h361ohv22aq","_id":"ckcftelek001h8h366lo3wzmj"},{"post_id":"ckcfteled000s8h36zek4lg68","category_id":"ckcftelek001g8h36ebdvygsn","_id":"ckcftelel001i8h36u9h1gxhg"}],"PostTag":[{"post_id":"ckcfteldo00008h36i4la1nz2","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftele2000b8h36usvqwgmm"},{"post_id":"ckcfteldz00088h36v5ndm8lr","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftele4000d8h36q1ap7pt6"},{"post_id":"ckcftele2000c8h36kkgczw9l","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftele7000i8h36ngfhf8j6"},{"post_id":"ckcftelds00028h3653y4z9p3","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftelea000k8h360f79vzb4"},{"post_id":"ckcftele4000e8h36tfercbzd","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftelec000p8h369x9rw0pk"},{"post_id":"ckcftele7000j8h369gn20jxp","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcfteled000r8h367fjoeg6i"},{"post_id":"ckcfteldx00068h366fnqoi46","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftelee000w8h36rer267v2"},{"post_id":"ckcftelea000l8h36sdbzcd7t","tag_id":"ckcfteldw00058h36rp2g8uwd","_id":"ckcftelef000z8h36p34gpdu7"},{"post_id":"ckcfteldy00078h368tgx0m68","tag_id":"ckcfteleb000n8h361t84n4yl","_id":"ckcfteleg00128h363jomuojc"},{"post_id":"ckcftelec000q8h36gimq4fyr","tag_id":"ckcftelee000v8h360iy678zw","_id":"ckcfteleh00148h36zmo00s96"},{"post_id":"ckcfteled000s8h36zek4lg68","tag_id":"ckcfteleg00138h362sq85pgp","_id":"ckcftelei00198h365pxbw5ad"},{"post_id":"ckcftelef000x8h36tp49wc99","tag_id":"ckcftelei00188h36wvkvm4dl","_id":"ckcftelej001c8h36p9fnxqr7"}],"Tag":[{"name":"iOS","_id":"ckcfteldw00058h36rp2g8uwd"},{"name":"学习笔记","_id":"ckcfteleb000n8h361t84n4yl"},{"name":"旅行","_id":"ckcftelee000v8h360iy678zw"},{"name":"网络","_id":"ckcfteleg00138h362sq85pgp"},{"name":"年度总结","_id":"ckcftelei00188h36wvkvm4dl"}]}}